/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { PushButtonChangeEvent } from "./components/rux-push-button/rux-push-button.model";
export namespace Components {
    interface RuxButton {
        "disabled": boolean;
        "icon": string;
        "iconOnly": boolean;
        "outline": boolean;
        "size"?: 'small' | 'large';
        "type": string;
    }
    interface RuxClock {
        "aos": number;
        "dayOfYear": number;
        "hideDate": boolean;
        "hideTimezone": boolean;
        "los": string;
        "small": boolean;
        "time": string;
        "timezone": string;
    }
    interface RuxGlobalStatusBar {
        "appname": string;
        "version": string;
    }
    interface RuxMenuItem {
    }
    interface RuxMenuItemDivider {
    }
    interface RuxModal {
    }
    interface RuxMonitoringIcon {
        "icon": string;
        "label": string;
        "library": string;
        "notifications": number;
        "status": string;
        "sublabel": string;
    }
    interface RuxMonitoringProgressIcon {
        "label": string;
        "notifications": number;
        "progress": number;
        "range": Array<RangeItem>;
        "sublabel": string;
    }
    interface RuxNotification {
    }
    interface RuxPopUpMenu {
    }
    interface RuxProgress {
    }
    interface RuxPushButton {
        /**
          * Checks the push button via HTML `checked` attribute. Push button takes on a distinct "enabled" or "selected" visual state.
         */
        "checked": boolean;
        /**
          * Disables the push button via HTML `disabled` attribute. Button takes on a distinct disabled visual state. Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The label of the push button. Can be overridden by placing content in the default slot of the rusx-push-button component.
         */
        "label": string;
    }
    interface RuxStatus {
        "status": string;
    }
}
declare global {
    interface HTMLRuxButtonElement extends Components.RuxButton, HTMLStencilElement {
    }
    var HTMLRuxButtonElement: {
        prototype: HTMLRuxButtonElement;
        new (): HTMLRuxButtonElement;
    };
    interface HTMLRuxClockElement extends Components.RuxClock, HTMLStencilElement {
    }
    var HTMLRuxClockElement: {
        prototype: HTMLRuxClockElement;
        new (): HTMLRuxClockElement;
    };
    interface HTMLRuxGlobalStatusBarElement extends Components.RuxGlobalStatusBar, HTMLStencilElement {
    }
    var HTMLRuxGlobalStatusBarElement: {
        prototype: HTMLRuxGlobalStatusBarElement;
        new (): HTMLRuxGlobalStatusBarElement;
    };
    interface HTMLRuxMenuItemElement extends Components.RuxMenuItem, HTMLStencilElement {
    }
    var HTMLRuxMenuItemElement: {
        prototype: HTMLRuxMenuItemElement;
        new (): HTMLRuxMenuItemElement;
    };
    interface HTMLRuxMenuItemDividerElement extends Components.RuxMenuItemDivider, HTMLStencilElement {
    }
    var HTMLRuxMenuItemDividerElement: {
        prototype: HTMLRuxMenuItemDividerElement;
        new (): HTMLRuxMenuItemDividerElement;
    };
    interface HTMLRuxModalElement extends Components.RuxModal, HTMLStencilElement {
    }
    var HTMLRuxModalElement: {
        prototype: HTMLRuxModalElement;
        new (): HTMLRuxModalElement;
    };
    interface HTMLRuxMonitoringIconElement extends Components.RuxMonitoringIcon, HTMLStencilElement {
    }
    var HTMLRuxMonitoringIconElement: {
        prototype: HTMLRuxMonitoringIconElement;
        new (): HTMLRuxMonitoringIconElement;
    };
    interface HTMLRuxMonitoringProgressIconElement extends Components.RuxMonitoringProgressIcon, HTMLStencilElement {
    }
    var HTMLRuxMonitoringProgressIconElement: {
        prototype: HTMLRuxMonitoringProgressIconElement;
        new (): HTMLRuxMonitoringProgressIconElement;
    };
    interface HTMLRuxNotificationElement extends Components.RuxNotification, HTMLStencilElement {
    }
    var HTMLRuxNotificationElement: {
        prototype: HTMLRuxNotificationElement;
        new (): HTMLRuxNotificationElement;
    };
    interface HTMLRuxPopUpMenuElement extends Components.RuxPopUpMenu, HTMLStencilElement {
    }
    var HTMLRuxPopUpMenuElement: {
        prototype: HTMLRuxPopUpMenuElement;
        new (): HTMLRuxPopUpMenuElement;
    };
    interface HTMLRuxProgressElement extends Components.RuxProgress, HTMLStencilElement {
    }
    var HTMLRuxProgressElement: {
        prototype: HTMLRuxProgressElement;
        new (): HTMLRuxProgressElement;
    };
    interface HTMLRuxPushButtonElement extends Components.RuxPushButton, HTMLStencilElement {
    }
    var HTMLRuxPushButtonElement: {
        prototype: HTMLRuxPushButtonElement;
        new (): HTMLRuxPushButtonElement;
    };
    interface HTMLRuxStatusElement extends Components.RuxStatus, HTMLStencilElement {
    }
    var HTMLRuxStatusElement: {
        prototype: HTMLRuxStatusElement;
        new (): HTMLRuxStatusElement;
    };
    interface HTMLElementTagNameMap {
        "rux-button": HTMLRuxButtonElement;
        "rux-clock": HTMLRuxClockElement;
        "rux-global-status-bar": HTMLRuxGlobalStatusBarElement;
        "rux-menu-item": HTMLRuxMenuItemElement;
        "rux-menu-item-divider": HTMLRuxMenuItemDividerElement;
        "rux-modal": HTMLRuxModalElement;
        "rux-monitoring-icon": HTMLRuxMonitoringIconElement;
        "rux-monitoring-progress-icon": HTMLRuxMonitoringProgressIconElement;
        "rux-notification": HTMLRuxNotificationElement;
        "rux-pop-up-menu": HTMLRuxPopUpMenuElement;
        "rux-progress": HTMLRuxProgressElement;
        "rux-push-button": HTMLRuxPushButtonElement;
        "rux-status": HTMLRuxStatusElement;
    }
}
declare namespace LocalJSX {
    interface RuxButton {
        "disabled"?: boolean;
        "icon"?: string;
        "iconOnly"?: boolean;
        "outline"?: boolean;
        "size"?: 'small' | 'large';
        "type"?: string;
    }
    interface RuxClock {
        "aos"?: number;
        "dayOfYear"?: number;
        "hideDate"?: boolean;
        "hideTimezone"?: boolean;
        "los"?: string;
        "small"?: boolean;
        "time"?: string;
        "timezone"?: string;
    }
    interface RuxGlobalStatusBar {
        "appname"?: string;
        "version"?: string;
    }
    interface RuxMenuItem {
    }
    interface RuxMenuItemDivider {
    }
    interface RuxModal {
    }
    interface RuxMonitoringIcon {
        "icon"?: string;
        "label"?: string;
        "library"?: string;
        "notifications"?: number;
        "status"?: string;
        "sublabel"?: string;
    }
    interface RuxMonitoringProgressIcon {
        "label"?: string;
        "notifications"?: number;
        "progress"?: number;
        "range"?: Array<RangeItem>;
        "sublabel"?: string;
    }
    interface RuxNotification {
    }
    interface RuxPopUpMenu {
    }
    interface RuxProgress {
    }
    interface RuxPushButton {
        /**
          * Checks the push button via HTML `checked` attribute. Push button takes on a distinct "enabled" or "selected" visual state.
         */
        "checked"?: boolean;
        /**
          * Disables the push button via HTML `disabled` attribute. Button takes on a distinct disabled visual state. Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The label of the push button. Can be overridden by placing content in the default slot of the rusx-push-button component.
         */
        "label"?: string;
        /**
          * Emitted when the checked property has changed.
         */
        "onRux-change"?: (event: CustomEvent<PushButtonChangeEvent>) => void;
    }
    interface RuxStatus {
        "status"?: string;
    }
    interface IntrinsicElements {
        "rux-button": RuxButton;
        "rux-clock": RuxClock;
        "rux-global-status-bar": RuxGlobalStatusBar;
        "rux-menu-item": RuxMenuItem;
        "rux-menu-item-divider": RuxMenuItemDivider;
        "rux-modal": RuxModal;
        "rux-monitoring-icon": RuxMonitoringIcon;
        "rux-monitoring-progress-icon": RuxMonitoringProgressIcon;
        "rux-notification": RuxNotification;
        "rux-pop-up-menu": RuxPopUpMenu;
        "rux-progress": RuxProgress;
        "rux-push-button": RuxPushButton;
        "rux-status": RuxStatus;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rux-button": LocalJSX.RuxButton & JSXBase.HTMLAttributes<HTMLRuxButtonElement>;
            "rux-clock": LocalJSX.RuxClock & JSXBase.HTMLAttributes<HTMLRuxClockElement>;
            "rux-global-status-bar": LocalJSX.RuxGlobalStatusBar & JSXBase.HTMLAttributes<HTMLRuxGlobalStatusBarElement>;
            "rux-menu-item": LocalJSX.RuxMenuItem & JSXBase.HTMLAttributes<HTMLRuxMenuItemElement>;
            "rux-menu-item-divider": LocalJSX.RuxMenuItemDivider & JSXBase.HTMLAttributes<HTMLRuxMenuItemDividerElement>;
            "rux-modal": LocalJSX.RuxModal & JSXBase.HTMLAttributes<HTMLRuxModalElement>;
            "rux-monitoring-icon": LocalJSX.RuxMonitoringIcon & JSXBase.HTMLAttributes<HTMLRuxMonitoringIconElement>;
            "rux-monitoring-progress-icon": LocalJSX.RuxMonitoringProgressIcon & JSXBase.HTMLAttributes<HTMLRuxMonitoringProgressIconElement>;
            "rux-notification": LocalJSX.RuxNotification & JSXBase.HTMLAttributes<HTMLRuxNotificationElement>;
            "rux-pop-up-menu": LocalJSX.RuxPopUpMenu & JSXBase.HTMLAttributes<HTMLRuxPopUpMenuElement>;
            "rux-progress": LocalJSX.RuxProgress & JSXBase.HTMLAttributes<HTMLRuxProgressElement>;
            "rux-push-button": LocalJSX.RuxPushButton & JSXBase.HTMLAttributes<HTMLRuxPushButtonElement>;
            "rux-status": LocalJSX.RuxStatus & JSXBase.HTMLAttributes<HTMLRuxStatusElement>;
        }
    }
}
