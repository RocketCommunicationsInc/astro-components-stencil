/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Classification, Status } from "./common/commonTypes.module";
import { LogRow } from "./components/rux-log/rux-log.model";
import { RangeItem } from "./components/rux-monitoring-progress-icon/rux-monitoring-progress-icon";
import { SegmentedButton } from "./components/rux-segmented-button/rux-segmented-button.model";
import { SwitchChangeEvent } from "./components/rux-switch/rux-switch.model";
export namespace Components {
    interface RuxButton {
        /**
          * Toggles disabled attribute on the button
         */
        "disabled": boolean;
        /**
          * For a [button styleguid, see the Button section in Astro UXDS Guidelines](https://astrouxds.com/components/button) Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string | null;
        /**
          * Hides slotted text from the button by setting rux-button--icon-only class
         */
        "iconOnly": boolean;
        /**
          * Changes button style from solid to secondary by setting rux-button--secondary class
         */
        "secondary": boolean;
        /**
          * Changes size of a button from standard to small or large by setting sizing classes rux-button--small rux-button--large
         */
        "size"?: 'small' | 'large';
    }
    interface RuxButtonGroup {
        /**
          * The horizontal alignment of buttons within the group
         */
        "hAlign": 'left' | 'center' | 'right';
    }
    interface RuxCheckbox {
        /**
          * The checkbox name
         */
        "checked": boolean;
        /**
          * Disables the checkbox via HTML disabled attribute. Checkbox takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * Toggles indeterminate state of a checkbox
         */
        "indeterminate": boolean;
        /**
          * The checkbox name
         */
        "name": string;
        /**
          * Sets the input as required
         */
        "required": boolean;
        /**
          * The checkbox name
         */
        "value": string;
    }
    interface RuxClassificationMarking {
        /**
          * Defines which classification marking will be displayed.
         */
        "classification": Classification;
        /**
          * Allows additional text labels to be added to the a marking
         */
        "label"?: string;
        /**
          * Declares the marking as a `tag` rather than the default banner style
         */
        "tag": boolean;
    }
    interface RuxClock {
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax) displays a timestamp labeled "AOS" next to the standard clock.
         */
        "aos"?: number;
        /**
          * Hides the day of the year.
         */
        "hideDate": boolean;
        /**
          * Hides the timezone in the main 24-hour clock. Timezone does not display on AOS/LOS.
         */
        "hideTimezone": boolean;
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), displays a timestamp labeled "LOS" next to the standard clock.
         */
        "los"?: string;
        /**
          * Applies a smaller clock style.
         */
        "small": boolean;
        /**
          * Accepts the [IANA timezone string format](https://www.iana.org/time-zones) such as `'America/Los_Angeles'` or any single-character designation for a [military timezones](https://en.wikipedia.org/wiki/List_of_military_time_zones) (`'A'` through `'Z'`, excluding `'J'`), both case-insensitive. If no value for timezone is provided, the clock will use `'UTC'`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone": string;
    }
    interface RuxDatetime {
        /**
          * The date time to be formatted
         */
        "date": Date | string;
        /**
          * Format options for day
         */
        "day"?: 'numeric' | '2-digit';
        /**
          * Format options for hour
         */
        "hour"?: 'numeric' | '2-digit';
        /**
          * Display date in 12 hour time.
         */
        "hour12": boolean;
        /**
          * The locale
         */
        "locale": string;
        /**
          * Format options for minute
         */
        "minute"?: 'numeric' | '2-digit';
        /**
          * Format options for month
         */
        "month"?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';
        /**
          * Format options for second
         */
        "second"?: 'numeric' | '2-digit';
        /**
          * Format options for Timezone
         */
        "timeZone"?: string;
        /**
          * Format options for Timezone name
         */
        "timeZoneName"?: 'short' | 'long';
        /**
          * Format options for year
         */
        "year"?: 'numeric' | '2-digit';
    }
    interface RuxGlobalStatusBar {
        /**
          * Sets the domain of the application to be displayed in the app-meta element
         */
        "appDomain"?: string;
        /**
          * Sets the name of the application to be displayed in the app-meta element
         */
        "appName"?: string;
        /**
          * Sets the version of the application to be displayed in the app-meta element
         */
        "appVersion"?: string;
        /**
          * Declares whether the app-state component will be shown in the app-meta slot
         */
        "includeAppState": boolean;
        /**
          * Declares whether a rux-icon will be shown in the left-side slot
         */
        "includeIcon": boolean;
        /**
          * Declares whether the username component will be shown in the app-meta slot
         */
        "includeUsername": boolean;
        /**
          * Sets the icon to be displayed in the default rux-icon component
         */
        "menuIcon"?: string;
    }
    interface RuxIcon {
        /**
          * The icon color
         */
        "color"?: string;
        /**
          * The icon name
         */
        "icon": string;
        /**
          * The icon label
         */
        "label"?: string;
        /**
          * The size of the icon
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large';
    }
    interface RuxIcon360 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIcon3dRotation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIcon4k {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAcUnit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccessAlarms {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccessTime {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccessibility {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccessibilityNew {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccessible {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccessibleForward {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccountBalance {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccountBalanceWallet {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccountBox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccountCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAdb {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddAPhoto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddAlarm {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddAlert {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddBox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddCircleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddComment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddLocation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddPhotoAlternate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddShoppingCart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddToHomeScreen {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddToPhotos {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddToQueue {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAdjust {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatFlat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatFlatAngled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatIndividualSuite {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatLegroomExtra {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatLegroomNormal {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatLegroomReduced {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatReclineExtra {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatReclineNormal {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirplanemodeActive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirplanemodeInactive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirplay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirportShuttle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAlarm {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAlarmAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAlarmOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAlarmOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAlbum {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAllInbox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAllInclusive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAllOut {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAlternateEmail {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAltitude {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAndroid {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAnnouncement {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAntenna {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAntennaOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAntennaReceive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAntennaTransmit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconApps {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArchive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowBack {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowBackIos {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowDownward {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowDropDown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowDropDownCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowDropUp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowForward {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowForwardIos {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowRightAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowUpward {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArtTrack {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAspectRatio {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssessment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssignment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssignmentFind {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssignmentLate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssignmentReturn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssignmentReturned {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssignmentTurnedIn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssistant {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssistantPhoto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAttachFile {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAttachMoney {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAttachment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAudiotrack {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAutorenew {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAvTimer {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBackspace {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBackup {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBallot {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBarChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBattery20 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBattery30 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBattery50 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBattery60 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBattery80 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBattery90 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryAlert {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryCharging20 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryCharging30 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryCharging50 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryCharging60 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryCharging80 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryCharging90 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryChargingFull {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryFull {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryStd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryUnknown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBeachAccess {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBeenhere {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBlock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBluetooth {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBluetoothAudio {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBluetoothConnected {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBluetoothDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBluetoothSearching {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBlurCircular {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBlurLinear {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBlurOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBlurOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBook {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBookmark {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBookmarkBorder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBookmarks {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderAll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderBottom {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderClear {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderColor {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderHorizontal {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderInner {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderOuter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderStyle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderTop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderVertical {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrandingWatermark {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness1 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness2 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness3 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness4 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness5 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness6 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness7 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightnessAuto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightnessHigh {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightnessLow {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightnessMedium {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrokenImage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrush {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBubbleChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBugReport {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBuild {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBurstMode {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBusiness {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBusinessCenter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCached {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCake {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCalendarToday {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCalendarViewDay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCall {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallEnd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallMade {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallMerge {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallMissed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallMissedOutgoing {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallReceived {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallSplit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallToAction {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCamera {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCameraAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCameraEnhance {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCameraFront {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCameraRear {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCameraRoll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCancel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCancelPresentation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCardGiftcard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCardMembership {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCardTravel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCasino {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCast {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCastConnected {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCastForEducation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCategory {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCellWifi {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCenterFocusStrong {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCenterFocusWeak {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChangeHistory {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChatBubble {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChatBubbleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCheck {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCheckBox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCheckBoxOutlineBlank {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCheckCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCheckCircleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChevronLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChevronRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChildCare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChildFriendly {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChromeReaderMode {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconClass {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconClear {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconClearAll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconClose {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconClosedCaption {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloud {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloudCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloudDone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloudDownload {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloudOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloudQueue {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloudUpload {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCode {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCollections {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCollectionsBookmark {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconColorLens {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconColorize {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconComment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCommute {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCompare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCompareArrows {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCompassCalibration {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconComputer {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconConfirmationNumber {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconContactMail {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconContactPhone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconContactSupport {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconContacts {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconControlCamera {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconControlPoint {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconControlPointDuplicate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCopyright {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCreate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCreateNewFolder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCreditCard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCrop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCrop169 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCrop32 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCrop54 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCrop75 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropDin {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropFree {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropLandscape {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropOriginal {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropPortrait {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropRotate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropSquare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDashboard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDataUsage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDateRange {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDehaze {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDelete {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeleteForever {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeleteOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeleteSweep {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDepartureBoard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDescription {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDesktopAccessDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDesktopMac {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDesktopWindows {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDetails {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeveloperBoard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeveloperMode {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeviceHub {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeviceUnknown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDevices {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDevicesOther {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDialerSip {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDialpad {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirections {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsBike {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsBoat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsBus {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsCar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsRailway {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsRun {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsSubway {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsTransit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsWalk {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDiscFull {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDns {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDomain {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDomainDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDoneAll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDoneOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDonutLarge {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDonutSmall {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDrafts {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDragHandle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDragIndicator {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDriveEta {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDuo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDvr {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEdit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEditAttributes {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEditLocation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEject {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEmail {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEnhancedEncryption {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEqualizer {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEquipment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconError {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconErrorOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEuroSymbol {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEvStation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEvent {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEventAvailable {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEventBusy {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEventNote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExitToApp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExpandLess {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExpandMore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExplicit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExplore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExploreOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExposure {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExposureNeg1 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExposureNeg2 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExposurePlus1 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExposurePlus2 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExposureZero {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExtension {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFace {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFastForward {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFastRewind {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFastfood {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFavorite {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFavoriteBorder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFeaturedPlayList {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFeaturedVideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFeedback {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFiberDvr {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFiberManualRecord {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFiberNew {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFiberPin {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFiberSmartRecord {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFileCopy {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter1 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter2 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter3 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter4 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter5 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter6 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter7 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter8 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter9 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter9Plus {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterBAndW {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterCenterFocus {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterDrama {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterFrames {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterHdr {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterList {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterNone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterTiltShift {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterVintage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFindInPage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFindReplace {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFingerprint {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFirstPage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFitnessCenter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlag {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlashAuto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlashOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlashOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlightLand {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlightTakeoff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlip {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlipToBack {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlipToFront {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFolder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFolderOpen {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFolderShared {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFolderSpecial {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFontDownload {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatAlignCenter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatAlignJustify {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatAlignLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatAlignRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatBold {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatClear {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatColorFill {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatColorReset {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatColorText {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatIndentDecrease {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatIndentIncrease {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatItalic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatLineSpacing {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatListBulleted {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatListNumbered {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatListNumberedRtl {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatPaint {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatQuote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatShapes {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatSize {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatStrikethrough {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatTextdirectionLToR {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatTextdirectionRToL {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatUnderlined {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconForum {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconForward {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconForward10 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconForward30 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconForward5 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFreeBreakfast {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFullscreen {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFullscreenExit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFunctions {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGTranslate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGamepad {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGames {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGavel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGesture {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGetApp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGif {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGolfCourse {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGpsFixed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGpsNotFixed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGpsOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGrade {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGradient {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGrain {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGraphicEq {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGridOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGridOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGroup {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGroupAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGroupWork {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHdrOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHdrOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHdrStrong {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHdrWeak {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHeadset {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHeadsetMic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHealing {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHearing {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHelp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHelpOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHighQuality {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHighlight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHighlightOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHistory {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHome {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHorizontalSplit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHotTub {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHotel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHourglassEmpty {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHourglassFull {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHowToReg {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHowToVote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHttp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHttps {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconImage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconImageAspectRatio {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconImageSearch {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconImportContacts {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconImportExport {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconImportantDevices {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInbox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconIndeterminateCheckBox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInfo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInput {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertChartOutlined {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertComment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertDriveFile {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertEmoticon {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertInvitation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertLink {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertPhoto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInvertColors {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInvertColorsOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconIso {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardArrowDown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardArrowLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardArrowRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardArrowUp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardBackspace {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardCapslock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardHide {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardReturn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardTab {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardVoice {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKitchen {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLabel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLabelImportant {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLabelOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLandscape {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLanguage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLaptop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLaptopChromebook {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLaptopMac {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLaptopWindows {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLastPage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLaunch {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLayers {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLayersClear {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLeakAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLeakRemove {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLens {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLibraryAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLibraryBooks {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLibraryMusic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLineStyle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLineWeight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLinearScale {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLink {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLinkOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLinkedCamera {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconList {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconListAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLiveHelp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLiveTv {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalActivity {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalAirport {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalAtm {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalBar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalCafe {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalConvenienceStore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalDining {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalDrink {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalGasStation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalGroceryStore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalHospital {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalHotel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalLaundryService {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalLibrary {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalMall {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalMovies {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalOffer {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalParking {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalPharmacy {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalPhone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalPlay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalPostOffice {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalPrintshop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalSee {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalShipping {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalTaxi {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocationCity {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocationDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocationOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocationOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocationSearching {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLockOpen {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks1 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks2 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks3 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks4 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks5 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks6 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLoop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLoupe {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLowPriority {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLoyalty {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMail {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMailOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMap {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMarkunread {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMarkunreadMailbox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMaximize {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMeetingRoom {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMemory {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMenu {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMergeType {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMessage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMicNone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMicOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMinimize {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMissedVideoCall {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMission {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMms {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMobileFriendly {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMobileOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMobileScreenShare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconModeComment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMonetizationOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMoney {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMoneyOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMonochromePhotos {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMood {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMoodBad {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMoreHoriz {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMoreVert {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMotorcycle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMouse {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMoveToInbox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMovie {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMovieCreation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMovieFilter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMultilineChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMusicNote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMusicOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMusicVideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMyLocation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNature {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNaturePeople {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNavigateBefore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNavigateNext {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNavigation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNearMe {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNetcom {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNetworkCell {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNetworkCheck {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNetworkLocked {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNetworkWifi {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNewReleases {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNextWeek {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNfc {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNoEncryption {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNoMeetingRoom {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNoSim {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotInterested {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotListedLocation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNoteAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotes {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotificationImportant {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotifications {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotificationsActive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotificationsNone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotificationsOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotificationsPaused {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOfflineBolt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOfflinePin {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOndemandVideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOpacity {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOpenInBrowser {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOpenInNew {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOpenWith {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOutlinedFlag {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPages {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPageview {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPalette {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPanTool {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPanorama {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPanoramaFishEye {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPanoramaHorizontal {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPanoramaVertical {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPanoramaWideAngle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPartyMode {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPause {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPauseCircleFilled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPauseCircleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPausePresentation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPayload {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPayment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPeopleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermCameraMic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermContactCalendar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermDataSetting {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermDeviceInformation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermIdentity {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermMedia {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermPhoneMsg {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermScanWifi {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPerson {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPersonAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPersonAddDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPersonOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPersonPin {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPersonPinCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPersonalVideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPets {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneAndroid {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneBluetoothSpeaker {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneCallback {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneForwarded {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneInTalk {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneIphone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneLocked {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneMissed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonePaused {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonelink {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonelinkErase {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonelinkLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonelinkOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonelinkRing {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonelinkSetup {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoAlbum {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoCamera {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoFilter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoLibrary {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoSizeSelectActual {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoSizeSelectLarge {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoSizeSelectSmall {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPictureAsPdf {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPictureInPicture {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPictureInPictureAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPieChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPinDrop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlace {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlayArrow {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlayCircleFilled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlayCircleFilledWhite {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlayCircleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlayForWork {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlaylistAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlaylistAddCheck {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlaylistPlay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlusOne {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPoll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPool {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPortableWifiOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPortrait {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPower {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPowerInput {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPowerOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPowerSettingsNew {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPregnantWoman {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPresentToAll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPrint {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPrintDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPriorityHigh {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconProcessor {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconProcessorAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPropulsionPower {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPublic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPublish {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconQueryBuilder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconQuestionAnswer {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconQueue {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconQueueMusic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconQueuePlayNext {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRadio {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRadioButtonChecked {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRadioButtonUnchecked {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRateReview {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReceipt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRecentActors {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRecordVoiceOver {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRedeem {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRedo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRefresh {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRemove {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRemoveCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRemoveCircleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRemoveFromQueue {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRemoveRedEye {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRemoveShoppingCart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReorder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRepeat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRepeatOne {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReplay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReplay10 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReplay30 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReplay5 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReply {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReplyAll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReport {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReportOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReportProblem {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRestaurant {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRestaurantMenu {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRestore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRestoreFromTrash {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRestorePage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRingVolume {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRoom {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRoomService {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRotate90DegreesCc {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRotateLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRotateRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRoundedCorner {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRouter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRowing {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRssFeed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRvHookup {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSatellite {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSatelliteOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSatelliteReceive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSatelliteTransmit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSave {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSaveAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScanner {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScatterPlot {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSchedule {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSchool {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScreenLockLandscape {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScreenLockPortrait {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScreenLockRotation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScreenRotation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScreenShare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSdCard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSdStorage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSearch {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSeat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSecurity {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSelectAll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSend {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSentimentDissatisfied {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSentimentSatisfied {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSentimentSatisfiedAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSentimentVeryDissatisfied {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSentimentVerySatisfied {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettings {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsApplications {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsBackupRestore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsBluetooth {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsBrightness {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsCell {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsEthernet {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsInputAntenna {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsInputComponent {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsInputComposite {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsInputHdmi {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsInputSvideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsOverscan {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsPhone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsPower {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsRemote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsSystemDaydream {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsVoice {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShopTwo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShoppingBasket {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShoppingCart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShortText {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShowChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShuffle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShutterSpeed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellular0Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellular1Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellular2Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellular3Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellular4Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularConnectedNoInternet0Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularConnectedNoInternet1Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularConnectedNoInternet2Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularConnectedNoInternet3Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularConnectedNoInternet4Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularNoSim {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularNull {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi0Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi1Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi1BarLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi2Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi2BarLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi3Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi3BarLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi4Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi4BarLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifiOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSimCard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSkipNext {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSkipPrevious {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSlideshow {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSlowMotionVideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSmartphone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSmokeFree {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSmokingRooms {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSms {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSmsFailed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSnooze {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSolar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSort {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSortByAlpha {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpa {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpaceBar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpeaker {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpeakerGroup {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpeakerNotes {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpeakerNotesOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpeakerPhone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpellcheck {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStarBorder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStarHalf {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStarRate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStars {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStayCurrentLandscape {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStayCurrentPortrait {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStayPrimaryLandscape {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStayPrimaryPortrait {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStopScreenShare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStorage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStoreMallDirectory {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStraighten {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStreetview {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStrikethroughS {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStyle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSubdirectoryArrowLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSubdirectoryArrowRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSubject {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSubscriptions {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSubtitles {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSubway {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSupervisedUserCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSupervisorAccount {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSurroundSound {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwapCalls {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwapHoriz {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwapHorizontalCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwapVert {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwapVerticalCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwitchCamera {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwitchVideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSync {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSyncDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSyncProblem {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSystemUpdate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTab {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTabUnselected {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTableChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTablet {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTabletAndroid {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTabletMac {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTagFaces {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTapAndPlay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTerrain {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTextFields {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTextFormat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTextRotateUp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTextRotateVertical {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTextRotationNone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTextsms {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTexture {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTheaters {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconThermal {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconThumbDown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconThumbDownAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconThumbUp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconThumbUpAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconThumbsUpDown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimeToLeave {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimelapse {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimeline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimer {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimer10 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimer3 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimerOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTitle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconToc {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconToday {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconToggleOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconToggleOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconToll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTonality {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTouchApp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconToys {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTrackChanges {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTraffic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTrain {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTram {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTransferWithinAStation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTransform {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTransitEnterexit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTranslate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTrendingDown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTrendingFlat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTrendingUp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTripOrigin {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTune {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTurnedIn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTurnedInNot {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTv {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTvOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUnarchive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUndo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUnfoldLess {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUnfoldMore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUnsubscribe {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUpdate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUsb {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVerifiedUser {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVerticalAlignBottom {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVerticalAlignCenter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVerticalAlignTop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVerticalSplit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVibration {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVideoCall {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVideoLabel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVideoLibrary {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVideocam {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVideocamOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVideogameAsset {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewAgenda {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewArray {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewCarousel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewColumn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewComfy {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewCompact {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewDay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewHeadline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewList {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewModule {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewQuilt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewStream {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewWeek {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVignette {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVisibility {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVisibilityOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVoiceChat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVoiceOverOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVoicemail {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVolumeDown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVolumeMute {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVolumeOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVolumeUp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVpnKey {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVpnLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWallpaper {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWarning {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWatch {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWatchLater {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWaves {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWbAuto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWbCloudy {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWbIncandescent {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWbIridescent {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWbSunny {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWc {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWeb {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWebAsset {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWeekend {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWhatshot {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWhereToVote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWidgets {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWifi {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWifiLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWifiOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWifiTethering {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWork {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWorkOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWorkOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWrapText {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconYoutubeSearchedFor {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconZoomIn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconZoomInMap {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconZoomOut {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconZoomOutMap {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size": 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxLog {
        /**
          * An array of objects to display as log
         */
        "data": LogRow[];
        /**
          * A string to filter the array to return only the children whose `message` property contains a case-insensitive substring match.
         */
        "filter"?: string;
        /**
          * Accepts [IANA timezone string format](https://www.iana.org/time-zones) such as `America/Los_Angeles`. Default timezone is `UTC`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone": string;
    }
    interface RuxMenuItem {
        /**
          * Disables the item
         */
        "disabled": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * Value returned when item is selected. If no value is given, the text content will be used.
         */
        "value": any;
    }
    interface RuxMenuItemDivider {
    }
    interface RuxModal {
        /**
          * Text for confirmation button
         */
        "confirmText": string;
        /**
          * Text for close button
         */
        "denyText": string;
        /**
          * Modal body message
         */
        "modalMessage": string;
        /**
          * Modal header title
         */
        "modalTitle": string;
        /**
          * Shows and hides modal
         */
        "open": boolean;
    }
    interface RuxMonitoringIcon {
        /**
          * Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon": string;
        /**
          * Displays a label below the icon
         */
        "label": string;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and uses `'∞'` for one trillion or higher.
         */
        "notifications": number;
        /**
          * Styles the icon according to the Astro Status colors. Valid options are the Astro statuses `critical`, `serious`, `caution`, `normal`, `standby`, and `off`.
         */
        "status": Status;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxMonitoringProgressIcon {
        /**
          * Displays a label below the icon
         */
        "label"?: string;
        /**
          * Sets the maximum value for the progress range. When progress is this number, it reads 100%. When it is halfway between min and max, it will read 50%.
         */
        "max": number;
        /**
          * Sets the minimum value for the progress range. When progress is this number, it reads 0%. When it is halfway between min and max, it will read 50%.
         */
        "min": number;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and `'∞'` for one trillion or higher.
         */
        "notifications"?: number;
        /**
          * Displays this value as a percentage of where it lies between min and max in the center of the donut graph and styles a proportional segment of the graph. Progress can be positive or negative (the later useful for countdowns). The progress value must exist within the thresholds specified in the range property below, and must be an integer. If a non-integer value is passed in, progress will default to 0. If progress ever becomes less than min or greater than max, it will be set to equal min or max respectively.
         */
        "progress": number;
        /**
          * Items in this Array define thresholds for changing the status style of the progress icon. For each item in the Array, the icon will be styled with the given status while the progress value is less than or equal to the Array item’s threshold and greater than the next smallest item‘s threshold. Both progress and the Array items’ threshold values can be positive or negative. If no min is specified, the component assumes the Array's first status threshold begins at 0.
         */
        "range": Array<RangeItem>;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxNotification {
        /**
          * If provided, the banner will automatically close after this amount of time. Accepts value either in milliseconds or seconds (which will be converted to milliseconds internally), between `2000` and `10000`, or `2` and `10`, respectively. Any number provided outside of the `2000`-`10000` range will be ignored in favor of the default 2000ms delay. <br>If `closeAfter` is not passed or if it is given an undefined or `null` value, the banner will stay open until the user closes it.
         */
        "closeAfter"?: number;
        /**
          * Message for the notification banner.
         */
        "message": string;
        /**
          * Set to true to display the Banner and begin countdown to close (if a close-after Number value is provided).
         */
        "open": boolean;
        /**
          * The background color. Possible values include 'standby', 'normal', 'caution', and 'critical'. See [Astro UXDS Status System](https://astrouxds.com/patterns/status-system/).
         */
        "status": 'standby' | 'normal' | 'caution' | 'critical';
    }
    interface RuxPopUpMenu {
        /**
          * Element to anchor the menu to. If none is given the menu will anchor to the trigger element where aria-controls === menu id
         */
        "anchorEl"?: HTMLElement;
        /**
          * Closes the menu. If the menu is already closed it returns 'false'.
         */
        "close": () => Promise<boolean>;
        /**
          * Returns 'true' if the menu is open, 'false' if it is not.
         */
        "isOpen": () => Promise<boolean>;
        /**
          * Boolean which controls when to show the menu
         */
        "open": boolean;
        /**
          * Opens the menu. If the menu is already open it returns 'false'.
         */
        "show": () => Promise<boolean>;
        /**
          * Toggles the menu open or close. Will return 'true' on menu open and 'false' on menu close
         */
        "toggle": () => Promise<boolean>;
        /**
          * Optional element to trigger opening and closing of the menu. If none is supplied the element where aria-controls === menu id will be assigned
         */
        "triggerEl"?: HTMLElement;
    }
    interface RuxProgress {
        /**
          * Displays text output of progress as a percentage. Note: when using a max value other than 100 output is displated as value/max (e.g., 1450/2000)
         */
        "hideLabel": boolean;
        /**
          * For progress bars where progress bars have a maximum value greater or less than 100
         */
        "max": number;
        /**
          * Current progress value between 0 and 100 (or the max, if defined below).
         */
        "value"?: number;
    }
    interface RuxSegmentedButton {
        /**
          * Items in this Array are the individual button segments.
         */
        "data": SegmentedButton[];
        /**
          * When passed in on load, this selects the first button segment with a matching label. When the selected segment changes, this property updates with the currently selected value, which reflects back to the component attribute. If no button segment label matches this string, then no segment is selected. This value takes priority over setting selected boolean property on the items in the data array.
         */
        "selected": string;
    }
    interface RuxStatus {
        /**
          * Sets the status symbol, valid options are critical, serious, caution, normal, standby and off
         */
        "status"?: Status;
    }
    interface RuxSwitch {
        /**
          * Checks the button via HTML `checked` attribute. Button takes on a distinct "enabled" or "selected" visual state.
         */
        "checked": boolean;
        /**
          * Disables the button via HTML `disabled` attribute. Button takes on a distinct visual state. Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The name of the form input element
         */
        "name"?: string;
    }
    interface RuxTab {
        /**
          * If present, sets a disabled state on this tab item, indicating it cannot be selected by user action.
         */
        "disabled": boolean;
        /**
          * If present, overrides which tab is selected on load / mount. By default, the first <rux-tab> item is selected.
         */
        "selected": boolean;
    }
    interface RuxTabPanel {
    }
    interface RuxTabPanels {
    }
    interface RuxTable {
    }
    interface RuxTableBody {
    }
    interface RuxTableCell {
    }
    interface RuxTableHeader {
    }
    interface RuxTableHeaderCell {
    }
    interface RuxTableHeaderRow {
    }
    interface RuxTableRow {
        /**
          * Changes the background color of the row. Can be applied to multiple rows at once.
         */
        "selected": boolean;
    }
    interface RuxTabs {
        /**
          * If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses.
         */
        "small"?: boolean;
    }
    interface RuxTree {
    }
    interface RuxTreeNode {
        /**
          * Sets the expanded state
         */
        "expanded": boolean;
        /**
          * Sets the selected state
         */
        "selected": boolean;
        /**
          * Sets the expanded state
          * @param value
         */
        "setExpanded": (value: boolean) => Promise<void>;
        /**
          * Sets the selected state
          * @param value
         */
        "setSelected": (value: boolean) => Promise<void>;
    }
}
declare global {
    interface HTMLRuxButtonElement extends Components.RuxButton, HTMLStencilElement {
    }
    var HTMLRuxButtonElement: {
        prototype: HTMLRuxButtonElement;
        new (): HTMLRuxButtonElement;
    };
    interface HTMLRuxButtonGroupElement extends Components.RuxButtonGroup, HTMLStencilElement {
    }
    var HTMLRuxButtonGroupElement: {
        prototype: HTMLRuxButtonGroupElement;
        new (): HTMLRuxButtonGroupElement;
    };
    interface HTMLRuxCheckboxElement extends Components.RuxCheckbox, HTMLStencilElement {
    }
    var HTMLRuxCheckboxElement: {
        prototype: HTMLRuxCheckboxElement;
        new (): HTMLRuxCheckboxElement;
    };
    interface HTMLRuxClassificationMarkingElement extends Components.RuxClassificationMarking, HTMLStencilElement {
    }
    var HTMLRuxClassificationMarkingElement: {
        prototype: HTMLRuxClassificationMarkingElement;
        new (): HTMLRuxClassificationMarkingElement;
    };
    interface HTMLRuxClockElement extends Components.RuxClock, HTMLStencilElement {
    }
    var HTMLRuxClockElement: {
        prototype: HTMLRuxClockElement;
        new (): HTMLRuxClockElement;
    };
    interface HTMLRuxDatetimeElement extends Components.RuxDatetime, HTMLStencilElement {
    }
    var HTMLRuxDatetimeElement: {
        prototype: HTMLRuxDatetimeElement;
        new (): HTMLRuxDatetimeElement;
    };
    interface HTMLRuxGlobalStatusBarElement extends Components.RuxGlobalStatusBar, HTMLStencilElement {
    }
    var HTMLRuxGlobalStatusBarElement: {
        prototype: HTMLRuxGlobalStatusBarElement;
        new (): HTMLRuxGlobalStatusBarElement;
    };
    interface HTMLRuxIconElement extends Components.RuxIcon, HTMLStencilElement {
    }
    var HTMLRuxIconElement: {
        prototype: HTMLRuxIconElement;
        new (): HTMLRuxIconElement;
    };
    interface HTMLRuxIcon360Element extends Components.RuxIcon360, HTMLStencilElement {
    }
    var HTMLRuxIcon360Element: {
        prototype: HTMLRuxIcon360Element;
        new (): HTMLRuxIcon360Element;
    };
    interface HTMLRuxIcon3dRotationElement extends Components.RuxIcon3dRotation, HTMLStencilElement {
    }
    var HTMLRuxIcon3dRotationElement: {
        prototype: HTMLRuxIcon3dRotationElement;
        new (): HTMLRuxIcon3dRotationElement;
    };
    interface HTMLRuxIcon4kElement extends Components.RuxIcon4k, HTMLStencilElement {
    }
    var HTMLRuxIcon4kElement: {
        prototype: HTMLRuxIcon4kElement;
        new (): HTMLRuxIcon4kElement;
    };
    interface HTMLRuxIconAcUnitElement extends Components.RuxIconAcUnit, HTMLStencilElement {
    }
    var HTMLRuxIconAcUnitElement: {
        prototype: HTMLRuxIconAcUnitElement;
        new (): HTMLRuxIconAcUnitElement;
    };
    interface HTMLRuxIconAccessAlarmsElement extends Components.RuxIconAccessAlarms, HTMLStencilElement {
    }
    var HTMLRuxIconAccessAlarmsElement: {
        prototype: HTMLRuxIconAccessAlarmsElement;
        new (): HTMLRuxIconAccessAlarmsElement;
    };
    interface HTMLRuxIconAccessTimeElement extends Components.RuxIconAccessTime, HTMLStencilElement {
    }
    var HTMLRuxIconAccessTimeElement: {
        prototype: HTMLRuxIconAccessTimeElement;
        new (): HTMLRuxIconAccessTimeElement;
    };
    interface HTMLRuxIconAccessibilityElement extends Components.RuxIconAccessibility, HTMLStencilElement {
    }
    var HTMLRuxIconAccessibilityElement: {
        prototype: HTMLRuxIconAccessibilityElement;
        new (): HTMLRuxIconAccessibilityElement;
    };
    interface HTMLRuxIconAccessibilityNewElement extends Components.RuxIconAccessibilityNew, HTMLStencilElement {
    }
    var HTMLRuxIconAccessibilityNewElement: {
        prototype: HTMLRuxIconAccessibilityNewElement;
        new (): HTMLRuxIconAccessibilityNewElement;
    };
    interface HTMLRuxIconAccessibleElement extends Components.RuxIconAccessible, HTMLStencilElement {
    }
    var HTMLRuxIconAccessibleElement: {
        prototype: HTMLRuxIconAccessibleElement;
        new (): HTMLRuxIconAccessibleElement;
    };
    interface HTMLRuxIconAccessibleForwardElement extends Components.RuxIconAccessibleForward, HTMLStencilElement {
    }
    var HTMLRuxIconAccessibleForwardElement: {
        prototype: HTMLRuxIconAccessibleForwardElement;
        new (): HTMLRuxIconAccessibleForwardElement;
    };
    interface HTMLRuxIconAccountBalanceElement extends Components.RuxIconAccountBalance, HTMLStencilElement {
    }
    var HTMLRuxIconAccountBalanceElement: {
        prototype: HTMLRuxIconAccountBalanceElement;
        new (): HTMLRuxIconAccountBalanceElement;
    };
    interface HTMLRuxIconAccountBalanceWalletElement extends Components.RuxIconAccountBalanceWallet, HTMLStencilElement {
    }
    var HTMLRuxIconAccountBalanceWalletElement: {
        prototype: HTMLRuxIconAccountBalanceWalletElement;
        new (): HTMLRuxIconAccountBalanceWalletElement;
    };
    interface HTMLRuxIconAccountBoxElement extends Components.RuxIconAccountBox, HTMLStencilElement {
    }
    var HTMLRuxIconAccountBoxElement: {
        prototype: HTMLRuxIconAccountBoxElement;
        new (): HTMLRuxIconAccountBoxElement;
    };
    interface HTMLRuxIconAccountCircleElement extends Components.RuxIconAccountCircle, HTMLStencilElement {
    }
    var HTMLRuxIconAccountCircleElement: {
        prototype: HTMLRuxIconAccountCircleElement;
        new (): HTMLRuxIconAccountCircleElement;
    };
    interface HTMLRuxIconAdbElement extends Components.RuxIconAdb, HTMLStencilElement {
    }
    var HTMLRuxIconAdbElement: {
        prototype: HTMLRuxIconAdbElement;
        new (): HTMLRuxIconAdbElement;
    };
    interface HTMLRuxIconAddElement extends Components.RuxIconAdd, HTMLStencilElement {
    }
    var HTMLRuxIconAddElement: {
        prototype: HTMLRuxIconAddElement;
        new (): HTMLRuxIconAddElement;
    };
    interface HTMLRuxIconAddAPhotoElement extends Components.RuxIconAddAPhoto, HTMLStencilElement {
    }
    var HTMLRuxIconAddAPhotoElement: {
        prototype: HTMLRuxIconAddAPhotoElement;
        new (): HTMLRuxIconAddAPhotoElement;
    };
    interface HTMLRuxIconAddAlarmElement extends Components.RuxIconAddAlarm, HTMLStencilElement {
    }
    var HTMLRuxIconAddAlarmElement: {
        prototype: HTMLRuxIconAddAlarmElement;
        new (): HTMLRuxIconAddAlarmElement;
    };
    interface HTMLRuxIconAddAlertElement extends Components.RuxIconAddAlert, HTMLStencilElement {
    }
    var HTMLRuxIconAddAlertElement: {
        prototype: HTMLRuxIconAddAlertElement;
        new (): HTMLRuxIconAddAlertElement;
    };
    interface HTMLRuxIconAddBoxElement extends Components.RuxIconAddBox, HTMLStencilElement {
    }
    var HTMLRuxIconAddBoxElement: {
        prototype: HTMLRuxIconAddBoxElement;
        new (): HTMLRuxIconAddBoxElement;
    };
    interface HTMLRuxIconAddCircleElement extends Components.RuxIconAddCircle, HTMLStencilElement {
    }
    var HTMLRuxIconAddCircleElement: {
        prototype: HTMLRuxIconAddCircleElement;
        new (): HTMLRuxIconAddCircleElement;
    };
    interface HTMLRuxIconAddCircleOutlineElement extends Components.RuxIconAddCircleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconAddCircleOutlineElement: {
        prototype: HTMLRuxIconAddCircleOutlineElement;
        new (): HTMLRuxIconAddCircleOutlineElement;
    };
    interface HTMLRuxIconAddCommentElement extends Components.RuxIconAddComment, HTMLStencilElement {
    }
    var HTMLRuxIconAddCommentElement: {
        prototype: HTMLRuxIconAddCommentElement;
        new (): HTMLRuxIconAddCommentElement;
    };
    interface HTMLRuxIconAddLocationElement extends Components.RuxIconAddLocation, HTMLStencilElement {
    }
    var HTMLRuxIconAddLocationElement: {
        prototype: HTMLRuxIconAddLocationElement;
        new (): HTMLRuxIconAddLocationElement;
    };
    interface HTMLRuxIconAddPhotoAlternateElement extends Components.RuxIconAddPhotoAlternate, HTMLStencilElement {
    }
    var HTMLRuxIconAddPhotoAlternateElement: {
        prototype: HTMLRuxIconAddPhotoAlternateElement;
        new (): HTMLRuxIconAddPhotoAlternateElement;
    };
    interface HTMLRuxIconAddShoppingCartElement extends Components.RuxIconAddShoppingCart, HTMLStencilElement {
    }
    var HTMLRuxIconAddShoppingCartElement: {
        prototype: HTMLRuxIconAddShoppingCartElement;
        new (): HTMLRuxIconAddShoppingCartElement;
    };
    interface HTMLRuxIconAddToHomeScreenElement extends Components.RuxIconAddToHomeScreen, HTMLStencilElement {
    }
    var HTMLRuxIconAddToHomeScreenElement: {
        prototype: HTMLRuxIconAddToHomeScreenElement;
        new (): HTMLRuxIconAddToHomeScreenElement;
    };
    interface HTMLRuxIconAddToPhotosElement extends Components.RuxIconAddToPhotos, HTMLStencilElement {
    }
    var HTMLRuxIconAddToPhotosElement: {
        prototype: HTMLRuxIconAddToPhotosElement;
        new (): HTMLRuxIconAddToPhotosElement;
    };
    interface HTMLRuxIconAddToQueueElement extends Components.RuxIconAddToQueue, HTMLStencilElement {
    }
    var HTMLRuxIconAddToQueueElement: {
        prototype: HTMLRuxIconAddToQueueElement;
        new (): HTMLRuxIconAddToQueueElement;
    };
    interface HTMLRuxIconAdjustElement extends Components.RuxIconAdjust, HTMLStencilElement {
    }
    var HTMLRuxIconAdjustElement: {
        prototype: HTMLRuxIconAdjustElement;
        new (): HTMLRuxIconAdjustElement;
    };
    interface HTMLRuxIconAirlineSeatFlatElement extends Components.RuxIconAirlineSeatFlat, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatFlatElement: {
        prototype: HTMLRuxIconAirlineSeatFlatElement;
        new (): HTMLRuxIconAirlineSeatFlatElement;
    };
    interface HTMLRuxIconAirlineSeatFlatAngledElement extends Components.RuxIconAirlineSeatFlatAngled, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatFlatAngledElement: {
        prototype: HTMLRuxIconAirlineSeatFlatAngledElement;
        new (): HTMLRuxIconAirlineSeatFlatAngledElement;
    };
    interface HTMLRuxIconAirlineSeatIndividualSuiteElement extends Components.RuxIconAirlineSeatIndividualSuite, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatIndividualSuiteElement: {
        prototype: HTMLRuxIconAirlineSeatIndividualSuiteElement;
        new (): HTMLRuxIconAirlineSeatIndividualSuiteElement;
    };
    interface HTMLRuxIconAirlineSeatLegroomExtraElement extends Components.RuxIconAirlineSeatLegroomExtra, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatLegroomExtraElement: {
        prototype: HTMLRuxIconAirlineSeatLegroomExtraElement;
        new (): HTMLRuxIconAirlineSeatLegroomExtraElement;
    };
    interface HTMLRuxIconAirlineSeatLegroomNormalElement extends Components.RuxIconAirlineSeatLegroomNormal, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatLegroomNormalElement: {
        prototype: HTMLRuxIconAirlineSeatLegroomNormalElement;
        new (): HTMLRuxIconAirlineSeatLegroomNormalElement;
    };
    interface HTMLRuxIconAirlineSeatLegroomReducedElement extends Components.RuxIconAirlineSeatLegroomReduced, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatLegroomReducedElement: {
        prototype: HTMLRuxIconAirlineSeatLegroomReducedElement;
        new (): HTMLRuxIconAirlineSeatLegroomReducedElement;
    };
    interface HTMLRuxIconAirlineSeatReclineExtraElement extends Components.RuxIconAirlineSeatReclineExtra, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatReclineExtraElement: {
        prototype: HTMLRuxIconAirlineSeatReclineExtraElement;
        new (): HTMLRuxIconAirlineSeatReclineExtraElement;
    };
    interface HTMLRuxIconAirlineSeatReclineNormalElement extends Components.RuxIconAirlineSeatReclineNormal, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatReclineNormalElement: {
        prototype: HTMLRuxIconAirlineSeatReclineNormalElement;
        new (): HTMLRuxIconAirlineSeatReclineNormalElement;
    };
    interface HTMLRuxIconAirplanemodeActiveElement extends Components.RuxIconAirplanemodeActive, HTMLStencilElement {
    }
    var HTMLRuxIconAirplanemodeActiveElement: {
        prototype: HTMLRuxIconAirplanemodeActiveElement;
        new (): HTMLRuxIconAirplanemodeActiveElement;
    };
    interface HTMLRuxIconAirplanemodeInactiveElement extends Components.RuxIconAirplanemodeInactive, HTMLStencilElement {
    }
    var HTMLRuxIconAirplanemodeInactiveElement: {
        prototype: HTMLRuxIconAirplanemodeInactiveElement;
        new (): HTMLRuxIconAirplanemodeInactiveElement;
    };
    interface HTMLRuxIconAirplayElement extends Components.RuxIconAirplay, HTMLStencilElement {
    }
    var HTMLRuxIconAirplayElement: {
        prototype: HTMLRuxIconAirplayElement;
        new (): HTMLRuxIconAirplayElement;
    };
    interface HTMLRuxIconAirportShuttleElement extends Components.RuxIconAirportShuttle, HTMLStencilElement {
    }
    var HTMLRuxIconAirportShuttleElement: {
        prototype: HTMLRuxIconAirportShuttleElement;
        new (): HTMLRuxIconAirportShuttleElement;
    };
    interface HTMLRuxIconAlarmElement extends Components.RuxIconAlarm, HTMLStencilElement {
    }
    var HTMLRuxIconAlarmElement: {
        prototype: HTMLRuxIconAlarmElement;
        new (): HTMLRuxIconAlarmElement;
    };
    interface HTMLRuxIconAlarmAddElement extends Components.RuxIconAlarmAdd, HTMLStencilElement {
    }
    var HTMLRuxIconAlarmAddElement: {
        prototype: HTMLRuxIconAlarmAddElement;
        new (): HTMLRuxIconAlarmAddElement;
    };
    interface HTMLRuxIconAlarmOffElement extends Components.RuxIconAlarmOff, HTMLStencilElement {
    }
    var HTMLRuxIconAlarmOffElement: {
        prototype: HTMLRuxIconAlarmOffElement;
        new (): HTMLRuxIconAlarmOffElement;
    };
    interface HTMLRuxIconAlarmOnElement extends Components.RuxIconAlarmOn, HTMLStencilElement {
    }
    var HTMLRuxIconAlarmOnElement: {
        prototype: HTMLRuxIconAlarmOnElement;
        new (): HTMLRuxIconAlarmOnElement;
    };
    interface HTMLRuxIconAlbumElement extends Components.RuxIconAlbum, HTMLStencilElement {
    }
    var HTMLRuxIconAlbumElement: {
        prototype: HTMLRuxIconAlbumElement;
        new (): HTMLRuxIconAlbumElement;
    };
    interface HTMLRuxIconAllInboxElement extends Components.RuxIconAllInbox, HTMLStencilElement {
    }
    var HTMLRuxIconAllInboxElement: {
        prototype: HTMLRuxIconAllInboxElement;
        new (): HTMLRuxIconAllInboxElement;
    };
    interface HTMLRuxIconAllInclusiveElement extends Components.RuxIconAllInclusive, HTMLStencilElement {
    }
    var HTMLRuxIconAllInclusiveElement: {
        prototype: HTMLRuxIconAllInclusiveElement;
        new (): HTMLRuxIconAllInclusiveElement;
    };
    interface HTMLRuxIconAllOutElement extends Components.RuxIconAllOut, HTMLStencilElement {
    }
    var HTMLRuxIconAllOutElement: {
        prototype: HTMLRuxIconAllOutElement;
        new (): HTMLRuxIconAllOutElement;
    };
    interface HTMLRuxIconAlternateEmailElement extends Components.RuxIconAlternateEmail, HTMLStencilElement {
    }
    var HTMLRuxIconAlternateEmailElement: {
        prototype: HTMLRuxIconAlternateEmailElement;
        new (): HTMLRuxIconAlternateEmailElement;
    };
    interface HTMLRuxIconAltitudeElement extends Components.RuxIconAltitude, HTMLStencilElement {
    }
    var HTMLRuxIconAltitudeElement: {
        prototype: HTMLRuxIconAltitudeElement;
        new (): HTMLRuxIconAltitudeElement;
    };
    interface HTMLRuxIconAndroidElement extends Components.RuxIconAndroid, HTMLStencilElement {
    }
    var HTMLRuxIconAndroidElement: {
        prototype: HTMLRuxIconAndroidElement;
        new (): HTMLRuxIconAndroidElement;
    };
    interface HTMLRuxIconAnnouncementElement extends Components.RuxIconAnnouncement, HTMLStencilElement {
    }
    var HTMLRuxIconAnnouncementElement: {
        prototype: HTMLRuxIconAnnouncementElement;
        new (): HTMLRuxIconAnnouncementElement;
    };
    interface HTMLRuxIconAntennaElement extends Components.RuxIconAntenna, HTMLStencilElement {
    }
    var HTMLRuxIconAntennaElement: {
        prototype: HTMLRuxIconAntennaElement;
        new (): HTMLRuxIconAntennaElement;
    };
    interface HTMLRuxIconAntennaOffElement extends Components.RuxIconAntennaOff, HTMLStencilElement {
    }
    var HTMLRuxIconAntennaOffElement: {
        prototype: HTMLRuxIconAntennaOffElement;
        new (): HTMLRuxIconAntennaOffElement;
    };
    interface HTMLRuxIconAntennaReceiveElement extends Components.RuxIconAntennaReceive, HTMLStencilElement {
    }
    var HTMLRuxIconAntennaReceiveElement: {
        prototype: HTMLRuxIconAntennaReceiveElement;
        new (): HTMLRuxIconAntennaReceiveElement;
    };
    interface HTMLRuxIconAntennaTransmitElement extends Components.RuxIconAntennaTransmit, HTMLStencilElement {
    }
    var HTMLRuxIconAntennaTransmitElement: {
        prototype: HTMLRuxIconAntennaTransmitElement;
        new (): HTMLRuxIconAntennaTransmitElement;
    };
    interface HTMLRuxIconAppsElement extends Components.RuxIconApps, HTMLStencilElement {
    }
    var HTMLRuxIconAppsElement: {
        prototype: HTMLRuxIconAppsElement;
        new (): HTMLRuxIconAppsElement;
    };
    interface HTMLRuxIconArchiveElement extends Components.RuxIconArchive, HTMLStencilElement {
    }
    var HTMLRuxIconArchiveElement: {
        prototype: HTMLRuxIconArchiveElement;
        new (): HTMLRuxIconArchiveElement;
    };
    interface HTMLRuxIconArrowBackElement extends Components.RuxIconArrowBack, HTMLStencilElement {
    }
    var HTMLRuxIconArrowBackElement: {
        prototype: HTMLRuxIconArrowBackElement;
        new (): HTMLRuxIconArrowBackElement;
    };
    interface HTMLRuxIconArrowBackIosElement extends Components.RuxIconArrowBackIos, HTMLStencilElement {
    }
    var HTMLRuxIconArrowBackIosElement: {
        prototype: HTMLRuxIconArrowBackIosElement;
        new (): HTMLRuxIconArrowBackIosElement;
    };
    interface HTMLRuxIconArrowDownwardElement extends Components.RuxIconArrowDownward, HTMLStencilElement {
    }
    var HTMLRuxIconArrowDownwardElement: {
        prototype: HTMLRuxIconArrowDownwardElement;
        new (): HTMLRuxIconArrowDownwardElement;
    };
    interface HTMLRuxIconArrowDropDownElement extends Components.RuxIconArrowDropDown, HTMLStencilElement {
    }
    var HTMLRuxIconArrowDropDownElement: {
        prototype: HTMLRuxIconArrowDropDownElement;
        new (): HTMLRuxIconArrowDropDownElement;
    };
    interface HTMLRuxIconArrowDropDownCircleElement extends Components.RuxIconArrowDropDownCircle, HTMLStencilElement {
    }
    var HTMLRuxIconArrowDropDownCircleElement: {
        prototype: HTMLRuxIconArrowDropDownCircleElement;
        new (): HTMLRuxIconArrowDropDownCircleElement;
    };
    interface HTMLRuxIconArrowDropUpElement extends Components.RuxIconArrowDropUp, HTMLStencilElement {
    }
    var HTMLRuxIconArrowDropUpElement: {
        prototype: HTMLRuxIconArrowDropUpElement;
        new (): HTMLRuxIconArrowDropUpElement;
    };
    interface HTMLRuxIconArrowForwardElement extends Components.RuxIconArrowForward, HTMLStencilElement {
    }
    var HTMLRuxIconArrowForwardElement: {
        prototype: HTMLRuxIconArrowForwardElement;
        new (): HTMLRuxIconArrowForwardElement;
    };
    interface HTMLRuxIconArrowForwardIosElement extends Components.RuxIconArrowForwardIos, HTMLStencilElement {
    }
    var HTMLRuxIconArrowForwardIosElement: {
        prototype: HTMLRuxIconArrowForwardIosElement;
        new (): HTMLRuxIconArrowForwardIosElement;
    };
    interface HTMLRuxIconArrowLeftElement extends Components.RuxIconArrowLeft, HTMLStencilElement {
    }
    var HTMLRuxIconArrowLeftElement: {
        prototype: HTMLRuxIconArrowLeftElement;
        new (): HTMLRuxIconArrowLeftElement;
    };
    interface HTMLRuxIconArrowRightElement extends Components.RuxIconArrowRight, HTMLStencilElement {
    }
    var HTMLRuxIconArrowRightElement: {
        prototype: HTMLRuxIconArrowRightElement;
        new (): HTMLRuxIconArrowRightElement;
    };
    interface HTMLRuxIconArrowRightAltElement extends Components.RuxIconArrowRightAlt, HTMLStencilElement {
    }
    var HTMLRuxIconArrowRightAltElement: {
        prototype: HTMLRuxIconArrowRightAltElement;
        new (): HTMLRuxIconArrowRightAltElement;
    };
    interface HTMLRuxIconArrowUpwardElement extends Components.RuxIconArrowUpward, HTMLStencilElement {
    }
    var HTMLRuxIconArrowUpwardElement: {
        prototype: HTMLRuxIconArrowUpwardElement;
        new (): HTMLRuxIconArrowUpwardElement;
    };
    interface HTMLRuxIconArtTrackElement extends Components.RuxIconArtTrack, HTMLStencilElement {
    }
    var HTMLRuxIconArtTrackElement: {
        prototype: HTMLRuxIconArtTrackElement;
        new (): HTMLRuxIconArtTrackElement;
    };
    interface HTMLRuxIconAspectRatioElement extends Components.RuxIconAspectRatio, HTMLStencilElement {
    }
    var HTMLRuxIconAspectRatioElement: {
        prototype: HTMLRuxIconAspectRatioElement;
        new (): HTMLRuxIconAspectRatioElement;
    };
    interface HTMLRuxIconAssessmentElement extends Components.RuxIconAssessment, HTMLStencilElement {
    }
    var HTMLRuxIconAssessmentElement: {
        prototype: HTMLRuxIconAssessmentElement;
        new (): HTMLRuxIconAssessmentElement;
    };
    interface HTMLRuxIconAssignmentElement extends Components.RuxIconAssignment, HTMLStencilElement {
    }
    var HTMLRuxIconAssignmentElement: {
        prototype: HTMLRuxIconAssignmentElement;
        new (): HTMLRuxIconAssignmentElement;
    };
    interface HTMLRuxIconAssignmentFindElement extends Components.RuxIconAssignmentFind, HTMLStencilElement {
    }
    var HTMLRuxIconAssignmentFindElement: {
        prototype: HTMLRuxIconAssignmentFindElement;
        new (): HTMLRuxIconAssignmentFindElement;
    };
    interface HTMLRuxIconAssignmentLateElement extends Components.RuxIconAssignmentLate, HTMLStencilElement {
    }
    var HTMLRuxIconAssignmentLateElement: {
        prototype: HTMLRuxIconAssignmentLateElement;
        new (): HTMLRuxIconAssignmentLateElement;
    };
    interface HTMLRuxIconAssignmentReturnElement extends Components.RuxIconAssignmentReturn, HTMLStencilElement {
    }
    var HTMLRuxIconAssignmentReturnElement: {
        prototype: HTMLRuxIconAssignmentReturnElement;
        new (): HTMLRuxIconAssignmentReturnElement;
    };
    interface HTMLRuxIconAssignmentReturnedElement extends Components.RuxIconAssignmentReturned, HTMLStencilElement {
    }
    var HTMLRuxIconAssignmentReturnedElement: {
        prototype: HTMLRuxIconAssignmentReturnedElement;
        new (): HTMLRuxIconAssignmentReturnedElement;
    };
    interface HTMLRuxIconAssignmentTurnedInElement extends Components.RuxIconAssignmentTurnedIn, HTMLStencilElement {
    }
    var HTMLRuxIconAssignmentTurnedInElement: {
        prototype: HTMLRuxIconAssignmentTurnedInElement;
        new (): HTMLRuxIconAssignmentTurnedInElement;
    };
    interface HTMLRuxIconAssistantElement extends Components.RuxIconAssistant, HTMLStencilElement {
    }
    var HTMLRuxIconAssistantElement: {
        prototype: HTMLRuxIconAssistantElement;
        new (): HTMLRuxIconAssistantElement;
    };
    interface HTMLRuxIconAssistantPhotoElement extends Components.RuxIconAssistantPhoto, HTMLStencilElement {
    }
    var HTMLRuxIconAssistantPhotoElement: {
        prototype: HTMLRuxIconAssistantPhotoElement;
        new (): HTMLRuxIconAssistantPhotoElement;
    };
    interface HTMLRuxIconAttachFileElement extends Components.RuxIconAttachFile, HTMLStencilElement {
    }
    var HTMLRuxIconAttachFileElement: {
        prototype: HTMLRuxIconAttachFileElement;
        new (): HTMLRuxIconAttachFileElement;
    };
    interface HTMLRuxIconAttachMoneyElement extends Components.RuxIconAttachMoney, HTMLStencilElement {
    }
    var HTMLRuxIconAttachMoneyElement: {
        prototype: HTMLRuxIconAttachMoneyElement;
        new (): HTMLRuxIconAttachMoneyElement;
    };
    interface HTMLRuxIconAttachmentElement extends Components.RuxIconAttachment, HTMLStencilElement {
    }
    var HTMLRuxIconAttachmentElement: {
        prototype: HTMLRuxIconAttachmentElement;
        new (): HTMLRuxIconAttachmentElement;
    };
    interface HTMLRuxIconAudiotrackElement extends Components.RuxIconAudiotrack, HTMLStencilElement {
    }
    var HTMLRuxIconAudiotrackElement: {
        prototype: HTMLRuxIconAudiotrackElement;
        new (): HTMLRuxIconAudiotrackElement;
    };
    interface HTMLRuxIconAutorenewElement extends Components.RuxIconAutorenew, HTMLStencilElement {
    }
    var HTMLRuxIconAutorenewElement: {
        prototype: HTMLRuxIconAutorenewElement;
        new (): HTMLRuxIconAutorenewElement;
    };
    interface HTMLRuxIconAvTimerElement extends Components.RuxIconAvTimer, HTMLStencilElement {
    }
    var HTMLRuxIconAvTimerElement: {
        prototype: HTMLRuxIconAvTimerElement;
        new (): HTMLRuxIconAvTimerElement;
    };
    interface HTMLRuxIconBackspaceElement extends Components.RuxIconBackspace, HTMLStencilElement {
    }
    var HTMLRuxIconBackspaceElement: {
        prototype: HTMLRuxIconBackspaceElement;
        new (): HTMLRuxIconBackspaceElement;
    };
    interface HTMLRuxIconBackupElement extends Components.RuxIconBackup, HTMLStencilElement {
    }
    var HTMLRuxIconBackupElement: {
        prototype: HTMLRuxIconBackupElement;
        new (): HTMLRuxIconBackupElement;
    };
    interface HTMLRuxIconBallotElement extends Components.RuxIconBallot, HTMLStencilElement {
    }
    var HTMLRuxIconBallotElement: {
        prototype: HTMLRuxIconBallotElement;
        new (): HTMLRuxIconBallotElement;
    };
    interface HTMLRuxIconBarChartElement extends Components.RuxIconBarChart, HTMLStencilElement {
    }
    var HTMLRuxIconBarChartElement: {
        prototype: HTMLRuxIconBarChartElement;
        new (): HTMLRuxIconBarChartElement;
    };
    interface HTMLRuxIconBattery20Element extends Components.RuxIconBattery20, HTMLStencilElement {
    }
    var HTMLRuxIconBattery20Element: {
        prototype: HTMLRuxIconBattery20Element;
        new (): HTMLRuxIconBattery20Element;
    };
    interface HTMLRuxIconBattery30Element extends Components.RuxIconBattery30, HTMLStencilElement {
    }
    var HTMLRuxIconBattery30Element: {
        prototype: HTMLRuxIconBattery30Element;
        new (): HTMLRuxIconBattery30Element;
    };
    interface HTMLRuxIconBattery50Element extends Components.RuxIconBattery50, HTMLStencilElement {
    }
    var HTMLRuxIconBattery50Element: {
        prototype: HTMLRuxIconBattery50Element;
        new (): HTMLRuxIconBattery50Element;
    };
    interface HTMLRuxIconBattery60Element extends Components.RuxIconBattery60, HTMLStencilElement {
    }
    var HTMLRuxIconBattery60Element: {
        prototype: HTMLRuxIconBattery60Element;
        new (): HTMLRuxIconBattery60Element;
    };
    interface HTMLRuxIconBattery80Element extends Components.RuxIconBattery80, HTMLStencilElement {
    }
    var HTMLRuxIconBattery80Element: {
        prototype: HTMLRuxIconBattery80Element;
        new (): HTMLRuxIconBattery80Element;
    };
    interface HTMLRuxIconBattery90Element extends Components.RuxIconBattery90, HTMLStencilElement {
    }
    var HTMLRuxIconBattery90Element: {
        prototype: HTMLRuxIconBattery90Element;
        new (): HTMLRuxIconBattery90Element;
    };
    interface HTMLRuxIconBatteryAlertElement extends Components.RuxIconBatteryAlert, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryAlertElement: {
        prototype: HTMLRuxIconBatteryAlertElement;
        new (): HTMLRuxIconBatteryAlertElement;
    };
    interface HTMLRuxIconBatteryCharging20Element extends Components.RuxIconBatteryCharging20, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryCharging20Element: {
        prototype: HTMLRuxIconBatteryCharging20Element;
        new (): HTMLRuxIconBatteryCharging20Element;
    };
    interface HTMLRuxIconBatteryCharging30Element extends Components.RuxIconBatteryCharging30, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryCharging30Element: {
        prototype: HTMLRuxIconBatteryCharging30Element;
        new (): HTMLRuxIconBatteryCharging30Element;
    };
    interface HTMLRuxIconBatteryCharging50Element extends Components.RuxIconBatteryCharging50, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryCharging50Element: {
        prototype: HTMLRuxIconBatteryCharging50Element;
        new (): HTMLRuxIconBatteryCharging50Element;
    };
    interface HTMLRuxIconBatteryCharging60Element extends Components.RuxIconBatteryCharging60, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryCharging60Element: {
        prototype: HTMLRuxIconBatteryCharging60Element;
        new (): HTMLRuxIconBatteryCharging60Element;
    };
    interface HTMLRuxIconBatteryCharging80Element extends Components.RuxIconBatteryCharging80, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryCharging80Element: {
        prototype: HTMLRuxIconBatteryCharging80Element;
        new (): HTMLRuxIconBatteryCharging80Element;
    };
    interface HTMLRuxIconBatteryCharging90Element extends Components.RuxIconBatteryCharging90, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryCharging90Element: {
        prototype: HTMLRuxIconBatteryCharging90Element;
        new (): HTMLRuxIconBatteryCharging90Element;
    };
    interface HTMLRuxIconBatteryChargingFullElement extends Components.RuxIconBatteryChargingFull, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryChargingFullElement: {
        prototype: HTMLRuxIconBatteryChargingFullElement;
        new (): HTMLRuxIconBatteryChargingFullElement;
    };
    interface HTMLRuxIconBatteryFullElement extends Components.RuxIconBatteryFull, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryFullElement: {
        prototype: HTMLRuxIconBatteryFullElement;
        new (): HTMLRuxIconBatteryFullElement;
    };
    interface HTMLRuxIconBatteryStdElement extends Components.RuxIconBatteryStd, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryStdElement: {
        prototype: HTMLRuxIconBatteryStdElement;
        new (): HTMLRuxIconBatteryStdElement;
    };
    interface HTMLRuxIconBatteryUnknownElement extends Components.RuxIconBatteryUnknown, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryUnknownElement: {
        prototype: HTMLRuxIconBatteryUnknownElement;
        new (): HTMLRuxIconBatteryUnknownElement;
    };
    interface HTMLRuxIconBeachAccessElement extends Components.RuxIconBeachAccess, HTMLStencilElement {
    }
    var HTMLRuxIconBeachAccessElement: {
        prototype: HTMLRuxIconBeachAccessElement;
        new (): HTMLRuxIconBeachAccessElement;
    };
    interface HTMLRuxIconBeenhereElement extends Components.RuxIconBeenhere, HTMLStencilElement {
    }
    var HTMLRuxIconBeenhereElement: {
        prototype: HTMLRuxIconBeenhereElement;
        new (): HTMLRuxIconBeenhereElement;
    };
    interface HTMLRuxIconBlockElement extends Components.RuxIconBlock, HTMLStencilElement {
    }
    var HTMLRuxIconBlockElement: {
        prototype: HTMLRuxIconBlockElement;
        new (): HTMLRuxIconBlockElement;
    };
    interface HTMLRuxIconBluetoothElement extends Components.RuxIconBluetooth, HTMLStencilElement {
    }
    var HTMLRuxIconBluetoothElement: {
        prototype: HTMLRuxIconBluetoothElement;
        new (): HTMLRuxIconBluetoothElement;
    };
    interface HTMLRuxIconBluetoothAudioElement extends Components.RuxIconBluetoothAudio, HTMLStencilElement {
    }
    var HTMLRuxIconBluetoothAudioElement: {
        prototype: HTMLRuxIconBluetoothAudioElement;
        new (): HTMLRuxIconBluetoothAudioElement;
    };
    interface HTMLRuxIconBluetoothConnectedElement extends Components.RuxIconBluetoothConnected, HTMLStencilElement {
    }
    var HTMLRuxIconBluetoothConnectedElement: {
        prototype: HTMLRuxIconBluetoothConnectedElement;
        new (): HTMLRuxIconBluetoothConnectedElement;
    };
    interface HTMLRuxIconBluetoothDisabledElement extends Components.RuxIconBluetoothDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconBluetoothDisabledElement: {
        prototype: HTMLRuxIconBluetoothDisabledElement;
        new (): HTMLRuxIconBluetoothDisabledElement;
    };
    interface HTMLRuxIconBluetoothSearchingElement extends Components.RuxIconBluetoothSearching, HTMLStencilElement {
    }
    var HTMLRuxIconBluetoothSearchingElement: {
        prototype: HTMLRuxIconBluetoothSearchingElement;
        new (): HTMLRuxIconBluetoothSearchingElement;
    };
    interface HTMLRuxIconBlurCircularElement extends Components.RuxIconBlurCircular, HTMLStencilElement {
    }
    var HTMLRuxIconBlurCircularElement: {
        prototype: HTMLRuxIconBlurCircularElement;
        new (): HTMLRuxIconBlurCircularElement;
    };
    interface HTMLRuxIconBlurLinearElement extends Components.RuxIconBlurLinear, HTMLStencilElement {
    }
    var HTMLRuxIconBlurLinearElement: {
        prototype: HTMLRuxIconBlurLinearElement;
        new (): HTMLRuxIconBlurLinearElement;
    };
    interface HTMLRuxIconBlurOffElement extends Components.RuxIconBlurOff, HTMLStencilElement {
    }
    var HTMLRuxIconBlurOffElement: {
        prototype: HTMLRuxIconBlurOffElement;
        new (): HTMLRuxIconBlurOffElement;
    };
    interface HTMLRuxIconBlurOnElement extends Components.RuxIconBlurOn, HTMLStencilElement {
    }
    var HTMLRuxIconBlurOnElement: {
        prototype: HTMLRuxIconBlurOnElement;
        new (): HTMLRuxIconBlurOnElement;
    };
    interface HTMLRuxIconBookElement extends Components.RuxIconBook, HTMLStencilElement {
    }
    var HTMLRuxIconBookElement: {
        prototype: HTMLRuxIconBookElement;
        new (): HTMLRuxIconBookElement;
    };
    interface HTMLRuxIconBookmarkElement extends Components.RuxIconBookmark, HTMLStencilElement {
    }
    var HTMLRuxIconBookmarkElement: {
        prototype: HTMLRuxIconBookmarkElement;
        new (): HTMLRuxIconBookmarkElement;
    };
    interface HTMLRuxIconBookmarkBorderElement extends Components.RuxIconBookmarkBorder, HTMLStencilElement {
    }
    var HTMLRuxIconBookmarkBorderElement: {
        prototype: HTMLRuxIconBookmarkBorderElement;
        new (): HTMLRuxIconBookmarkBorderElement;
    };
    interface HTMLRuxIconBookmarksElement extends Components.RuxIconBookmarks, HTMLStencilElement {
    }
    var HTMLRuxIconBookmarksElement: {
        prototype: HTMLRuxIconBookmarksElement;
        new (): HTMLRuxIconBookmarksElement;
    };
    interface HTMLRuxIconBorderAllElement extends Components.RuxIconBorderAll, HTMLStencilElement {
    }
    var HTMLRuxIconBorderAllElement: {
        prototype: HTMLRuxIconBorderAllElement;
        new (): HTMLRuxIconBorderAllElement;
    };
    interface HTMLRuxIconBorderBottomElement extends Components.RuxIconBorderBottom, HTMLStencilElement {
    }
    var HTMLRuxIconBorderBottomElement: {
        prototype: HTMLRuxIconBorderBottomElement;
        new (): HTMLRuxIconBorderBottomElement;
    };
    interface HTMLRuxIconBorderClearElement extends Components.RuxIconBorderClear, HTMLStencilElement {
    }
    var HTMLRuxIconBorderClearElement: {
        prototype: HTMLRuxIconBorderClearElement;
        new (): HTMLRuxIconBorderClearElement;
    };
    interface HTMLRuxIconBorderColorElement extends Components.RuxIconBorderColor, HTMLStencilElement {
    }
    var HTMLRuxIconBorderColorElement: {
        prototype: HTMLRuxIconBorderColorElement;
        new (): HTMLRuxIconBorderColorElement;
    };
    interface HTMLRuxIconBorderHorizontalElement extends Components.RuxIconBorderHorizontal, HTMLStencilElement {
    }
    var HTMLRuxIconBorderHorizontalElement: {
        prototype: HTMLRuxIconBorderHorizontalElement;
        new (): HTMLRuxIconBorderHorizontalElement;
    };
    interface HTMLRuxIconBorderInnerElement extends Components.RuxIconBorderInner, HTMLStencilElement {
    }
    var HTMLRuxIconBorderInnerElement: {
        prototype: HTMLRuxIconBorderInnerElement;
        new (): HTMLRuxIconBorderInnerElement;
    };
    interface HTMLRuxIconBorderLeftElement extends Components.RuxIconBorderLeft, HTMLStencilElement {
    }
    var HTMLRuxIconBorderLeftElement: {
        prototype: HTMLRuxIconBorderLeftElement;
        new (): HTMLRuxIconBorderLeftElement;
    };
    interface HTMLRuxIconBorderOuterElement extends Components.RuxIconBorderOuter, HTMLStencilElement {
    }
    var HTMLRuxIconBorderOuterElement: {
        prototype: HTMLRuxIconBorderOuterElement;
        new (): HTMLRuxIconBorderOuterElement;
    };
    interface HTMLRuxIconBorderRightElement extends Components.RuxIconBorderRight, HTMLStencilElement {
    }
    var HTMLRuxIconBorderRightElement: {
        prototype: HTMLRuxIconBorderRightElement;
        new (): HTMLRuxIconBorderRightElement;
    };
    interface HTMLRuxIconBorderStyleElement extends Components.RuxIconBorderStyle, HTMLStencilElement {
    }
    var HTMLRuxIconBorderStyleElement: {
        prototype: HTMLRuxIconBorderStyleElement;
        new (): HTMLRuxIconBorderStyleElement;
    };
    interface HTMLRuxIconBorderTopElement extends Components.RuxIconBorderTop, HTMLStencilElement {
    }
    var HTMLRuxIconBorderTopElement: {
        prototype: HTMLRuxIconBorderTopElement;
        new (): HTMLRuxIconBorderTopElement;
    };
    interface HTMLRuxIconBorderVerticalElement extends Components.RuxIconBorderVertical, HTMLStencilElement {
    }
    var HTMLRuxIconBorderVerticalElement: {
        prototype: HTMLRuxIconBorderVerticalElement;
        new (): HTMLRuxIconBorderVerticalElement;
    };
    interface HTMLRuxIconBrandingWatermarkElement extends Components.RuxIconBrandingWatermark, HTMLStencilElement {
    }
    var HTMLRuxIconBrandingWatermarkElement: {
        prototype: HTMLRuxIconBrandingWatermarkElement;
        new (): HTMLRuxIconBrandingWatermarkElement;
    };
    interface HTMLRuxIconBrightness1Element extends Components.RuxIconBrightness1, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness1Element: {
        prototype: HTMLRuxIconBrightness1Element;
        new (): HTMLRuxIconBrightness1Element;
    };
    interface HTMLRuxIconBrightness2Element extends Components.RuxIconBrightness2, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness2Element: {
        prototype: HTMLRuxIconBrightness2Element;
        new (): HTMLRuxIconBrightness2Element;
    };
    interface HTMLRuxIconBrightness3Element extends Components.RuxIconBrightness3, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness3Element: {
        prototype: HTMLRuxIconBrightness3Element;
        new (): HTMLRuxIconBrightness3Element;
    };
    interface HTMLRuxIconBrightness4Element extends Components.RuxIconBrightness4, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness4Element: {
        prototype: HTMLRuxIconBrightness4Element;
        new (): HTMLRuxIconBrightness4Element;
    };
    interface HTMLRuxIconBrightness5Element extends Components.RuxIconBrightness5, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness5Element: {
        prototype: HTMLRuxIconBrightness5Element;
        new (): HTMLRuxIconBrightness5Element;
    };
    interface HTMLRuxIconBrightness6Element extends Components.RuxIconBrightness6, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness6Element: {
        prototype: HTMLRuxIconBrightness6Element;
        new (): HTMLRuxIconBrightness6Element;
    };
    interface HTMLRuxIconBrightness7Element extends Components.RuxIconBrightness7, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness7Element: {
        prototype: HTMLRuxIconBrightness7Element;
        new (): HTMLRuxIconBrightness7Element;
    };
    interface HTMLRuxIconBrightnessAutoElement extends Components.RuxIconBrightnessAuto, HTMLStencilElement {
    }
    var HTMLRuxIconBrightnessAutoElement: {
        prototype: HTMLRuxIconBrightnessAutoElement;
        new (): HTMLRuxIconBrightnessAutoElement;
    };
    interface HTMLRuxIconBrightnessHighElement extends Components.RuxIconBrightnessHigh, HTMLStencilElement {
    }
    var HTMLRuxIconBrightnessHighElement: {
        prototype: HTMLRuxIconBrightnessHighElement;
        new (): HTMLRuxIconBrightnessHighElement;
    };
    interface HTMLRuxIconBrightnessLowElement extends Components.RuxIconBrightnessLow, HTMLStencilElement {
    }
    var HTMLRuxIconBrightnessLowElement: {
        prototype: HTMLRuxIconBrightnessLowElement;
        new (): HTMLRuxIconBrightnessLowElement;
    };
    interface HTMLRuxIconBrightnessMediumElement extends Components.RuxIconBrightnessMedium, HTMLStencilElement {
    }
    var HTMLRuxIconBrightnessMediumElement: {
        prototype: HTMLRuxIconBrightnessMediumElement;
        new (): HTMLRuxIconBrightnessMediumElement;
    };
    interface HTMLRuxIconBrokenImageElement extends Components.RuxIconBrokenImage, HTMLStencilElement {
    }
    var HTMLRuxIconBrokenImageElement: {
        prototype: HTMLRuxIconBrokenImageElement;
        new (): HTMLRuxIconBrokenImageElement;
    };
    interface HTMLRuxIconBrushElement extends Components.RuxIconBrush, HTMLStencilElement {
    }
    var HTMLRuxIconBrushElement: {
        prototype: HTMLRuxIconBrushElement;
        new (): HTMLRuxIconBrushElement;
    };
    interface HTMLRuxIconBubbleChartElement extends Components.RuxIconBubbleChart, HTMLStencilElement {
    }
    var HTMLRuxIconBubbleChartElement: {
        prototype: HTMLRuxIconBubbleChartElement;
        new (): HTMLRuxIconBubbleChartElement;
    };
    interface HTMLRuxIconBugReportElement extends Components.RuxIconBugReport, HTMLStencilElement {
    }
    var HTMLRuxIconBugReportElement: {
        prototype: HTMLRuxIconBugReportElement;
        new (): HTMLRuxIconBugReportElement;
    };
    interface HTMLRuxIconBuildElement extends Components.RuxIconBuild, HTMLStencilElement {
    }
    var HTMLRuxIconBuildElement: {
        prototype: HTMLRuxIconBuildElement;
        new (): HTMLRuxIconBuildElement;
    };
    interface HTMLRuxIconBurstModeElement extends Components.RuxIconBurstMode, HTMLStencilElement {
    }
    var HTMLRuxIconBurstModeElement: {
        prototype: HTMLRuxIconBurstModeElement;
        new (): HTMLRuxIconBurstModeElement;
    };
    interface HTMLRuxIconBusinessElement extends Components.RuxIconBusiness, HTMLStencilElement {
    }
    var HTMLRuxIconBusinessElement: {
        prototype: HTMLRuxIconBusinessElement;
        new (): HTMLRuxIconBusinessElement;
    };
    interface HTMLRuxIconBusinessCenterElement extends Components.RuxIconBusinessCenter, HTMLStencilElement {
    }
    var HTMLRuxIconBusinessCenterElement: {
        prototype: HTMLRuxIconBusinessCenterElement;
        new (): HTMLRuxIconBusinessCenterElement;
    };
    interface HTMLRuxIconCachedElement extends Components.RuxIconCached, HTMLStencilElement {
    }
    var HTMLRuxIconCachedElement: {
        prototype: HTMLRuxIconCachedElement;
        new (): HTMLRuxIconCachedElement;
    };
    interface HTMLRuxIconCakeElement extends Components.RuxIconCake, HTMLStencilElement {
    }
    var HTMLRuxIconCakeElement: {
        prototype: HTMLRuxIconCakeElement;
        new (): HTMLRuxIconCakeElement;
    };
    interface HTMLRuxIconCalendarTodayElement extends Components.RuxIconCalendarToday, HTMLStencilElement {
    }
    var HTMLRuxIconCalendarTodayElement: {
        prototype: HTMLRuxIconCalendarTodayElement;
        new (): HTMLRuxIconCalendarTodayElement;
    };
    interface HTMLRuxIconCalendarViewDayElement extends Components.RuxIconCalendarViewDay, HTMLStencilElement {
    }
    var HTMLRuxIconCalendarViewDayElement: {
        prototype: HTMLRuxIconCalendarViewDayElement;
        new (): HTMLRuxIconCalendarViewDayElement;
    };
    interface HTMLRuxIconCallElement extends Components.RuxIconCall, HTMLStencilElement {
    }
    var HTMLRuxIconCallElement: {
        prototype: HTMLRuxIconCallElement;
        new (): HTMLRuxIconCallElement;
    };
    interface HTMLRuxIconCallEndElement extends Components.RuxIconCallEnd, HTMLStencilElement {
    }
    var HTMLRuxIconCallEndElement: {
        prototype: HTMLRuxIconCallEndElement;
        new (): HTMLRuxIconCallEndElement;
    };
    interface HTMLRuxIconCallMadeElement extends Components.RuxIconCallMade, HTMLStencilElement {
    }
    var HTMLRuxIconCallMadeElement: {
        prototype: HTMLRuxIconCallMadeElement;
        new (): HTMLRuxIconCallMadeElement;
    };
    interface HTMLRuxIconCallMergeElement extends Components.RuxIconCallMerge, HTMLStencilElement {
    }
    var HTMLRuxIconCallMergeElement: {
        prototype: HTMLRuxIconCallMergeElement;
        new (): HTMLRuxIconCallMergeElement;
    };
    interface HTMLRuxIconCallMissedElement extends Components.RuxIconCallMissed, HTMLStencilElement {
    }
    var HTMLRuxIconCallMissedElement: {
        prototype: HTMLRuxIconCallMissedElement;
        new (): HTMLRuxIconCallMissedElement;
    };
    interface HTMLRuxIconCallMissedOutgoingElement extends Components.RuxIconCallMissedOutgoing, HTMLStencilElement {
    }
    var HTMLRuxIconCallMissedOutgoingElement: {
        prototype: HTMLRuxIconCallMissedOutgoingElement;
        new (): HTMLRuxIconCallMissedOutgoingElement;
    };
    interface HTMLRuxIconCallReceivedElement extends Components.RuxIconCallReceived, HTMLStencilElement {
    }
    var HTMLRuxIconCallReceivedElement: {
        prototype: HTMLRuxIconCallReceivedElement;
        new (): HTMLRuxIconCallReceivedElement;
    };
    interface HTMLRuxIconCallSplitElement extends Components.RuxIconCallSplit, HTMLStencilElement {
    }
    var HTMLRuxIconCallSplitElement: {
        prototype: HTMLRuxIconCallSplitElement;
        new (): HTMLRuxIconCallSplitElement;
    };
    interface HTMLRuxIconCallToActionElement extends Components.RuxIconCallToAction, HTMLStencilElement {
    }
    var HTMLRuxIconCallToActionElement: {
        prototype: HTMLRuxIconCallToActionElement;
        new (): HTMLRuxIconCallToActionElement;
    };
    interface HTMLRuxIconCameraElement extends Components.RuxIconCamera, HTMLStencilElement {
    }
    var HTMLRuxIconCameraElement: {
        prototype: HTMLRuxIconCameraElement;
        new (): HTMLRuxIconCameraElement;
    };
    interface HTMLRuxIconCameraAltElement extends Components.RuxIconCameraAlt, HTMLStencilElement {
    }
    var HTMLRuxIconCameraAltElement: {
        prototype: HTMLRuxIconCameraAltElement;
        new (): HTMLRuxIconCameraAltElement;
    };
    interface HTMLRuxIconCameraEnhanceElement extends Components.RuxIconCameraEnhance, HTMLStencilElement {
    }
    var HTMLRuxIconCameraEnhanceElement: {
        prototype: HTMLRuxIconCameraEnhanceElement;
        new (): HTMLRuxIconCameraEnhanceElement;
    };
    interface HTMLRuxIconCameraFrontElement extends Components.RuxIconCameraFront, HTMLStencilElement {
    }
    var HTMLRuxIconCameraFrontElement: {
        prototype: HTMLRuxIconCameraFrontElement;
        new (): HTMLRuxIconCameraFrontElement;
    };
    interface HTMLRuxIconCameraRearElement extends Components.RuxIconCameraRear, HTMLStencilElement {
    }
    var HTMLRuxIconCameraRearElement: {
        prototype: HTMLRuxIconCameraRearElement;
        new (): HTMLRuxIconCameraRearElement;
    };
    interface HTMLRuxIconCameraRollElement extends Components.RuxIconCameraRoll, HTMLStencilElement {
    }
    var HTMLRuxIconCameraRollElement: {
        prototype: HTMLRuxIconCameraRollElement;
        new (): HTMLRuxIconCameraRollElement;
    };
    interface HTMLRuxIconCancelElement extends Components.RuxIconCancel, HTMLStencilElement {
    }
    var HTMLRuxIconCancelElement: {
        prototype: HTMLRuxIconCancelElement;
        new (): HTMLRuxIconCancelElement;
    };
    interface HTMLRuxIconCancelPresentationElement extends Components.RuxIconCancelPresentation, HTMLStencilElement {
    }
    var HTMLRuxIconCancelPresentationElement: {
        prototype: HTMLRuxIconCancelPresentationElement;
        new (): HTMLRuxIconCancelPresentationElement;
    };
    interface HTMLRuxIconCardGiftcardElement extends Components.RuxIconCardGiftcard, HTMLStencilElement {
    }
    var HTMLRuxIconCardGiftcardElement: {
        prototype: HTMLRuxIconCardGiftcardElement;
        new (): HTMLRuxIconCardGiftcardElement;
    };
    interface HTMLRuxIconCardMembershipElement extends Components.RuxIconCardMembership, HTMLStencilElement {
    }
    var HTMLRuxIconCardMembershipElement: {
        prototype: HTMLRuxIconCardMembershipElement;
        new (): HTMLRuxIconCardMembershipElement;
    };
    interface HTMLRuxIconCardTravelElement extends Components.RuxIconCardTravel, HTMLStencilElement {
    }
    var HTMLRuxIconCardTravelElement: {
        prototype: HTMLRuxIconCardTravelElement;
        new (): HTMLRuxIconCardTravelElement;
    };
    interface HTMLRuxIconCasinoElement extends Components.RuxIconCasino, HTMLStencilElement {
    }
    var HTMLRuxIconCasinoElement: {
        prototype: HTMLRuxIconCasinoElement;
        new (): HTMLRuxIconCasinoElement;
    };
    interface HTMLRuxIconCastElement extends Components.RuxIconCast, HTMLStencilElement {
    }
    var HTMLRuxIconCastElement: {
        prototype: HTMLRuxIconCastElement;
        new (): HTMLRuxIconCastElement;
    };
    interface HTMLRuxIconCastConnectedElement extends Components.RuxIconCastConnected, HTMLStencilElement {
    }
    var HTMLRuxIconCastConnectedElement: {
        prototype: HTMLRuxIconCastConnectedElement;
        new (): HTMLRuxIconCastConnectedElement;
    };
    interface HTMLRuxIconCastForEducationElement extends Components.RuxIconCastForEducation, HTMLStencilElement {
    }
    var HTMLRuxIconCastForEducationElement: {
        prototype: HTMLRuxIconCastForEducationElement;
        new (): HTMLRuxIconCastForEducationElement;
    };
    interface HTMLRuxIconCategoryElement extends Components.RuxIconCategory, HTMLStencilElement {
    }
    var HTMLRuxIconCategoryElement: {
        prototype: HTMLRuxIconCategoryElement;
        new (): HTMLRuxIconCategoryElement;
    };
    interface HTMLRuxIconCellWifiElement extends Components.RuxIconCellWifi, HTMLStencilElement {
    }
    var HTMLRuxIconCellWifiElement: {
        prototype: HTMLRuxIconCellWifiElement;
        new (): HTMLRuxIconCellWifiElement;
    };
    interface HTMLRuxIconCenterFocusStrongElement extends Components.RuxIconCenterFocusStrong, HTMLStencilElement {
    }
    var HTMLRuxIconCenterFocusStrongElement: {
        prototype: HTMLRuxIconCenterFocusStrongElement;
        new (): HTMLRuxIconCenterFocusStrongElement;
    };
    interface HTMLRuxIconCenterFocusWeakElement extends Components.RuxIconCenterFocusWeak, HTMLStencilElement {
    }
    var HTMLRuxIconCenterFocusWeakElement: {
        prototype: HTMLRuxIconCenterFocusWeakElement;
        new (): HTMLRuxIconCenterFocusWeakElement;
    };
    interface HTMLRuxIconChangeHistoryElement extends Components.RuxIconChangeHistory, HTMLStencilElement {
    }
    var HTMLRuxIconChangeHistoryElement: {
        prototype: HTMLRuxIconChangeHistoryElement;
        new (): HTMLRuxIconChangeHistoryElement;
    };
    interface HTMLRuxIconChatElement extends Components.RuxIconChat, HTMLStencilElement {
    }
    var HTMLRuxIconChatElement: {
        prototype: HTMLRuxIconChatElement;
        new (): HTMLRuxIconChatElement;
    };
    interface HTMLRuxIconChatBubbleElement extends Components.RuxIconChatBubble, HTMLStencilElement {
    }
    var HTMLRuxIconChatBubbleElement: {
        prototype: HTMLRuxIconChatBubbleElement;
        new (): HTMLRuxIconChatBubbleElement;
    };
    interface HTMLRuxIconChatBubbleOutlineElement extends Components.RuxIconChatBubbleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconChatBubbleOutlineElement: {
        prototype: HTMLRuxIconChatBubbleOutlineElement;
        new (): HTMLRuxIconChatBubbleOutlineElement;
    };
    interface HTMLRuxIconCheckElement extends Components.RuxIconCheck, HTMLStencilElement {
    }
    var HTMLRuxIconCheckElement: {
        prototype: HTMLRuxIconCheckElement;
        new (): HTMLRuxIconCheckElement;
    };
    interface HTMLRuxIconCheckBoxElement extends Components.RuxIconCheckBox, HTMLStencilElement {
    }
    var HTMLRuxIconCheckBoxElement: {
        prototype: HTMLRuxIconCheckBoxElement;
        new (): HTMLRuxIconCheckBoxElement;
    };
    interface HTMLRuxIconCheckBoxOutlineBlankElement extends Components.RuxIconCheckBoxOutlineBlank, HTMLStencilElement {
    }
    var HTMLRuxIconCheckBoxOutlineBlankElement: {
        prototype: HTMLRuxIconCheckBoxOutlineBlankElement;
        new (): HTMLRuxIconCheckBoxOutlineBlankElement;
    };
    interface HTMLRuxIconCheckCircleElement extends Components.RuxIconCheckCircle, HTMLStencilElement {
    }
    var HTMLRuxIconCheckCircleElement: {
        prototype: HTMLRuxIconCheckCircleElement;
        new (): HTMLRuxIconCheckCircleElement;
    };
    interface HTMLRuxIconCheckCircleOutlineElement extends Components.RuxIconCheckCircleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconCheckCircleOutlineElement: {
        prototype: HTMLRuxIconCheckCircleOutlineElement;
        new (): HTMLRuxIconCheckCircleOutlineElement;
    };
    interface HTMLRuxIconChevronLeftElement extends Components.RuxIconChevronLeft, HTMLStencilElement {
    }
    var HTMLRuxIconChevronLeftElement: {
        prototype: HTMLRuxIconChevronLeftElement;
        new (): HTMLRuxIconChevronLeftElement;
    };
    interface HTMLRuxIconChevronRightElement extends Components.RuxIconChevronRight, HTMLStencilElement {
    }
    var HTMLRuxIconChevronRightElement: {
        prototype: HTMLRuxIconChevronRightElement;
        new (): HTMLRuxIconChevronRightElement;
    };
    interface HTMLRuxIconChildCareElement extends Components.RuxIconChildCare, HTMLStencilElement {
    }
    var HTMLRuxIconChildCareElement: {
        prototype: HTMLRuxIconChildCareElement;
        new (): HTMLRuxIconChildCareElement;
    };
    interface HTMLRuxIconChildFriendlyElement extends Components.RuxIconChildFriendly, HTMLStencilElement {
    }
    var HTMLRuxIconChildFriendlyElement: {
        prototype: HTMLRuxIconChildFriendlyElement;
        new (): HTMLRuxIconChildFriendlyElement;
    };
    interface HTMLRuxIconChromeReaderModeElement extends Components.RuxIconChromeReaderMode, HTMLStencilElement {
    }
    var HTMLRuxIconChromeReaderModeElement: {
        prototype: HTMLRuxIconChromeReaderModeElement;
        new (): HTMLRuxIconChromeReaderModeElement;
    };
    interface HTMLRuxIconClassElement extends Components.RuxIconClass, HTMLStencilElement {
    }
    var HTMLRuxIconClassElement: {
        prototype: HTMLRuxIconClassElement;
        new (): HTMLRuxIconClassElement;
    };
    interface HTMLRuxIconClearElement extends Components.RuxIconClear, HTMLStencilElement {
    }
    var HTMLRuxIconClearElement: {
        prototype: HTMLRuxIconClearElement;
        new (): HTMLRuxIconClearElement;
    };
    interface HTMLRuxIconClearAllElement extends Components.RuxIconClearAll, HTMLStencilElement {
    }
    var HTMLRuxIconClearAllElement: {
        prototype: HTMLRuxIconClearAllElement;
        new (): HTMLRuxIconClearAllElement;
    };
    interface HTMLRuxIconCloseElement extends Components.RuxIconClose, HTMLStencilElement {
    }
    var HTMLRuxIconCloseElement: {
        prototype: HTMLRuxIconCloseElement;
        new (): HTMLRuxIconCloseElement;
    };
    interface HTMLRuxIconClosedCaptionElement extends Components.RuxIconClosedCaption, HTMLStencilElement {
    }
    var HTMLRuxIconClosedCaptionElement: {
        prototype: HTMLRuxIconClosedCaptionElement;
        new (): HTMLRuxIconClosedCaptionElement;
    };
    interface HTMLRuxIconCloudElement extends Components.RuxIconCloud, HTMLStencilElement {
    }
    var HTMLRuxIconCloudElement: {
        prototype: HTMLRuxIconCloudElement;
        new (): HTMLRuxIconCloudElement;
    };
    interface HTMLRuxIconCloudCircleElement extends Components.RuxIconCloudCircle, HTMLStencilElement {
    }
    var HTMLRuxIconCloudCircleElement: {
        prototype: HTMLRuxIconCloudCircleElement;
        new (): HTMLRuxIconCloudCircleElement;
    };
    interface HTMLRuxIconCloudDoneElement extends Components.RuxIconCloudDone, HTMLStencilElement {
    }
    var HTMLRuxIconCloudDoneElement: {
        prototype: HTMLRuxIconCloudDoneElement;
        new (): HTMLRuxIconCloudDoneElement;
    };
    interface HTMLRuxIconCloudDownloadElement extends Components.RuxIconCloudDownload, HTMLStencilElement {
    }
    var HTMLRuxIconCloudDownloadElement: {
        prototype: HTMLRuxIconCloudDownloadElement;
        new (): HTMLRuxIconCloudDownloadElement;
    };
    interface HTMLRuxIconCloudOffElement extends Components.RuxIconCloudOff, HTMLStencilElement {
    }
    var HTMLRuxIconCloudOffElement: {
        prototype: HTMLRuxIconCloudOffElement;
        new (): HTMLRuxIconCloudOffElement;
    };
    interface HTMLRuxIconCloudQueueElement extends Components.RuxIconCloudQueue, HTMLStencilElement {
    }
    var HTMLRuxIconCloudQueueElement: {
        prototype: HTMLRuxIconCloudQueueElement;
        new (): HTMLRuxIconCloudQueueElement;
    };
    interface HTMLRuxIconCloudUploadElement extends Components.RuxIconCloudUpload, HTMLStencilElement {
    }
    var HTMLRuxIconCloudUploadElement: {
        prototype: HTMLRuxIconCloudUploadElement;
        new (): HTMLRuxIconCloudUploadElement;
    };
    interface HTMLRuxIconCodeElement extends Components.RuxIconCode, HTMLStencilElement {
    }
    var HTMLRuxIconCodeElement: {
        prototype: HTMLRuxIconCodeElement;
        new (): HTMLRuxIconCodeElement;
    };
    interface HTMLRuxIconCollectionsElement extends Components.RuxIconCollections, HTMLStencilElement {
    }
    var HTMLRuxIconCollectionsElement: {
        prototype: HTMLRuxIconCollectionsElement;
        new (): HTMLRuxIconCollectionsElement;
    };
    interface HTMLRuxIconCollectionsBookmarkElement extends Components.RuxIconCollectionsBookmark, HTMLStencilElement {
    }
    var HTMLRuxIconCollectionsBookmarkElement: {
        prototype: HTMLRuxIconCollectionsBookmarkElement;
        new (): HTMLRuxIconCollectionsBookmarkElement;
    };
    interface HTMLRuxIconColorLensElement extends Components.RuxIconColorLens, HTMLStencilElement {
    }
    var HTMLRuxIconColorLensElement: {
        prototype: HTMLRuxIconColorLensElement;
        new (): HTMLRuxIconColorLensElement;
    };
    interface HTMLRuxIconColorizeElement extends Components.RuxIconColorize, HTMLStencilElement {
    }
    var HTMLRuxIconColorizeElement: {
        prototype: HTMLRuxIconColorizeElement;
        new (): HTMLRuxIconColorizeElement;
    };
    interface HTMLRuxIconCommentElement extends Components.RuxIconComment, HTMLStencilElement {
    }
    var HTMLRuxIconCommentElement: {
        prototype: HTMLRuxIconCommentElement;
        new (): HTMLRuxIconCommentElement;
    };
    interface HTMLRuxIconCommuteElement extends Components.RuxIconCommute, HTMLStencilElement {
    }
    var HTMLRuxIconCommuteElement: {
        prototype: HTMLRuxIconCommuteElement;
        new (): HTMLRuxIconCommuteElement;
    };
    interface HTMLRuxIconCompareElement extends Components.RuxIconCompare, HTMLStencilElement {
    }
    var HTMLRuxIconCompareElement: {
        prototype: HTMLRuxIconCompareElement;
        new (): HTMLRuxIconCompareElement;
    };
    interface HTMLRuxIconCompareArrowsElement extends Components.RuxIconCompareArrows, HTMLStencilElement {
    }
    var HTMLRuxIconCompareArrowsElement: {
        prototype: HTMLRuxIconCompareArrowsElement;
        new (): HTMLRuxIconCompareArrowsElement;
    };
    interface HTMLRuxIconCompassCalibrationElement extends Components.RuxIconCompassCalibration, HTMLStencilElement {
    }
    var HTMLRuxIconCompassCalibrationElement: {
        prototype: HTMLRuxIconCompassCalibrationElement;
        new (): HTMLRuxIconCompassCalibrationElement;
    };
    interface HTMLRuxIconComputerElement extends Components.RuxIconComputer, HTMLStencilElement {
    }
    var HTMLRuxIconComputerElement: {
        prototype: HTMLRuxIconComputerElement;
        new (): HTMLRuxIconComputerElement;
    };
    interface HTMLRuxIconConfirmationNumberElement extends Components.RuxIconConfirmationNumber, HTMLStencilElement {
    }
    var HTMLRuxIconConfirmationNumberElement: {
        prototype: HTMLRuxIconConfirmationNumberElement;
        new (): HTMLRuxIconConfirmationNumberElement;
    };
    interface HTMLRuxIconContactMailElement extends Components.RuxIconContactMail, HTMLStencilElement {
    }
    var HTMLRuxIconContactMailElement: {
        prototype: HTMLRuxIconContactMailElement;
        new (): HTMLRuxIconContactMailElement;
    };
    interface HTMLRuxIconContactPhoneElement extends Components.RuxIconContactPhone, HTMLStencilElement {
    }
    var HTMLRuxIconContactPhoneElement: {
        prototype: HTMLRuxIconContactPhoneElement;
        new (): HTMLRuxIconContactPhoneElement;
    };
    interface HTMLRuxIconContactSupportElement extends Components.RuxIconContactSupport, HTMLStencilElement {
    }
    var HTMLRuxIconContactSupportElement: {
        prototype: HTMLRuxIconContactSupportElement;
        new (): HTMLRuxIconContactSupportElement;
    };
    interface HTMLRuxIconContactsElement extends Components.RuxIconContacts, HTMLStencilElement {
    }
    var HTMLRuxIconContactsElement: {
        prototype: HTMLRuxIconContactsElement;
        new (): HTMLRuxIconContactsElement;
    };
    interface HTMLRuxIconControlCameraElement extends Components.RuxIconControlCamera, HTMLStencilElement {
    }
    var HTMLRuxIconControlCameraElement: {
        prototype: HTMLRuxIconControlCameraElement;
        new (): HTMLRuxIconControlCameraElement;
    };
    interface HTMLRuxIconControlPointElement extends Components.RuxIconControlPoint, HTMLStencilElement {
    }
    var HTMLRuxIconControlPointElement: {
        prototype: HTMLRuxIconControlPointElement;
        new (): HTMLRuxIconControlPointElement;
    };
    interface HTMLRuxIconControlPointDuplicateElement extends Components.RuxIconControlPointDuplicate, HTMLStencilElement {
    }
    var HTMLRuxIconControlPointDuplicateElement: {
        prototype: HTMLRuxIconControlPointDuplicateElement;
        new (): HTMLRuxIconControlPointDuplicateElement;
    };
    interface HTMLRuxIconCopyrightElement extends Components.RuxIconCopyright, HTMLStencilElement {
    }
    var HTMLRuxIconCopyrightElement: {
        prototype: HTMLRuxIconCopyrightElement;
        new (): HTMLRuxIconCopyrightElement;
    };
    interface HTMLRuxIconCreateElement extends Components.RuxIconCreate, HTMLStencilElement {
    }
    var HTMLRuxIconCreateElement: {
        prototype: HTMLRuxIconCreateElement;
        new (): HTMLRuxIconCreateElement;
    };
    interface HTMLRuxIconCreateNewFolderElement extends Components.RuxIconCreateNewFolder, HTMLStencilElement {
    }
    var HTMLRuxIconCreateNewFolderElement: {
        prototype: HTMLRuxIconCreateNewFolderElement;
        new (): HTMLRuxIconCreateNewFolderElement;
    };
    interface HTMLRuxIconCreditCardElement extends Components.RuxIconCreditCard, HTMLStencilElement {
    }
    var HTMLRuxIconCreditCardElement: {
        prototype: HTMLRuxIconCreditCardElement;
        new (): HTMLRuxIconCreditCardElement;
    };
    interface HTMLRuxIconCropElement extends Components.RuxIconCrop, HTMLStencilElement {
    }
    var HTMLRuxIconCropElement: {
        prototype: HTMLRuxIconCropElement;
        new (): HTMLRuxIconCropElement;
    };
    interface HTMLRuxIconCrop169Element extends Components.RuxIconCrop169, HTMLStencilElement {
    }
    var HTMLRuxIconCrop169Element: {
        prototype: HTMLRuxIconCrop169Element;
        new (): HTMLRuxIconCrop169Element;
    };
    interface HTMLRuxIconCrop32Element extends Components.RuxIconCrop32, HTMLStencilElement {
    }
    var HTMLRuxIconCrop32Element: {
        prototype: HTMLRuxIconCrop32Element;
        new (): HTMLRuxIconCrop32Element;
    };
    interface HTMLRuxIconCrop54Element extends Components.RuxIconCrop54, HTMLStencilElement {
    }
    var HTMLRuxIconCrop54Element: {
        prototype: HTMLRuxIconCrop54Element;
        new (): HTMLRuxIconCrop54Element;
    };
    interface HTMLRuxIconCrop75Element extends Components.RuxIconCrop75, HTMLStencilElement {
    }
    var HTMLRuxIconCrop75Element: {
        prototype: HTMLRuxIconCrop75Element;
        new (): HTMLRuxIconCrop75Element;
    };
    interface HTMLRuxIconCropDinElement extends Components.RuxIconCropDin, HTMLStencilElement {
    }
    var HTMLRuxIconCropDinElement: {
        prototype: HTMLRuxIconCropDinElement;
        new (): HTMLRuxIconCropDinElement;
    };
    interface HTMLRuxIconCropFreeElement extends Components.RuxIconCropFree, HTMLStencilElement {
    }
    var HTMLRuxIconCropFreeElement: {
        prototype: HTMLRuxIconCropFreeElement;
        new (): HTMLRuxIconCropFreeElement;
    };
    interface HTMLRuxIconCropLandscapeElement extends Components.RuxIconCropLandscape, HTMLStencilElement {
    }
    var HTMLRuxIconCropLandscapeElement: {
        prototype: HTMLRuxIconCropLandscapeElement;
        new (): HTMLRuxIconCropLandscapeElement;
    };
    interface HTMLRuxIconCropOriginalElement extends Components.RuxIconCropOriginal, HTMLStencilElement {
    }
    var HTMLRuxIconCropOriginalElement: {
        prototype: HTMLRuxIconCropOriginalElement;
        new (): HTMLRuxIconCropOriginalElement;
    };
    interface HTMLRuxIconCropPortraitElement extends Components.RuxIconCropPortrait, HTMLStencilElement {
    }
    var HTMLRuxIconCropPortraitElement: {
        prototype: HTMLRuxIconCropPortraitElement;
        new (): HTMLRuxIconCropPortraitElement;
    };
    interface HTMLRuxIconCropRotateElement extends Components.RuxIconCropRotate, HTMLStencilElement {
    }
    var HTMLRuxIconCropRotateElement: {
        prototype: HTMLRuxIconCropRotateElement;
        new (): HTMLRuxIconCropRotateElement;
    };
    interface HTMLRuxIconCropSquareElement extends Components.RuxIconCropSquare, HTMLStencilElement {
    }
    var HTMLRuxIconCropSquareElement: {
        prototype: HTMLRuxIconCropSquareElement;
        new (): HTMLRuxIconCropSquareElement;
    };
    interface HTMLRuxIconDashboardElement extends Components.RuxIconDashboard, HTMLStencilElement {
    }
    var HTMLRuxIconDashboardElement: {
        prototype: HTMLRuxIconDashboardElement;
        new (): HTMLRuxIconDashboardElement;
    };
    interface HTMLRuxIconDataUsageElement extends Components.RuxIconDataUsage, HTMLStencilElement {
    }
    var HTMLRuxIconDataUsageElement: {
        prototype: HTMLRuxIconDataUsageElement;
        new (): HTMLRuxIconDataUsageElement;
    };
    interface HTMLRuxIconDateRangeElement extends Components.RuxIconDateRange, HTMLStencilElement {
    }
    var HTMLRuxIconDateRangeElement: {
        prototype: HTMLRuxIconDateRangeElement;
        new (): HTMLRuxIconDateRangeElement;
    };
    interface HTMLRuxIconDehazeElement extends Components.RuxIconDehaze, HTMLStencilElement {
    }
    var HTMLRuxIconDehazeElement: {
        prototype: HTMLRuxIconDehazeElement;
        new (): HTMLRuxIconDehazeElement;
    };
    interface HTMLRuxIconDeleteElement extends Components.RuxIconDelete, HTMLStencilElement {
    }
    var HTMLRuxIconDeleteElement: {
        prototype: HTMLRuxIconDeleteElement;
        new (): HTMLRuxIconDeleteElement;
    };
    interface HTMLRuxIconDeleteForeverElement extends Components.RuxIconDeleteForever, HTMLStencilElement {
    }
    var HTMLRuxIconDeleteForeverElement: {
        prototype: HTMLRuxIconDeleteForeverElement;
        new (): HTMLRuxIconDeleteForeverElement;
    };
    interface HTMLRuxIconDeleteOutlineElement extends Components.RuxIconDeleteOutline, HTMLStencilElement {
    }
    var HTMLRuxIconDeleteOutlineElement: {
        prototype: HTMLRuxIconDeleteOutlineElement;
        new (): HTMLRuxIconDeleteOutlineElement;
    };
    interface HTMLRuxIconDeleteSweepElement extends Components.RuxIconDeleteSweep, HTMLStencilElement {
    }
    var HTMLRuxIconDeleteSweepElement: {
        prototype: HTMLRuxIconDeleteSweepElement;
        new (): HTMLRuxIconDeleteSweepElement;
    };
    interface HTMLRuxIconDepartureBoardElement extends Components.RuxIconDepartureBoard, HTMLStencilElement {
    }
    var HTMLRuxIconDepartureBoardElement: {
        prototype: HTMLRuxIconDepartureBoardElement;
        new (): HTMLRuxIconDepartureBoardElement;
    };
    interface HTMLRuxIconDescriptionElement extends Components.RuxIconDescription, HTMLStencilElement {
    }
    var HTMLRuxIconDescriptionElement: {
        prototype: HTMLRuxIconDescriptionElement;
        new (): HTMLRuxIconDescriptionElement;
    };
    interface HTMLRuxIconDesktopAccessDisabledElement extends Components.RuxIconDesktopAccessDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconDesktopAccessDisabledElement: {
        prototype: HTMLRuxIconDesktopAccessDisabledElement;
        new (): HTMLRuxIconDesktopAccessDisabledElement;
    };
    interface HTMLRuxIconDesktopMacElement extends Components.RuxIconDesktopMac, HTMLStencilElement {
    }
    var HTMLRuxIconDesktopMacElement: {
        prototype: HTMLRuxIconDesktopMacElement;
        new (): HTMLRuxIconDesktopMacElement;
    };
    interface HTMLRuxIconDesktopWindowsElement extends Components.RuxIconDesktopWindows, HTMLStencilElement {
    }
    var HTMLRuxIconDesktopWindowsElement: {
        prototype: HTMLRuxIconDesktopWindowsElement;
        new (): HTMLRuxIconDesktopWindowsElement;
    };
    interface HTMLRuxIconDetailsElement extends Components.RuxIconDetails, HTMLStencilElement {
    }
    var HTMLRuxIconDetailsElement: {
        prototype: HTMLRuxIconDetailsElement;
        new (): HTMLRuxIconDetailsElement;
    };
    interface HTMLRuxIconDeveloperBoardElement extends Components.RuxIconDeveloperBoard, HTMLStencilElement {
    }
    var HTMLRuxIconDeveloperBoardElement: {
        prototype: HTMLRuxIconDeveloperBoardElement;
        new (): HTMLRuxIconDeveloperBoardElement;
    };
    interface HTMLRuxIconDeveloperModeElement extends Components.RuxIconDeveloperMode, HTMLStencilElement {
    }
    var HTMLRuxIconDeveloperModeElement: {
        prototype: HTMLRuxIconDeveloperModeElement;
        new (): HTMLRuxIconDeveloperModeElement;
    };
    interface HTMLRuxIconDeviceHubElement extends Components.RuxIconDeviceHub, HTMLStencilElement {
    }
    var HTMLRuxIconDeviceHubElement: {
        prototype: HTMLRuxIconDeviceHubElement;
        new (): HTMLRuxIconDeviceHubElement;
    };
    interface HTMLRuxIconDeviceUnknownElement extends Components.RuxIconDeviceUnknown, HTMLStencilElement {
    }
    var HTMLRuxIconDeviceUnknownElement: {
        prototype: HTMLRuxIconDeviceUnknownElement;
        new (): HTMLRuxIconDeviceUnknownElement;
    };
    interface HTMLRuxIconDevicesElement extends Components.RuxIconDevices, HTMLStencilElement {
    }
    var HTMLRuxIconDevicesElement: {
        prototype: HTMLRuxIconDevicesElement;
        new (): HTMLRuxIconDevicesElement;
    };
    interface HTMLRuxIconDevicesOtherElement extends Components.RuxIconDevicesOther, HTMLStencilElement {
    }
    var HTMLRuxIconDevicesOtherElement: {
        prototype: HTMLRuxIconDevicesOtherElement;
        new (): HTMLRuxIconDevicesOtherElement;
    };
    interface HTMLRuxIconDialerSipElement extends Components.RuxIconDialerSip, HTMLStencilElement {
    }
    var HTMLRuxIconDialerSipElement: {
        prototype: HTMLRuxIconDialerSipElement;
        new (): HTMLRuxIconDialerSipElement;
    };
    interface HTMLRuxIconDialpadElement extends Components.RuxIconDialpad, HTMLStencilElement {
    }
    var HTMLRuxIconDialpadElement: {
        prototype: HTMLRuxIconDialpadElement;
        new (): HTMLRuxIconDialpadElement;
    };
    interface HTMLRuxIconDirectionsElement extends Components.RuxIconDirections, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsElement: {
        prototype: HTMLRuxIconDirectionsElement;
        new (): HTMLRuxIconDirectionsElement;
    };
    interface HTMLRuxIconDirectionsBikeElement extends Components.RuxIconDirectionsBike, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsBikeElement: {
        prototype: HTMLRuxIconDirectionsBikeElement;
        new (): HTMLRuxIconDirectionsBikeElement;
    };
    interface HTMLRuxIconDirectionsBoatElement extends Components.RuxIconDirectionsBoat, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsBoatElement: {
        prototype: HTMLRuxIconDirectionsBoatElement;
        new (): HTMLRuxIconDirectionsBoatElement;
    };
    interface HTMLRuxIconDirectionsBusElement extends Components.RuxIconDirectionsBus, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsBusElement: {
        prototype: HTMLRuxIconDirectionsBusElement;
        new (): HTMLRuxIconDirectionsBusElement;
    };
    interface HTMLRuxIconDirectionsCarElement extends Components.RuxIconDirectionsCar, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsCarElement: {
        prototype: HTMLRuxIconDirectionsCarElement;
        new (): HTMLRuxIconDirectionsCarElement;
    };
    interface HTMLRuxIconDirectionsRailwayElement extends Components.RuxIconDirectionsRailway, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsRailwayElement: {
        prototype: HTMLRuxIconDirectionsRailwayElement;
        new (): HTMLRuxIconDirectionsRailwayElement;
    };
    interface HTMLRuxIconDirectionsRunElement extends Components.RuxIconDirectionsRun, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsRunElement: {
        prototype: HTMLRuxIconDirectionsRunElement;
        new (): HTMLRuxIconDirectionsRunElement;
    };
    interface HTMLRuxIconDirectionsSubwayElement extends Components.RuxIconDirectionsSubway, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsSubwayElement: {
        prototype: HTMLRuxIconDirectionsSubwayElement;
        new (): HTMLRuxIconDirectionsSubwayElement;
    };
    interface HTMLRuxIconDirectionsTransitElement extends Components.RuxIconDirectionsTransit, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsTransitElement: {
        prototype: HTMLRuxIconDirectionsTransitElement;
        new (): HTMLRuxIconDirectionsTransitElement;
    };
    interface HTMLRuxIconDirectionsWalkElement extends Components.RuxIconDirectionsWalk, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsWalkElement: {
        prototype: HTMLRuxIconDirectionsWalkElement;
        new (): HTMLRuxIconDirectionsWalkElement;
    };
    interface HTMLRuxIconDiscFullElement extends Components.RuxIconDiscFull, HTMLStencilElement {
    }
    var HTMLRuxIconDiscFullElement: {
        prototype: HTMLRuxIconDiscFullElement;
        new (): HTMLRuxIconDiscFullElement;
    };
    interface HTMLRuxIconDnsElement extends Components.RuxIconDns, HTMLStencilElement {
    }
    var HTMLRuxIconDnsElement: {
        prototype: HTMLRuxIconDnsElement;
        new (): HTMLRuxIconDnsElement;
    };
    interface HTMLRuxIconDockElement extends Components.RuxIconDock, HTMLStencilElement {
    }
    var HTMLRuxIconDockElement: {
        prototype: HTMLRuxIconDockElement;
        new (): HTMLRuxIconDockElement;
    };
    interface HTMLRuxIconDomainElement extends Components.RuxIconDomain, HTMLStencilElement {
    }
    var HTMLRuxIconDomainElement: {
        prototype: HTMLRuxIconDomainElement;
        new (): HTMLRuxIconDomainElement;
    };
    interface HTMLRuxIconDomainDisabledElement extends Components.RuxIconDomainDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconDomainDisabledElement: {
        prototype: HTMLRuxIconDomainDisabledElement;
        new (): HTMLRuxIconDomainDisabledElement;
    };
    interface HTMLRuxIconDoneElement extends Components.RuxIconDone, HTMLStencilElement {
    }
    var HTMLRuxIconDoneElement: {
        prototype: HTMLRuxIconDoneElement;
        new (): HTMLRuxIconDoneElement;
    };
    interface HTMLRuxIconDoneAllElement extends Components.RuxIconDoneAll, HTMLStencilElement {
    }
    var HTMLRuxIconDoneAllElement: {
        prototype: HTMLRuxIconDoneAllElement;
        new (): HTMLRuxIconDoneAllElement;
    };
    interface HTMLRuxIconDoneOutlineElement extends Components.RuxIconDoneOutline, HTMLStencilElement {
    }
    var HTMLRuxIconDoneOutlineElement: {
        prototype: HTMLRuxIconDoneOutlineElement;
        new (): HTMLRuxIconDoneOutlineElement;
    };
    interface HTMLRuxIconDonutLargeElement extends Components.RuxIconDonutLarge, HTMLStencilElement {
    }
    var HTMLRuxIconDonutLargeElement: {
        prototype: HTMLRuxIconDonutLargeElement;
        new (): HTMLRuxIconDonutLargeElement;
    };
    interface HTMLRuxIconDonutSmallElement extends Components.RuxIconDonutSmall, HTMLStencilElement {
    }
    var HTMLRuxIconDonutSmallElement: {
        prototype: HTMLRuxIconDonutSmallElement;
        new (): HTMLRuxIconDonutSmallElement;
    };
    interface HTMLRuxIconDraftsElement extends Components.RuxIconDrafts, HTMLStencilElement {
    }
    var HTMLRuxIconDraftsElement: {
        prototype: HTMLRuxIconDraftsElement;
        new (): HTMLRuxIconDraftsElement;
    };
    interface HTMLRuxIconDragHandleElement extends Components.RuxIconDragHandle, HTMLStencilElement {
    }
    var HTMLRuxIconDragHandleElement: {
        prototype: HTMLRuxIconDragHandleElement;
        new (): HTMLRuxIconDragHandleElement;
    };
    interface HTMLRuxIconDragIndicatorElement extends Components.RuxIconDragIndicator, HTMLStencilElement {
    }
    var HTMLRuxIconDragIndicatorElement: {
        prototype: HTMLRuxIconDragIndicatorElement;
        new (): HTMLRuxIconDragIndicatorElement;
    };
    interface HTMLRuxIconDriveEtaElement extends Components.RuxIconDriveEta, HTMLStencilElement {
    }
    var HTMLRuxIconDriveEtaElement: {
        prototype: HTMLRuxIconDriveEtaElement;
        new (): HTMLRuxIconDriveEtaElement;
    };
    interface HTMLRuxIconDuoElement extends Components.RuxIconDuo, HTMLStencilElement {
    }
    var HTMLRuxIconDuoElement: {
        prototype: HTMLRuxIconDuoElement;
        new (): HTMLRuxIconDuoElement;
    };
    interface HTMLRuxIconDvrElement extends Components.RuxIconDvr, HTMLStencilElement {
    }
    var HTMLRuxIconDvrElement: {
        prototype: HTMLRuxIconDvrElement;
        new (): HTMLRuxIconDvrElement;
    };
    interface HTMLRuxIconEditElement extends Components.RuxIconEdit, HTMLStencilElement {
    }
    var HTMLRuxIconEditElement: {
        prototype: HTMLRuxIconEditElement;
        new (): HTMLRuxIconEditElement;
    };
    interface HTMLRuxIconEditAttributesElement extends Components.RuxIconEditAttributes, HTMLStencilElement {
    }
    var HTMLRuxIconEditAttributesElement: {
        prototype: HTMLRuxIconEditAttributesElement;
        new (): HTMLRuxIconEditAttributesElement;
    };
    interface HTMLRuxIconEditLocationElement extends Components.RuxIconEditLocation, HTMLStencilElement {
    }
    var HTMLRuxIconEditLocationElement: {
        prototype: HTMLRuxIconEditLocationElement;
        new (): HTMLRuxIconEditLocationElement;
    };
    interface HTMLRuxIconEjectElement extends Components.RuxIconEject, HTMLStencilElement {
    }
    var HTMLRuxIconEjectElement: {
        prototype: HTMLRuxIconEjectElement;
        new (): HTMLRuxIconEjectElement;
    };
    interface HTMLRuxIconEmailElement extends Components.RuxIconEmail, HTMLStencilElement {
    }
    var HTMLRuxIconEmailElement: {
        prototype: HTMLRuxIconEmailElement;
        new (): HTMLRuxIconEmailElement;
    };
    interface HTMLRuxIconEnhancedEncryptionElement extends Components.RuxIconEnhancedEncryption, HTMLStencilElement {
    }
    var HTMLRuxIconEnhancedEncryptionElement: {
        prototype: HTMLRuxIconEnhancedEncryptionElement;
        new (): HTMLRuxIconEnhancedEncryptionElement;
    };
    interface HTMLRuxIconEqualizerElement extends Components.RuxIconEqualizer, HTMLStencilElement {
    }
    var HTMLRuxIconEqualizerElement: {
        prototype: HTMLRuxIconEqualizerElement;
        new (): HTMLRuxIconEqualizerElement;
    };
    interface HTMLRuxIconEquipmentElement extends Components.RuxIconEquipment, HTMLStencilElement {
    }
    var HTMLRuxIconEquipmentElement: {
        prototype: HTMLRuxIconEquipmentElement;
        new (): HTMLRuxIconEquipmentElement;
    };
    interface HTMLRuxIconErrorElement extends Components.RuxIconError, HTMLStencilElement {
    }
    var HTMLRuxIconErrorElement: {
        prototype: HTMLRuxIconErrorElement;
        new (): HTMLRuxIconErrorElement;
    };
    interface HTMLRuxIconErrorOutlineElement extends Components.RuxIconErrorOutline, HTMLStencilElement {
    }
    var HTMLRuxIconErrorOutlineElement: {
        prototype: HTMLRuxIconErrorOutlineElement;
        new (): HTMLRuxIconErrorOutlineElement;
    };
    interface HTMLRuxIconEuroSymbolElement extends Components.RuxIconEuroSymbol, HTMLStencilElement {
    }
    var HTMLRuxIconEuroSymbolElement: {
        prototype: HTMLRuxIconEuroSymbolElement;
        new (): HTMLRuxIconEuroSymbolElement;
    };
    interface HTMLRuxIconEvStationElement extends Components.RuxIconEvStation, HTMLStencilElement {
    }
    var HTMLRuxIconEvStationElement: {
        prototype: HTMLRuxIconEvStationElement;
        new (): HTMLRuxIconEvStationElement;
    };
    interface HTMLRuxIconEventElement extends Components.RuxIconEvent, HTMLStencilElement {
    }
    var HTMLRuxIconEventElement: {
        prototype: HTMLRuxIconEventElement;
        new (): HTMLRuxIconEventElement;
    };
    interface HTMLRuxIconEventAvailableElement extends Components.RuxIconEventAvailable, HTMLStencilElement {
    }
    var HTMLRuxIconEventAvailableElement: {
        prototype: HTMLRuxIconEventAvailableElement;
        new (): HTMLRuxIconEventAvailableElement;
    };
    interface HTMLRuxIconEventBusyElement extends Components.RuxIconEventBusy, HTMLStencilElement {
    }
    var HTMLRuxIconEventBusyElement: {
        prototype: HTMLRuxIconEventBusyElement;
        new (): HTMLRuxIconEventBusyElement;
    };
    interface HTMLRuxIconEventNoteElement extends Components.RuxIconEventNote, HTMLStencilElement {
    }
    var HTMLRuxIconEventNoteElement: {
        prototype: HTMLRuxIconEventNoteElement;
        new (): HTMLRuxIconEventNoteElement;
    };
    interface HTMLRuxIconExitToAppElement extends Components.RuxIconExitToApp, HTMLStencilElement {
    }
    var HTMLRuxIconExitToAppElement: {
        prototype: HTMLRuxIconExitToAppElement;
        new (): HTMLRuxIconExitToAppElement;
    };
    interface HTMLRuxIconExpandLessElement extends Components.RuxIconExpandLess, HTMLStencilElement {
    }
    var HTMLRuxIconExpandLessElement: {
        prototype: HTMLRuxIconExpandLessElement;
        new (): HTMLRuxIconExpandLessElement;
    };
    interface HTMLRuxIconExpandMoreElement extends Components.RuxIconExpandMore, HTMLStencilElement {
    }
    var HTMLRuxIconExpandMoreElement: {
        prototype: HTMLRuxIconExpandMoreElement;
        new (): HTMLRuxIconExpandMoreElement;
    };
    interface HTMLRuxIconExplicitElement extends Components.RuxIconExplicit, HTMLStencilElement {
    }
    var HTMLRuxIconExplicitElement: {
        prototype: HTMLRuxIconExplicitElement;
        new (): HTMLRuxIconExplicitElement;
    };
    interface HTMLRuxIconExploreElement extends Components.RuxIconExplore, HTMLStencilElement {
    }
    var HTMLRuxIconExploreElement: {
        prototype: HTMLRuxIconExploreElement;
        new (): HTMLRuxIconExploreElement;
    };
    interface HTMLRuxIconExploreOffElement extends Components.RuxIconExploreOff, HTMLStencilElement {
    }
    var HTMLRuxIconExploreOffElement: {
        prototype: HTMLRuxIconExploreOffElement;
        new (): HTMLRuxIconExploreOffElement;
    };
    interface HTMLRuxIconExposureElement extends Components.RuxIconExposure, HTMLStencilElement {
    }
    var HTMLRuxIconExposureElement: {
        prototype: HTMLRuxIconExposureElement;
        new (): HTMLRuxIconExposureElement;
    };
    interface HTMLRuxIconExposureNeg1Element extends Components.RuxIconExposureNeg1, HTMLStencilElement {
    }
    var HTMLRuxIconExposureNeg1Element: {
        prototype: HTMLRuxIconExposureNeg1Element;
        new (): HTMLRuxIconExposureNeg1Element;
    };
    interface HTMLRuxIconExposureNeg2Element extends Components.RuxIconExposureNeg2, HTMLStencilElement {
    }
    var HTMLRuxIconExposureNeg2Element: {
        prototype: HTMLRuxIconExposureNeg2Element;
        new (): HTMLRuxIconExposureNeg2Element;
    };
    interface HTMLRuxIconExposurePlus1Element extends Components.RuxIconExposurePlus1, HTMLStencilElement {
    }
    var HTMLRuxIconExposurePlus1Element: {
        prototype: HTMLRuxIconExposurePlus1Element;
        new (): HTMLRuxIconExposurePlus1Element;
    };
    interface HTMLRuxIconExposurePlus2Element extends Components.RuxIconExposurePlus2, HTMLStencilElement {
    }
    var HTMLRuxIconExposurePlus2Element: {
        prototype: HTMLRuxIconExposurePlus2Element;
        new (): HTMLRuxIconExposurePlus2Element;
    };
    interface HTMLRuxIconExposureZeroElement extends Components.RuxIconExposureZero, HTMLStencilElement {
    }
    var HTMLRuxIconExposureZeroElement: {
        prototype: HTMLRuxIconExposureZeroElement;
        new (): HTMLRuxIconExposureZeroElement;
    };
    interface HTMLRuxIconExtensionElement extends Components.RuxIconExtension, HTMLStencilElement {
    }
    var HTMLRuxIconExtensionElement: {
        prototype: HTMLRuxIconExtensionElement;
        new (): HTMLRuxIconExtensionElement;
    };
    interface HTMLRuxIconFaceElement extends Components.RuxIconFace, HTMLStencilElement {
    }
    var HTMLRuxIconFaceElement: {
        prototype: HTMLRuxIconFaceElement;
        new (): HTMLRuxIconFaceElement;
    };
    interface HTMLRuxIconFastForwardElement extends Components.RuxIconFastForward, HTMLStencilElement {
    }
    var HTMLRuxIconFastForwardElement: {
        prototype: HTMLRuxIconFastForwardElement;
        new (): HTMLRuxIconFastForwardElement;
    };
    interface HTMLRuxIconFastRewindElement extends Components.RuxIconFastRewind, HTMLStencilElement {
    }
    var HTMLRuxIconFastRewindElement: {
        prototype: HTMLRuxIconFastRewindElement;
        new (): HTMLRuxIconFastRewindElement;
    };
    interface HTMLRuxIconFastfoodElement extends Components.RuxIconFastfood, HTMLStencilElement {
    }
    var HTMLRuxIconFastfoodElement: {
        prototype: HTMLRuxIconFastfoodElement;
        new (): HTMLRuxIconFastfoodElement;
    };
    interface HTMLRuxIconFavoriteElement extends Components.RuxIconFavorite, HTMLStencilElement {
    }
    var HTMLRuxIconFavoriteElement: {
        prototype: HTMLRuxIconFavoriteElement;
        new (): HTMLRuxIconFavoriteElement;
    };
    interface HTMLRuxIconFavoriteBorderElement extends Components.RuxIconFavoriteBorder, HTMLStencilElement {
    }
    var HTMLRuxIconFavoriteBorderElement: {
        prototype: HTMLRuxIconFavoriteBorderElement;
        new (): HTMLRuxIconFavoriteBorderElement;
    };
    interface HTMLRuxIconFeaturedPlayListElement extends Components.RuxIconFeaturedPlayList, HTMLStencilElement {
    }
    var HTMLRuxIconFeaturedPlayListElement: {
        prototype: HTMLRuxIconFeaturedPlayListElement;
        new (): HTMLRuxIconFeaturedPlayListElement;
    };
    interface HTMLRuxIconFeaturedVideoElement extends Components.RuxIconFeaturedVideo, HTMLStencilElement {
    }
    var HTMLRuxIconFeaturedVideoElement: {
        prototype: HTMLRuxIconFeaturedVideoElement;
        new (): HTMLRuxIconFeaturedVideoElement;
    };
    interface HTMLRuxIconFeedbackElement extends Components.RuxIconFeedback, HTMLStencilElement {
    }
    var HTMLRuxIconFeedbackElement: {
        prototype: HTMLRuxIconFeedbackElement;
        new (): HTMLRuxIconFeedbackElement;
    };
    interface HTMLRuxIconFiberDvrElement extends Components.RuxIconFiberDvr, HTMLStencilElement {
    }
    var HTMLRuxIconFiberDvrElement: {
        prototype: HTMLRuxIconFiberDvrElement;
        new (): HTMLRuxIconFiberDvrElement;
    };
    interface HTMLRuxIconFiberManualRecordElement extends Components.RuxIconFiberManualRecord, HTMLStencilElement {
    }
    var HTMLRuxIconFiberManualRecordElement: {
        prototype: HTMLRuxIconFiberManualRecordElement;
        new (): HTMLRuxIconFiberManualRecordElement;
    };
    interface HTMLRuxIconFiberNewElement extends Components.RuxIconFiberNew, HTMLStencilElement {
    }
    var HTMLRuxIconFiberNewElement: {
        prototype: HTMLRuxIconFiberNewElement;
        new (): HTMLRuxIconFiberNewElement;
    };
    interface HTMLRuxIconFiberPinElement extends Components.RuxIconFiberPin, HTMLStencilElement {
    }
    var HTMLRuxIconFiberPinElement: {
        prototype: HTMLRuxIconFiberPinElement;
        new (): HTMLRuxIconFiberPinElement;
    };
    interface HTMLRuxIconFiberSmartRecordElement extends Components.RuxIconFiberSmartRecord, HTMLStencilElement {
    }
    var HTMLRuxIconFiberSmartRecordElement: {
        prototype: HTMLRuxIconFiberSmartRecordElement;
        new (): HTMLRuxIconFiberSmartRecordElement;
    };
    interface HTMLRuxIconFileCopyElement extends Components.RuxIconFileCopy, HTMLStencilElement {
    }
    var HTMLRuxIconFileCopyElement: {
        prototype: HTMLRuxIconFileCopyElement;
        new (): HTMLRuxIconFileCopyElement;
    };
    interface HTMLRuxIconFilterElement extends Components.RuxIconFilter, HTMLStencilElement {
    }
    var HTMLRuxIconFilterElement: {
        prototype: HTMLRuxIconFilterElement;
        new (): HTMLRuxIconFilterElement;
    };
    interface HTMLRuxIconFilter1Element extends Components.RuxIconFilter1, HTMLStencilElement {
    }
    var HTMLRuxIconFilter1Element: {
        prototype: HTMLRuxIconFilter1Element;
        new (): HTMLRuxIconFilter1Element;
    };
    interface HTMLRuxIconFilter2Element extends Components.RuxIconFilter2, HTMLStencilElement {
    }
    var HTMLRuxIconFilter2Element: {
        prototype: HTMLRuxIconFilter2Element;
        new (): HTMLRuxIconFilter2Element;
    };
    interface HTMLRuxIconFilter3Element extends Components.RuxIconFilter3, HTMLStencilElement {
    }
    var HTMLRuxIconFilter3Element: {
        prototype: HTMLRuxIconFilter3Element;
        new (): HTMLRuxIconFilter3Element;
    };
    interface HTMLRuxIconFilter4Element extends Components.RuxIconFilter4, HTMLStencilElement {
    }
    var HTMLRuxIconFilter4Element: {
        prototype: HTMLRuxIconFilter4Element;
        new (): HTMLRuxIconFilter4Element;
    };
    interface HTMLRuxIconFilter5Element extends Components.RuxIconFilter5, HTMLStencilElement {
    }
    var HTMLRuxIconFilter5Element: {
        prototype: HTMLRuxIconFilter5Element;
        new (): HTMLRuxIconFilter5Element;
    };
    interface HTMLRuxIconFilter6Element extends Components.RuxIconFilter6, HTMLStencilElement {
    }
    var HTMLRuxIconFilter6Element: {
        prototype: HTMLRuxIconFilter6Element;
        new (): HTMLRuxIconFilter6Element;
    };
    interface HTMLRuxIconFilter7Element extends Components.RuxIconFilter7, HTMLStencilElement {
    }
    var HTMLRuxIconFilter7Element: {
        prototype: HTMLRuxIconFilter7Element;
        new (): HTMLRuxIconFilter7Element;
    };
    interface HTMLRuxIconFilter8Element extends Components.RuxIconFilter8, HTMLStencilElement {
    }
    var HTMLRuxIconFilter8Element: {
        prototype: HTMLRuxIconFilter8Element;
        new (): HTMLRuxIconFilter8Element;
    };
    interface HTMLRuxIconFilter9Element extends Components.RuxIconFilter9, HTMLStencilElement {
    }
    var HTMLRuxIconFilter9Element: {
        prototype: HTMLRuxIconFilter9Element;
        new (): HTMLRuxIconFilter9Element;
    };
    interface HTMLRuxIconFilter9PlusElement extends Components.RuxIconFilter9Plus, HTMLStencilElement {
    }
    var HTMLRuxIconFilter9PlusElement: {
        prototype: HTMLRuxIconFilter9PlusElement;
        new (): HTMLRuxIconFilter9PlusElement;
    };
    interface HTMLRuxIconFilterBAndWElement extends Components.RuxIconFilterBAndW, HTMLStencilElement {
    }
    var HTMLRuxIconFilterBAndWElement: {
        prototype: HTMLRuxIconFilterBAndWElement;
        new (): HTMLRuxIconFilterBAndWElement;
    };
    interface HTMLRuxIconFilterCenterFocusElement extends Components.RuxIconFilterCenterFocus, HTMLStencilElement {
    }
    var HTMLRuxIconFilterCenterFocusElement: {
        prototype: HTMLRuxIconFilterCenterFocusElement;
        new (): HTMLRuxIconFilterCenterFocusElement;
    };
    interface HTMLRuxIconFilterDramaElement extends Components.RuxIconFilterDrama, HTMLStencilElement {
    }
    var HTMLRuxIconFilterDramaElement: {
        prototype: HTMLRuxIconFilterDramaElement;
        new (): HTMLRuxIconFilterDramaElement;
    };
    interface HTMLRuxIconFilterFramesElement extends Components.RuxIconFilterFrames, HTMLStencilElement {
    }
    var HTMLRuxIconFilterFramesElement: {
        prototype: HTMLRuxIconFilterFramesElement;
        new (): HTMLRuxIconFilterFramesElement;
    };
    interface HTMLRuxIconFilterHdrElement extends Components.RuxIconFilterHdr, HTMLStencilElement {
    }
    var HTMLRuxIconFilterHdrElement: {
        prototype: HTMLRuxIconFilterHdrElement;
        new (): HTMLRuxIconFilterHdrElement;
    };
    interface HTMLRuxIconFilterListElement extends Components.RuxIconFilterList, HTMLStencilElement {
    }
    var HTMLRuxIconFilterListElement: {
        prototype: HTMLRuxIconFilterListElement;
        new (): HTMLRuxIconFilterListElement;
    };
    interface HTMLRuxIconFilterNoneElement extends Components.RuxIconFilterNone, HTMLStencilElement {
    }
    var HTMLRuxIconFilterNoneElement: {
        prototype: HTMLRuxIconFilterNoneElement;
        new (): HTMLRuxIconFilterNoneElement;
    };
    interface HTMLRuxIconFilterTiltShiftElement extends Components.RuxIconFilterTiltShift, HTMLStencilElement {
    }
    var HTMLRuxIconFilterTiltShiftElement: {
        prototype: HTMLRuxIconFilterTiltShiftElement;
        new (): HTMLRuxIconFilterTiltShiftElement;
    };
    interface HTMLRuxIconFilterVintageElement extends Components.RuxIconFilterVintage, HTMLStencilElement {
    }
    var HTMLRuxIconFilterVintageElement: {
        prototype: HTMLRuxIconFilterVintageElement;
        new (): HTMLRuxIconFilterVintageElement;
    };
    interface HTMLRuxIconFindInPageElement extends Components.RuxIconFindInPage, HTMLStencilElement {
    }
    var HTMLRuxIconFindInPageElement: {
        prototype: HTMLRuxIconFindInPageElement;
        new (): HTMLRuxIconFindInPageElement;
    };
    interface HTMLRuxIconFindReplaceElement extends Components.RuxIconFindReplace, HTMLStencilElement {
    }
    var HTMLRuxIconFindReplaceElement: {
        prototype: HTMLRuxIconFindReplaceElement;
        new (): HTMLRuxIconFindReplaceElement;
    };
    interface HTMLRuxIconFingerprintElement extends Components.RuxIconFingerprint, HTMLStencilElement {
    }
    var HTMLRuxIconFingerprintElement: {
        prototype: HTMLRuxIconFingerprintElement;
        new (): HTMLRuxIconFingerprintElement;
    };
    interface HTMLRuxIconFirstPageElement extends Components.RuxIconFirstPage, HTMLStencilElement {
    }
    var HTMLRuxIconFirstPageElement: {
        prototype: HTMLRuxIconFirstPageElement;
        new (): HTMLRuxIconFirstPageElement;
    };
    interface HTMLRuxIconFitnessCenterElement extends Components.RuxIconFitnessCenter, HTMLStencilElement {
    }
    var HTMLRuxIconFitnessCenterElement: {
        prototype: HTMLRuxIconFitnessCenterElement;
        new (): HTMLRuxIconFitnessCenterElement;
    };
    interface HTMLRuxIconFlagElement extends Components.RuxIconFlag, HTMLStencilElement {
    }
    var HTMLRuxIconFlagElement: {
        prototype: HTMLRuxIconFlagElement;
        new (): HTMLRuxIconFlagElement;
    };
    interface HTMLRuxIconFlareElement extends Components.RuxIconFlare, HTMLStencilElement {
    }
    var HTMLRuxIconFlareElement: {
        prototype: HTMLRuxIconFlareElement;
        new (): HTMLRuxIconFlareElement;
    };
    interface HTMLRuxIconFlashAutoElement extends Components.RuxIconFlashAuto, HTMLStencilElement {
    }
    var HTMLRuxIconFlashAutoElement: {
        prototype: HTMLRuxIconFlashAutoElement;
        new (): HTMLRuxIconFlashAutoElement;
    };
    interface HTMLRuxIconFlashOffElement extends Components.RuxIconFlashOff, HTMLStencilElement {
    }
    var HTMLRuxIconFlashOffElement: {
        prototype: HTMLRuxIconFlashOffElement;
        new (): HTMLRuxIconFlashOffElement;
    };
    interface HTMLRuxIconFlashOnElement extends Components.RuxIconFlashOn, HTMLStencilElement {
    }
    var HTMLRuxIconFlashOnElement: {
        prototype: HTMLRuxIconFlashOnElement;
        new (): HTMLRuxIconFlashOnElement;
    };
    interface HTMLRuxIconFlightElement extends Components.RuxIconFlight, HTMLStencilElement {
    }
    var HTMLRuxIconFlightElement: {
        prototype: HTMLRuxIconFlightElement;
        new (): HTMLRuxIconFlightElement;
    };
    interface HTMLRuxIconFlightLandElement extends Components.RuxIconFlightLand, HTMLStencilElement {
    }
    var HTMLRuxIconFlightLandElement: {
        prototype: HTMLRuxIconFlightLandElement;
        new (): HTMLRuxIconFlightLandElement;
    };
    interface HTMLRuxIconFlightTakeoffElement extends Components.RuxIconFlightTakeoff, HTMLStencilElement {
    }
    var HTMLRuxIconFlightTakeoffElement: {
        prototype: HTMLRuxIconFlightTakeoffElement;
        new (): HTMLRuxIconFlightTakeoffElement;
    };
    interface HTMLRuxIconFlipElement extends Components.RuxIconFlip, HTMLStencilElement {
    }
    var HTMLRuxIconFlipElement: {
        prototype: HTMLRuxIconFlipElement;
        new (): HTMLRuxIconFlipElement;
    };
    interface HTMLRuxIconFlipToBackElement extends Components.RuxIconFlipToBack, HTMLStencilElement {
    }
    var HTMLRuxIconFlipToBackElement: {
        prototype: HTMLRuxIconFlipToBackElement;
        new (): HTMLRuxIconFlipToBackElement;
    };
    interface HTMLRuxIconFlipToFrontElement extends Components.RuxIconFlipToFront, HTMLStencilElement {
    }
    var HTMLRuxIconFlipToFrontElement: {
        prototype: HTMLRuxIconFlipToFrontElement;
        new (): HTMLRuxIconFlipToFrontElement;
    };
    interface HTMLRuxIconFolderElement extends Components.RuxIconFolder, HTMLStencilElement {
    }
    var HTMLRuxIconFolderElement: {
        prototype: HTMLRuxIconFolderElement;
        new (): HTMLRuxIconFolderElement;
    };
    interface HTMLRuxIconFolderOpenElement extends Components.RuxIconFolderOpen, HTMLStencilElement {
    }
    var HTMLRuxIconFolderOpenElement: {
        prototype: HTMLRuxIconFolderOpenElement;
        new (): HTMLRuxIconFolderOpenElement;
    };
    interface HTMLRuxIconFolderSharedElement extends Components.RuxIconFolderShared, HTMLStencilElement {
    }
    var HTMLRuxIconFolderSharedElement: {
        prototype: HTMLRuxIconFolderSharedElement;
        new (): HTMLRuxIconFolderSharedElement;
    };
    interface HTMLRuxIconFolderSpecialElement extends Components.RuxIconFolderSpecial, HTMLStencilElement {
    }
    var HTMLRuxIconFolderSpecialElement: {
        prototype: HTMLRuxIconFolderSpecialElement;
        new (): HTMLRuxIconFolderSpecialElement;
    };
    interface HTMLRuxIconFontDownloadElement extends Components.RuxIconFontDownload, HTMLStencilElement {
    }
    var HTMLRuxIconFontDownloadElement: {
        prototype: HTMLRuxIconFontDownloadElement;
        new (): HTMLRuxIconFontDownloadElement;
    };
    interface HTMLRuxIconFormatAlignCenterElement extends Components.RuxIconFormatAlignCenter, HTMLStencilElement {
    }
    var HTMLRuxIconFormatAlignCenterElement: {
        prototype: HTMLRuxIconFormatAlignCenterElement;
        new (): HTMLRuxIconFormatAlignCenterElement;
    };
    interface HTMLRuxIconFormatAlignJustifyElement extends Components.RuxIconFormatAlignJustify, HTMLStencilElement {
    }
    var HTMLRuxIconFormatAlignJustifyElement: {
        prototype: HTMLRuxIconFormatAlignJustifyElement;
        new (): HTMLRuxIconFormatAlignJustifyElement;
    };
    interface HTMLRuxIconFormatAlignLeftElement extends Components.RuxIconFormatAlignLeft, HTMLStencilElement {
    }
    var HTMLRuxIconFormatAlignLeftElement: {
        prototype: HTMLRuxIconFormatAlignLeftElement;
        new (): HTMLRuxIconFormatAlignLeftElement;
    };
    interface HTMLRuxIconFormatAlignRightElement extends Components.RuxIconFormatAlignRight, HTMLStencilElement {
    }
    var HTMLRuxIconFormatAlignRightElement: {
        prototype: HTMLRuxIconFormatAlignRightElement;
        new (): HTMLRuxIconFormatAlignRightElement;
    };
    interface HTMLRuxIconFormatBoldElement extends Components.RuxIconFormatBold, HTMLStencilElement {
    }
    var HTMLRuxIconFormatBoldElement: {
        prototype: HTMLRuxIconFormatBoldElement;
        new (): HTMLRuxIconFormatBoldElement;
    };
    interface HTMLRuxIconFormatClearElement extends Components.RuxIconFormatClear, HTMLStencilElement {
    }
    var HTMLRuxIconFormatClearElement: {
        prototype: HTMLRuxIconFormatClearElement;
        new (): HTMLRuxIconFormatClearElement;
    };
    interface HTMLRuxIconFormatColorFillElement extends Components.RuxIconFormatColorFill, HTMLStencilElement {
    }
    var HTMLRuxIconFormatColorFillElement: {
        prototype: HTMLRuxIconFormatColorFillElement;
        new (): HTMLRuxIconFormatColorFillElement;
    };
    interface HTMLRuxIconFormatColorResetElement extends Components.RuxIconFormatColorReset, HTMLStencilElement {
    }
    var HTMLRuxIconFormatColorResetElement: {
        prototype: HTMLRuxIconFormatColorResetElement;
        new (): HTMLRuxIconFormatColorResetElement;
    };
    interface HTMLRuxIconFormatColorTextElement extends Components.RuxIconFormatColorText, HTMLStencilElement {
    }
    var HTMLRuxIconFormatColorTextElement: {
        prototype: HTMLRuxIconFormatColorTextElement;
        new (): HTMLRuxIconFormatColorTextElement;
    };
    interface HTMLRuxIconFormatIndentDecreaseElement extends Components.RuxIconFormatIndentDecrease, HTMLStencilElement {
    }
    var HTMLRuxIconFormatIndentDecreaseElement: {
        prototype: HTMLRuxIconFormatIndentDecreaseElement;
        new (): HTMLRuxIconFormatIndentDecreaseElement;
    };
    interface HTMLRuxIconFormatIndentIncreaseElement extends Components.RuxIconFormatIndentIncrease, HTMLStencilElement {
    }
    var HTMLRuxIconFormatIndentIncreaseElement: {
        prototype: HTMLRuxIconFormatIndentIncreaseElement;
        new (): HTMLRuxIconFormatIndentIncreaseElement;
    };
    interface HTMLRuxIconFormatItalicElement extends Components.RuxIconFormatItalic, HTMLStencilElement {
    }
    var HTMLRuxIconFormatItalicElement: {
        prototype: HTMLRuxIconFormatItalicElement;
        new (): HTMLRuxIconFormatItalicElement;
    };
    interface HTMLRuxIconFormatLineSpacingElement extends Components.RuxIconFormatLineSpacing, HTMLStencilElement {
    }
    var HTMLRuxIconFormatLineSpacingElement: {
        prototype: HTMLRuxIconFormatLineSpacingElement;
        new (): HTMLRuxIconFormatLineSpacingElement;
    };
    interface HTMLRuxIconFormatListBulletedElement extends Components.RuxIconFormatListBulleted, HTMLStencilElement {
    }
    var HTMLRuxIconFormatListBulletedElement: {
        prototype: HTMLRuxIconFormatListBulletedElement;
        new (): HTMLRuxIconFormatListBulletedElement;
    };
    interface HTMLRuxIconFormatListNumberedElement extends Components.RuxIconFormatListNumbered, HTMLStencilElement {
    }
    var HTMLRuxIconFormatListNumberedElement: {
        prototype: HTMLRuxIconFormatListNumberedElement;
        new (): HTMLRuxIconFormatListNumberedElement;
    };
    interface HTMLRuxIconFormatListNumberedRtlElement extends Components.RuxIconFormatListNumberedRtl, HTMLStencilElement {
    }
    var HTMLRuxIconFormatListNumberedRtlElement: {
        prototype: HTMLRuxIconFormatListNumberedRtlElement;
        new (): HTMLRuxIconFormatListNumberedRtlElement;
    };
    interface HTMLRuxIconFormatPaintElement extends Components.RuxIconFormatPaint, HTMLStencilElement {
    }
    var HTMLRuxIconFormatPaintElement: {
        prototype: HTMLRuxIconFormatPaintElement;
        new (): HTMLRuxIconFormatPaintElement;
    };
    interface HTMLRuxIconFormatQuoteElement extends Components.RuxIconFormatQuote, HTMLStencilElement {
    }
    var HTMLRuxIconFormatQuoteElement: {
        prototype: HTMLRuxIconFormatQuoteElement;
        new (): HTMLRuxIconFormatQuoteElement;
    };
    interface HTMLRuxIconFormatShapesElement extends Components.RuxIconFormatShapes, HTMLStencilElement {
    }
    var HTMLRuxIconFormatShapesElement: {
        prototype: HTMLRuxIconFormatShapesElement;
        new (): HTMLRuxIconFormatShapesElement;
    };
    interface HTMLRuxIconFormatSizeElement extends Components.RuxIconFormatSize, HTMLStencilElement {
    }
    var HTMLRuxIconFormatSizeElement: {
        prototype: HTMLRuxIconFormatSizeElement;
        new (): HTMLRuxIconFormatSizeElement;
    };
    interface HTMLRuxIconFormatStrikethroughElement extends Components.RuxIconFormatStrikethrough, HTMLStencilElement {
    }
    var HTMLRuxIconFormatStrikethroughElement: {
        prototype: HTMLRuxIconFormatStrikethroughElement;
        new (): HTMLRuxIconFormatStrikethroughElement;
    };
    interface HTMLRuxIconFormatTextdirectionLToRElement extends Components.RuxIconFormatTextdirectionLToR, HTMLStencilElement {
    }
    var HTMLRuxIconFormatTextdirectionLToRElement: {
        prototype: HTMLRuxIconFormatTextdirectionLToRElement;
        new (): HTMLRuxIconFormatTextdirectionLToRElement;
    };
    interface HTMLRuxIconFormatTextdirectionRToLElement extends Components.RuxIconFormatTextdirectionRToL, HTMLStencilElement {
    }
    var HTMLRuxIconFormatTextdirectionRToLElement: {
        prototype: HTMLRuxIconFormatTextdirectionRToLElement;
        new (): HTMLRuxIconFormatTextdirectionRToLElement;
    };
    interface HTMLRuxIconFormatUnderlinedElement extends Components.RuxIconFormatUnderlined, HTMLStencilElement {
    }
    var HTMLRuxIconFormatUnderlinedElement: {
        prototype: HTMLRuxIconFormatUnderlinedElement;
        new (): HTMLRuxIconFormatUnderlinedElement;
    };
    interface HTMLRuxIconForumElement extends Components.RuxIconForum, HTMLStencilElement {
    }
    var HTMLRuxIconForumElement: {
        prototype: HTMLRuxIconForumElement;
        new (): HTMLRuxIconForumElement;
    };
    interface HTMLRuxIconForwardElement extends Components.RuxIconForward, HTMLStencilElement {
    }
    var HTMLRuxIconForwardElement: {
        prototype: HTMLRuxIconForwardElement;
        new (): HTMLRuxIconForwardElement;
    };
    interface HTMLRuxIconForward10Element extends Components.RuxIconForward10, HTMLStencilElement {
    }
    var HTMLRuxIconForward10Element: {
        prototype: HTMLRuxIconForward10Element;
        new (): HTMLRuxIconForward10Element;
    };
    interface HTMLRuxIconForward30Element extends Components.RuxIconForward30, HTMLStencilElement {
    }
    var HTMLRuxIconForward30Element: {
        prototype: HTMLRuxIconForward30Element;
        new (): HTMLRuxIconForward30Element;
    };
    interface HTMLRuxIconForward5Element extends Components.RuxIconForward5, HTMLStencilElement {
    }
    var HTMLRuxIconForward5Element: {
        prototype: HTMLRuxIconForward5Element;
        new (): HTMLRuxIconForward5Element;
    };
    interface HTMLRuxIconFreeBreakfastElement extends Components.RuxIconFreeBreakfast, HTMLStencilElement {
    }
    var HTMLRuxIconFreeBreakfastElement: {
        prototype: HTMLRuxIconFreeBreakfastElement;
        new (): HTMLRuxIconFreeBreakfastElement;
    };
    interface HTMLRuxIconFullscreenElement extends Components.RuxIconFullscreen, HTMLStencilElement {
    }
    var HTMLRuxIconFullscreenElement: {
        prototype: HTMLRuxIconFullscreenElement;
        new (): HTMLRuxIconFullscreenElement;
    };
    interface HTMLRuxIconFullscreenExitElement extends Components.RuxIconFullscreenExit, HTMLStencilElement {
    }
    var HTMLRuxIconFullscreenExitElement: {
        prototype: HTMLRuxIconFullscreenExitElement;
        new (): HTMLRuxIconFullscreenExitElement;
    };
    interface HTMLRuxIconFunctionsElement extends Components.RuxIconFunctions, HTMLStencilElement {
    }
    var HTMLRuxIconFunctionsElement: {
        prototype: HTMLRuxIconFunctionsElement;
        new (): HTMLRuxIconFunctionsElement;
    };
    interface HTMLRuxIconGTranslateElement extends Components.RuxIconGTranslate, HTMLStencilElement {
    }
    var HTMLRuxIconGTranslateElement: {
        prototype: HTMLRuxIconGTranslateElement;
        new (): HTMLRuxIconGTranslateElement;
    };
    interface HTMLRuxIconGamepadElement extends Components.RuxIconGamepad, HTMLStencilElement {
    }
    var HTMLRuxIconGamepadElement: {
        prototype: HTMLRuxIconGamepadElement;
        new (): HTMLRuxIconGamepadElement;
    };
    interface HTMLRuxIconGamesElement extends Components.RuxIconGames, HTMLStencilElement {
    }
    var HTMLRuxIconGamesElement: {
        prototype: HTMLRuxIconGamesElement;
        new (): HTMLRuxIconGamesElement;
    };
    interface HTMLRuxIconGavelElement extends Components.RuxIconGavel, HTMLStencilElement {
    }
    var HTMLRuxIconGavelElement: {
        prototype: HTMLRuxIconGavelElement;
        new (): HTMLRuxIconGavelElement;
    };
    interface HTMLRuxIconGestureElement extends Components.RuxIconGesture, HTMLStencilElement {
    }
    var HTMLRuxIconGestureElement: {
        prototype: HTMLRuxIconGestureElement;
        new (): HTMLRuxIconGestureElement;
    };
    interface HTMLRuxIconGetAppElement extends Components.RuxIconGetApp, HTMLStencilElement {
    }
    var HTMLRuxIconGetAppElement: {
        prototype: HTMLRuxIconGetAppElement;
        new (): HTMLRuxIconGetAppElement;
    };
    interface HTMLRuxIconGifElement extends Components.RuxIconGif, HTMLStencilElement {
    }
    var HTMLRuxIconGifElement: {
        prototype: HTMLRuxIconGifElement;
        new (): HTMLRuxIconGifElement;
    };
    interface HTMLRuxIconGolfCourseElement extends Components.RuxIconGolfCourse, HTMLStencilElement {
    }
    var HTMLRuxIconGolfCourseElement: {
        prototype: HTMLRuxIconGolfCourseElement;
        new (): HTMLRuxIconGolfCourseElement;
    };
    interface HTMLRuxIconGpsFixedElement extends Components.RuxIconGpsFixed, HTMLStencilElement {
    }
    var HTMLRuxIconGpsFixedElement: {
        prototype: HTMLRuxIconGpsFixedElement;
        new (): HTMLRuxIconGpsFixedElement;
    };
    interface HTMLRuxIconGpsNotFixedElement extends Components.RuxIconGpsNotFixed, HTMLStencilElement {
    }
    var HTMLRuxIconGpsNotFixedElement: {
        prototype: HTMLRuxIconGpsNotFixedElement;
        new (): HTMLRuxIconGpsNotFixedElement;
    };
    interface HTMLRuxIconGpsOffElement extends Components.RuxIconGpsOff, HTMLStencilElement {
    }
    var HTMLRuxIconGpsOffElement: {
        prototype: HTMLRuxIconGpsOffElement;
        new (): HTMLRuxIconGpsOffElement;
    };
    interface HTMLRuxIconGradeElement extends Components.RuxIconGrade, HTMLStencilElement {
    }
    var HTMLRuxIconGradeElement: {
        prototype: HTMLRuxIconGradeElement;
        new (): HTMLRuxIconGradeElement;
    };
    interface HTMLRuxIconGradientElement extends Components.RuxIconGradient, HTMLStencilElement {
    }
    var HTMLRuxIconGradientElement: {
        prototype: HTMLRuxIconGradientElement;
        new (): HTMLRuxIconGradientElement;
    };
    interface HTMLRuxIconGrainElement extends Components.RuxIconGrain, HTMLStencilElement {
    }
    var HTMLRuxIconGrainElement: {
        prototype: HTMLRuxIconGrainElement;
        new (): HTMLRuxIconGrainElement;
    };
    interface HTMLRuxIconGraphicEqElement extends Components.RuxIconGraphicEq, HTMLStencilElement {
    }
    var HTMLRuxIconGraphicEqElement: {
        prototype: HTMLRuxIconGraphicEqElement;
        new (): HTMLRuxIconGraphicEqElement;
    };
    interface HTMLRuxIconGridOffElement extends Components.RuxIconGridOff, HTMLStencilElement {
    }
    var HTMLRuxIconGridOffElement: {
        prototype: HTMLRuxIconGridOffElement;
        new (): HTMLRuxIconGridOffElement;
    };
    interface HTMLRuxIconGridOnElement extends Components.RuxIconGridOn, HTMLStencilElement {
    }
    var HTMLRuxIconGridOnElement: {
        prototype: HTMLRuxIconGridOnElement;
        new (): HTMLRuxIconGridOnElement;
    };
    interface HTMLRuxIconGroupElement extends Components.RuxIconGroup, HTMLStencilElement {
    }
    var HTMLRuxIconGroupElement: {
        prototype: HTMLRuxIconGroupElement;
        new (): HTMLRuxIconGroupElement;
    };
    interface HTMLRuxIconGroupAddElement extends Components.RuxIconGroupAdd, HTMLStencilElement {
    }
    var HTMLRuxIconGroupAddElement: {
        prototype: HTMLRuxIconGroupAddElement;
        new (): HTMLRuxIconGroupAddElement;
    };
    interface HTMLRuxIconGroupWorkElement extends Components.RuxIconGroupWork, HTMLStencilElement {
    }
    var HTMLRuxIconGroupWorkElement: {
        prototype: HTMLRuxIconGroupWorkElement;
        new (): HTMLRuxIconGroupWorkElement;
    };
    interface HTMLRuxIconHdElement extends Components.RuxIconHd, HTMLStencilElement {
    }
    var HTMLRuxIconHdElement: {
        prototype: HTMLRuxIconHdElement;
        new (): HTMLRuxIconHdElement;
    };
    interface HTMLRuxIconHdrOffElement extends Components.RuxIconHdrOff, HTMLStencilElement {
    }
    var HTMLRuxIconHdrOffElement: {
        prototype: HTMLRuxIconHdrOffElement;
        new (): HTMLRuxIconHdrOffElement;
    };
    interface HTMLRuxIconHdrOnElement extends Components.RuxIconHdrOn, HTMLStencilElement {
    }
    var HTMLRuxIconHdrOnElement: {
        prototype: HTMLRuxIconHdrOnElement;
        new (): HTMLRuxIconHdrOnElement;
    };
    interface HTMLRuxIconHdrStrongElement extends Components.RuxIconHdrStrong, HTMLStencilElement {
    }
    var HTMLRuxIconHdrStrongElement: {
        prototype: HTMLRuxIconHdrStrongElement;
        new (): HTMLRuxIconHdrStrongElement;
    };
    interface HTMLRuxIconHdrWeakElement extends Components.RuxIconHdrWeak, HTMLStencilElement {
    }
    var HTMLRuxIconHdrWeakElement: {
        prototype: HTMLRuxIconHdrWeakElement;
        new (): HTMLRuxIconHdrWeakElement;
    };
    interface HTMLRuxIconHeadsetElement extends Components.RuxIconHeadset, HTMLStencilElement {
    }
    var HTMLRuxIconHeadsetElement: {
        prototype: HTMLRuxIconHeadsetElement;
        new (): HTMLRuxIconHeadsetElement;
    };
    interface HTMLRuxIconHeadsetMicElement extends Components.RuxIconHeadsetMic, HTMLStencilElement {
    }
    var HTMLRuxIconHeadsetMicElement: {
        prototype: HTMLRuxIconHeadsetMicElement;
        new (): HTMLRuxIconHeadsetMicElement;
    };
    interface HTMLRuxIconHealingElement extends Components.RuxIconHealing, HTMLStencilElement {
    }
    var HTMLRuxIconHealingElement: {
        prototype: HTMLRuxIconHealingElement;
        new (): HTMLRuxIconHealingElement;
    };
    interface HTMLRuxIconHearingElement extends Components.RuxIconHearing, HTMLStencilElement {
    }
    var HTMLRuxIconHearingElement: {
        prototype: HTMLRuxIconHearingElement;
        new (): HTMLRuxIconHearingElement;
    };
    interface HTMLRuxIconHelpElement extends Components.RuxIconHelp, HTMLStencilElement {
    }
    var HTMLRuxIconHelpElement: {
        prototype: HTMLRuxIconHelpElement;
        new (): HTMLRuxIconHelpElement;
    };
    interface HTMLRuxIconHelpOutlineElement extends Components.RuxIconHelpOutline, HTMLStencilElement {
    }
    var HTMLRuxIconHelpOutlineElement: {
        prototype: HTMLRuxIconHelpOutlineElement;
        new (): HTMLRuxIconHelpOutlineElement;
    };
    interface HTMLRuxIconHighQualityElement extends Components.RuxIconHighQuality, HTMLStencilElement {
    }
    var HTMLRuxIconHighQualityElement: {
        prototype: HTMLRuxIconHighQualityElement;
        new (): HTMLRuxIconHighQualityElement;
    };
    interface HTMLRuxIconHighlightElement extends Components.RuxIconHighlight, HTMLStencilElement {
    }
    var HTMLRuxIconHighlightElement: {
        prototype: HTMLRuxIconHighlightElement;
        new (): HTMLRuxIconHighlightElement;
    };
    interface HTMLRuxIconHighlightOffElement extends Components.RuxIconHighlightOff, HTMLStencilElement {
    }
    var HTMLRuxIconHighlightOffElement: {
        prototype: HTMLRuxIconHighlightOffElement;
        new (): HTMLRuxIconHighlightOffElement;
    };
    interface HTMLRuxIconHistoryElement extends Components.RuxIconHistory, HTMLStencilElement {
    }
    var HTMLRuxIconHistoryElement: {
        prototype: HTMLRuxIconHistoryElement;
        new (): HTMLRuxIconHistoryElement;
    };
    interface HTMLRuxIconHomeElement extends Components.RuxIconHome, HTMLStencilElement {
    }
    var HTMLRuxIconHomeElement: {
        prototype: HTMLRuxIconHomeElement;
        new (): HTMLRuxIconHomeElement;
    };
    interface HTMLRuxIconHorizontalSplitElement extends Components.RuxIconHorizontalSplit, HTMLStencilElement {
    }
    var HTMLRuxIconHorizontalSplitElement: {
        prototype: HTMLRuxIconHorizontalSplitElement;
        new (): HTMLRuxIconHorizontalSplitElement;
    };
    interface HTMLRuxIconHotTubElement extends Components.RuxIconHotTub, HTMLStencilElement {
    }
    var HTMLRuxIconHotTubElement: {
        prototype: HTMLRuxIconHotTubElement;
        new (): HTMLRuxIconHotTubElement;
    };
    interface HTMLRuxIconHotelElement extends Components.RuxIconHotel, HTMLStencilElement {
    }
    var HTMLRuxIconHotelElement: {
        prototype: HTMLRuxIconHotelElement;
        new (): HTMLRuxIconHotelElement;
    };
    interface HTMLRuxIconHourglassEmptyElement extends Components.RuxIconHourglassEmpty, HTMLStencilElement {
    }
    var HTMLRuxIconHourglassEmptyElement: {
        prototype: HTMLRuxIconHourglassEmptyElement;
        new (): HTMLRuxIconHourglassEmptyElement;
    };
    interface HTMLRuxIconHourglassFullElement extends Components.RuxIconHourglassFull, HTMLStencilElement {
    }
    var HTMLRuxIconHourglassFullElement: {
        prototype: HTMLRuxIconHourglassFullElement;
        new (): HTMLRuxIconHourglassFullElement;
    };
    interface HTMLRuxIconHowToRegElement extends Components.RuxIconHowToReg, HTMLStencilElement {
    }
    var HTMLRuxIconHowToRegElement: {
        prototype: HTMLRuxIconHowToRegElement;
        new (): HTMLRuxIconHowToRegElement;
    };
    interface HTMLRuxIconHowToVoteElement extends Components.RuxIconHowToVote, HTMLStencilElement {
    }
    var HTMLRuxIconHowToVoteElement: {
        prototype: HTMLRuxIconHowToVoteElement;
        new (): HTMLRuxIconHowToVoteElement;
    };
    interface HTMLRuxIconHttpElement extends Components.RuxIconHttp, HTMLStencilElement {
    }
    var HTMLRuxIconHttpElement: {
        prototype: HTMLRuxIconHttpElement;
        new (): HTMLRuxIconHttpElement;
    };
    interface HTMLRuxIconHttpsElement extends Components.RuxIconHttps, HTMLStencilElement {
    }
    var HTMLRuxIconHttpsElement: {
        prototype: HTMLRuxIconHttpsElement;
        new (): HTMLRuxIconHttpsElement;
    };
    interface HTMLRuxIconImageElement extends Components.RuxIconImage, HTMLStencilElement {
    }
    var HTMLRuxIconImageElement: {
        prototype: HTMLRuxIconImageElement;
        new (): HTMLRuxIconImageElement;
    };
    interface HTMLRuxIconImageAspectRatioElement extends Components.RuxIconImageAspectRatio, HTMLStencilElement {
    }
    var HTMLRuxIconImageAspectRatioElement: {
        prototype: HTMLRuxIconImageAspectRatioElement;
        new (): HTMLRuxIconImageAspectRatioElement;
    };
    interface HTMLRuxIconImageSearchElement extends Components.RuxIconImageSearch, HTMLStencilElement {
    }
    var HTMLRuxIconImageSearchElement: {
        prototype: HTMLRuxIconImageSearchElement;
        new (): HTMLRuxIconImageSearchElement;
    };
    interface HTMLRuxIconImportContactsElement extends Components.RuxIconImportContacts, HTMLStencilElement {
    }
    var HTMLRuxIconImportContactsElement: {
        prototype: HTMLRuxIconImportContactsElement;
        new (): HTMLRuxIconImportContactsElement;
    };
    interface HTMLRuxIconImportExportElement extends Components.RuxIconImportExport, HTMLStencilElement {
    }
    var HTMLRuxIconImportExportElement: {
        prototype: HTMLRuxIconImportExportElement;
        new (): HTMLRuxIconImportExportElement;
    };
    interface HTMLRuxIconImportantDevicesElement extends Components.RuxIconImportantDevices, HTMLStencilElement {
    }
    var HTMLRuxIconImportantDevicesElement: {
        prototype: HTMLRuxIconImportantDevicesElement;
        new (): HTMLRuxIconImportantDevicesElement;
    };
    interface HTMLRuxIconInboxElement extends Components.RuxIconInbox, HTMLStencilElement {
    }
    var HTMLRuxIconInboxElement: {
        prototype: HTMLRuxIconInboxElement;
        new (): HTMLRuxIconInboxElement;
    };
    interface HTMLRuxIconIndeterminateCheckBoxElement extends Components.RuxIconIndeterminateCheckBox, HTMLStencilElement {
    }
    var HTMLRuxIconIndeterminateCheckBoxElement: {
        prototype: HTMLRuxIconIndeterminateCheckBoxElement;
        new (): HTMLRuxIconIndeterminateCheckBoxElement;
    };
    interface HTMLRuxIconInfoElement extends Components.RuxIconInfo, HTMLStencilElement {
    }
    var HTMLRuxIconInfoElement: {
        prototype: HTMLRuxIconInfoElement;
        new (): HTMLRuxIconInfoElement;
    };
    interface HTMLRuxIconInputElement extends Components.RuxIconInput, HTMLStencilElement {
    }
    var HTMLRuxIconInputElement: {
        prototype: HTMLRuxIconInputElement;
        new (): HTMLRuxIconInputElement;
    };
    interface HTMLRuxIconInsertChartElement extends Components.RuxIconInsertChart, HTMLStencilElement {
    }
    var HTMLRuxIconInsertChartElement: {
        prototype: HTMLRuxIconInsertChartElement;
        new (): HTMLRuxIconInsertChartElement;
    };
    interface HTMLRuxIconInsertChartOutlinedElement extends Components.RuxIconInsertChartOutlined, HTMLStencilElement {
    }
    var HTMLRuxIconInsertChartOutlinedElement: {
        prototype: HTMLRuxIconInsertChartOutlinedElement;
        new (): HTMLRuxIconInsertChartOutlinedElement;
    };
    interface HTMLRuxIconInsertCommentElement extends Components.RuxIconInsertComment, HTMLStencilElement {
    }
    var HTMLRuxIconInsertCommentElement: {
        prototype: HTMLRuxIconInsertCommentElement;
        new (): HTMLRuxIconInsertCommentElement;
    };
    interface HTMLRuxIconInsertDriveFileElement extends Components.RuxIconInsertDriveFile, HTMLStencilElement {
    }
    var HTMLRuxIconInsertDriveFileElement: {
        prototype: HTMLRuxIconInsertDriveFileElement;
        new (): HTMLRuxIconInsertDriveFileElement;
    };
    interface HTMLRuxIconInsertEmoticonElement extends Components.RuxIconInsertEmoticon, HTMLStencilElement {
    }
    var HTMLRuxIconInsertEmoticonElement: {
        prototype: HTMLRuxIconInsertEmoticonElement;
        new (): HTMLRuxIconInsertEmoticonElement;
    };
    interface HTMLRuxIconInsertInvitationElement extends Components.RuxIconInsertInvitation, HTMLStencilElement {
    }
    var HTMLRuxIconInsertInvitationElement: {
        prototype: HTMLRuxIconInsertInvitationElement;
        new (): HTMLRuxIconInsertInvitationElement;
    };
    interface HTMLRuxIconInsertLinkElement extends Components.RuxIconInsertLink, HTMLStencilElement {
    }
    var HTMLRuxIconInsertLinkElement: {
        prototype: HTMLRuxIconInsertLinkElement;
        new (): HTMLRuxIconInsertLinkElement;
    };
    interface HTMLRuxIconInsertPhotoElement extends Components.RuxIconInsertPhoto, HTMLStencilElement {
    }
    var HTMLRuxIconInsertPhotoElement: {
        prototype: HTMLRuxIconInsertPhotoElement;
        new (): HTMLRuxIconInsertPhotoElement;
    };
    interface HTMLRuxIconInvertColorsElement extends Components.RuxIconInvertColors, HTMLStencilElement {
    }
    var HTMLRuxIconInvertColorsElement: {
        prototype: HTMLRuxIconInvertColorsElement;
        new (): HTMLRuxIconInvertColorsElement;
    };
    interface HTMLRuxIconInvertColorsOffElement extends Components.RuxIconInvertColorsOff, HTMLStencilElement {
    }
    var HTMLRuxIconInvertColorsOffElement: {
        prototype: HTMLRuxIconInvertColorsOffElement;
        new (): HTMLRuxIconInvertColorsOffElement;
    };
    interface HTMLRuxIconIsoElement extends Components.RuxIconIso, HTMLStencilElement {
    }
    var HTMLRuxIconIsoElement: {
        prototype: HTMLRuxIconIsoElement;
        new (): HTMLRuxIconIsoElement;
    };
    interface HTMLRuxIconKeyboardElement extends Components.RuxIconKeyboard, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardElement: {
        prototype: HTMLRuxIconKeyboardElement;
        new (): HTMLRuxIconKeyboardElement;
    };
    interface HTMLRuxIconKeyboardArrowDownElement extends Components.RuxIconKeyboardArrowDown, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardArrowDownElement: {
        prototype: HTMLRuxIconKeyboardArrowDownElement;
        new (): HTMLRuxIconKeyboardArrowDownElement;
    };
    interface HTMLRuxIconKeyboardArrowLeftElement extends Components.RuxIconKeyboardArrowLeft, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardArrowLeftElement: {
        prototype: HTMLRuxIconKeyboardArrowLeftElement;
        new (): HTMLRuxIconKeyboardArrowLeftElement;
    };
    interface HTMLRuxIconKeyboardArrowRightElement extends Components.RuxIconKeyboardArrowRight, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardArrowRightElement: {
        prototype: HTMLRuxIconKeyboardArrowRightElement;
        new (): HTMLRuxIconKeyboardArrowRightElement;
    };
    interface HTMLRuxIconKeyboardArrowUpElement extends Components.RuxIconKeyboardArrowUp, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardArrowUpElement: {
        prototype: HTMLRuxIconKeyboardArrowUpElement;
        new (): HTMLRuxIconKeyboardArrowUpElement;
    };
    interface HTMLRuxIconKeyboardBackspaceElement extends Components.RuxIconKeyboardBackspace, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardBackspaceElement: {
        prototype: HTMLRuxIconKeyboardBackspaceElement;
        new (): HTMLRuxIconKeyboardBackspaceElement;
    };
    interface HTMLRuxIconKeyboardCapslockElement extends Components.RuxIconKeyboardCapslock, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardCapslockElement: {
        prototype: HTMLRuxIconKeyboardCapslockElement;
        new (): HTMLRuxIconKeyboardCapslockElement;
    };
    interface HTMLRuxIconKeyboardHideElement extends Components.RuxIconKeyboardHide, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardHideElement: {
        prototype: HTMLRuxIconKeyboardHideElement;
        new (): HTMLRuxIconKeyboardHideElement;
    };
    interface HTMLRuxIconKeyboardReturnElement extends Components.RuxIconKeyboardReturn, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardReturnElement: {
        prototype: HTMLRuxIconKeyboardReturnElement;
        new (): HTMLRuxIconKeyboardReturnElement;
    };
    interface HTMLRuxIconKeyboardTabElement extends Components.RuxIconKeyboardTab, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardTabElement: {
        prototype: HTMLRuxIconKeyboardTabElement;
        new (): HTMLRuxIconKeyboardTabElement;
    };
    interface HTMLRuxIconKeyboardVoiceElement extends Components.RuxIconKeyboardVoice, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardVoiceElement: {
        prototype: HTMLRuxIconKeyboardVoiceElement;
        new (): HTMLRuxIconKeyboardVoiceElement;
    };
    interface HTMLRuxIconKitchenElement extends Components.RuxIconKitchen, HTMLStencilElement {
    }
    var HTMLRuxIconKitchenElement: {
        prototype: HTMLRuxIconKitchenElement;
        new (): HTMLRuxIconKitchenElement;
    };
    interface HTMLRuxIconLabelElement extends Components.RuxIconLabel, HTMLStencilElement {
    }
    var HTMLRuxIconLabelElement: {
        prototype: HTMLRuxIconLabelElement;
        new (): HTMLRuxIconLabelElement;
    };
    interface HTMLRuxIconLabelImportantElement extends Components.RuxIconLabelImportant, HTMLStencilElement {
    }
    var HTMLRuxIconLabelImportantElement: {
        prototype: HTMLRuxIconLabelImportantElement;
        new (): HTMLRuxIconLabelImportantElement;
    };
    interface HTMLRuxIconLabelOffElement extends Components.RuxIconLabelOff, HTMLStencilElement {
    }
    var HTMLRuxIconLabelOffElement: {
        prototype: HTMLRuxIconLabelOffElement;
        new (): HTMLRuxIconLabelOffElement;
    };
    interface HTMLRuxIconLandscapeElement extends Components.RuxIconLandscape, HTMLStencilElement {
    }
    var HTMLRuxIconLandscapeElement: {
        prototype: HTMLRuxIconLandscapeElement;
        new (): HTMLRuxIconLandscapeElement;
    };
    interface HTMLRuxIconLanguageElement extends Components.RuxIconLanguage, HTMLStencilElement {
    }
    var HTMLRuxIconLanguageElement: {
        prototype: HTMLRuxIconLanguageElement;
        new (): HTMLRuxIconLanguageElement;
    };
    interface HTMLRuxIconLaptopElement extends Components.RuxIconLaptop, HTMLStencilElement {
    }
    var HTMLRuxIconLaptopElement: {
        prototype: HTMLRuxIconLaptopElement;
        new (): HTMLRuxIconLaptopElement;
    };
    interface HTMLRuxIconLaptopChromebookElement extends Components.RuxIconLaptopChromebook, HTMLStencilElement {
    }
    var HTMLRuxIconLaptopChromebookElement: {
        prototype: HTMLRuxIconLaptopChromebookElement;
        new (): HTMLRuxIconLaptopChromebookElement;
    };
    interface HTMLRuxIconLaptopMacElement extends Components.RuxIconLaptopMac, HTMLStencilElement {
    }
    var HTMLRuxIconLaptopMacElement: {
        prototype: HTMLRuxIconLaptopMacElement;
        new (): HTMLRuxIconLaptopMacElement;
    };
    interface HTMLRuxIconLaptopWindowsElement extends Components.RuxIconLaptopWindows, HTMLStencilElement {
    }
    var HTMLRuxIconLaptopWindowsElement: {
        prototype: HTMLRuxIconLaptopWindowsElement;
        new (): HTMLRuxIconLaptopWindowsElement;
    };
    interface HTMLRuxIconLastPageElement extends Components.RuxIconLastPage, HTMLStencilElement {
    }
    var HTMLRuxIconLastPageElement: {
        prototype: HTMLRuxIconLastPageElement;
        new (): HTMLRuxIconLastPageElement;
    };
    interface HTMLRuxIconLaunchElement extends Components.RuxIconLaunch, HTMLStencilElement {
    }
    var HTMLRuxIconLaunchElement: {
        prototype: HTMLRuxIconLaunchElement;
        new (): HTMLRuxIconLaunchElement;
    };
    interface HTMLRuxIconLayersElement extends Components.RuxIconLayers, HTMLStencilElement {
    }
    var HTMLRuxIconLayersElement: {
        prototype: HTMLRuxIconLayersElement;
        new (): HTMLRuxIconLayersElement;
    };
    interface HTMLRuxIconLayersClearElement extends Components.RuxIconLayersClear, HTMLStencilElement {
    }
    var HTMLRuxIconLayersClearElement: {
        prototype: HTMLRuxIconLayersClearElement;
        new (): HTMLRuxIconLayersClearElement;
    };
    interface HTMLRuxIconLeakAddElement extends Components.RuxIconLeakAdd, HTMLStencilElement {
    }
    var HTMLRuxIconLeakAddElement: {
        prototype: HTMLRuxIconLeakAddElement;
        new (): HTMLRuxIconLeakAddElement;
    };
    interface HTMLRuxIconLeakRemoveElement extends Components.RuxIconLeakRemove, HTMLStencilElement {
    }
    var HTMLRuxIconLeakRemoveElement: {
        prototype: HTMLRuxIconLeakRemoveElement;
        new (): HTMLRuxIconLeakRemoveElement;
    };
    interface HTMLRuxIconLensElement extends Components.RuxIconLens, HTMLStencilElement {
    }
    var HTMLRuxIconLensElement: {
        prototype: HTMLRuxIconLensElement;
        new (): HTMLRuxIconLensElement;
    };
    interface HTMLRuxIconLibraryAddElement extends Components.RuxIconLibraryAdd, HTMLStencilElement {
    }
    var HTMLRuxIconLibraryAddElement: {
        prototype: HTMLRuxIconLibraryAddElement;
        new (): HTMLRuxIconLibraryAddElement;
    };
    interface HTMLRuxIconLibraryBooksElement extends Components.RuxIconLibraryBooks, HTMLStencilElement {
    }
    var HTMLRuxIconLibraryBooksElement: {
        prototype: HTMLRuxIconLibraryBooksElement;
        new (): HTMLRuxIconLibraryBooksElement;
    };
    interface HTMLRuxIconLibraryMusicElement extends Components.RuxIconLibraryMusic, HTMLStencilElement {
    }
    var HTMLRuxIconLibraryMusicElement: {
        prototype: HTMLRuxIconLibraryMusicElement;
        new (): HTMLRuxIconLibraryMusicElement;
    };
    interface HTMLRuxIconLineStyleElement extends Components.RuxIconLineStyle, HTMLStencilElement {
    }
    var HTMLRuxIconLineStyleElement: {
        prototype: HTMLRuxIconLineStyleElement;
        new (): HTMLRuxIconLineStyleElement;
    };
    interface HTMLRuxIconLineWeightElement extends Components.RuxIconLineWeight, HTMLStencilElement {
    }
    var HTMLRuxIconLineWeightElement: {
        prototype: HTMLRuxIconLineWeightElement;
        new (): HTMLRuxIconLineWeightElement;
    };
    interface HTMLRuxIconLinearScaleElement extends Components.RuxIconLinearScale, HTMLStencilElement {
    }
    var HTMLRuxIconLinearScaleElement: {
        prototype: HTMLRuxIconLinearScaleElement;
        new (): HTMLRuxIconLinearScaleElement;
    };
    interface HTMLRuxIconLinkElement extends Components.RuxIconLink, HTMLStencilElement {
    }
    var HTMLRuxIconLinkElement: {
        prototype: HTMLRuxIconLinkElement;
        new (): HTMLRuxIconLinkElement;
    };
    interface HTMLRuxIconLinkOffElement extends Components.RuxIconLinkOff, HTMLStencilElement {
    }
    var HTMLRuxIconLinkOffElement: {
        prototype: HTMLRuxIconLinkOffElement;
        new (): HTMLRuxIconLinkOffElement;
    };
    interface HTMLRuxIconLinkedCameraElement extends Components.RuxIconLinkedCamera, HTMLStencilElement {
    }
    var HTMLRuxIconLinkedCameraElement: {
        prototype: HTMLRuxIconLinkedCameraElement;
        new (): HTMLRuxIconLinkedCameraElement;
    };
    interface HTMLRuxIconListElement extends Components.RuxIconList, HTMLStencilElement {
    }
    var HTMLRuxIconListElement: {
        prototype: HTMLRuxIconListElement;
        new (): HTMLRuxIconListElement;
    };
    interface HTMLRuxIconListAltElement extends Components.RuxIconListAlt, HTMLStencilElement {
    }
    var HTMLRuxIconListAltElement: {
        prototype: HTMLRuxIconListAltElement;
        new (): HTMLRuxIconListAltElement;
    };
    interface HTMLRuxIconLiveHelpElement extends Components.RuxIconLiveHelp, HTMLStencilElement {
    }
    var HTMLRuxIconLiveHelpElement: {
        prototype: HTMLRuxIconLiveHelpElement;
        new (): HTMLRuxIconLiveHelpElement;
    };
    interface HTMLRuxIconLiveTvElement extends Components.RuxIconLiveTv, HTMLStencilElement {
    }
    var HTMLRuxIconLiveTvElement: {
        prototype: HTMLRuxIconLiveTvElement;
        new (): HTMLRuxIconLiveTvElement;
    };
    interface HTMLRuxIconLocalActivityElement extends Components.RuxIconLocalActivity, HTMLStencilElement {
    }
    var HTMLRuxIconLocalActivityElement: {
        prototype: HTMLRuxIconLocalActivityElement;
        new (): HTMLRuxIconLocalActivityElement;
    };
    interface HTMLRuxIconLocalAirportElement extends Components.RuxIconLocalAirport, HTMLStencilElement {
    }
    var HTMLRuxIconLocalAirportElement: {
        prototype: HTMLRuxIconLocalAirportElement;
        new (): HTMLRuxIconLocalAirportElement;
    };
    interface HTMLRuxIconLocalAtmElement extends Components.RuxIconLocalAtm, HTMLStencilElement {
    }
    var HTMLRuxIconLocalAtmElement: {
        prototype: HTMLRuxIconLocalAtmElement;
        new (): HTMLRuxIconLocalAtmElement;
    };
    interface HTMLRuxIconLocalBarElement extends Components.RuxIconLocalBar, HTMLStencilElement {
    }
    var HTMLRuxIconLocalBarElement: {
        prototype: HTMLRuxIconLocalBarElement;
        new (): HTMLRuxIconLocalBarElement;
    };
    interface HTMLRuxIconLocalCafeElement extends Components.RuxIconLocalCafe, HTMLStencilElement {
    }
    var HTMLRuxIconLocalCafeElement: {
        prototype: HTMLRuxIconLocalCafeElement;
        new (): HTMLRuxIconLocalCafeElement;
    };
    interface HTMLRuxIconLocalConvenienceStoreElement extends Components.RuxIconLocalConvenienceStore, HTMLStencilElement {
    }
    var HTMLRuxIconLocalConvenienceStoreElement: {
        prototype: HTMLRuxIconLocalConvenienceStoreElement;
        new (): HTMLRuxIconLocalConvenienceStoreElement;
    };
    interface HTMLRuxIconLocalDiningElement extends Components.RuxIconLocalDining, HTMLStencilElement {
    }
    var HTMLRuxIconLocalDiningElement: {
        prototype: HTMLRuxIconLocalDiningElement;
        new (): HTMLRuxIconLocalDiningElement;
    };
    interface HTMLRuxIconLocalDrinkElement extends Components.RuxIconLocalDrink, HTMLStencilElement {
    }
    var HTMLRuxIconLocalDrinkElement: {
        prototype: HTMLRuxIconLocalDrinkElement;
        new (): HTMLRuxIconLocalDrinkElement;
    };
    interface HTMLRuxIconLocalGasStationElement extends Components.RuxIconLocalGasStation, HTMLStencilElement {
    }
    var HTMLRuxIconLocalGasStationElement: {
        prototype: HTMLRuxIconLocalGasStationElement;
        new (): HTMLRuxIconLocalGasStationElement;
    };
    interface HTMLRuxIconLocalGroceryStoreElement extends Components.RuxIconLocalGroceryStore, HTMLStencilElement {
    }
    var HTMLRuxIconLocalGroceryStoreElement: {
        prototype: HTMLRuxIconLocalGroceryStoreElement;
        new (): HTMLRuxIconLocalGroceryStoreElement;
    };
    interface HTMLRuxIconLocalHospitalElement extends Components.RuxIconLocalHospital, HTMLStencilElement {
    }
    var HTMLRuxIconLocalHospitalElement: {
        prototype: HTMLRuxIconLocalHospitalElement;
        new (): HTMLRuxIconLocalHospitalElement;
    };
    interface HTMLRuxIconLocalHotelElement extends Components.RuxIconLocalHotel, HTMLStencilElement {
    }
    var HTMLRuxIconLocalHotelElement: {
        prototype: HTMLRuxIconLocalHotelElement;
        new (): HTMLRuxIconLocalHotelElement;
    };
    interface HTMLRuxIconLocalLaundryServiceElement extends Components.RuxIconLocalLaundryService, HTMLStencilElement {
    }
    var HTMLRuxIconLocalLaundryServiceElement: {
        prototype: HTMLRuxIconLocalLaundryServiceElement;
        new (): HTMLRuxIconLocalLaundryServiceElement;
    };
    interface HTMLRuxIconLocalLibraryElement extends Components.RuxIconLocalLibrary, HTMLStencilElement {
    }
    var HTMLRuxIconLocalLibraryElement: {
        prototype: HTMLRuxIconLocalLibraryElement;
        new (): HTMLRuxIconLocalLibraryElement;
    };
    interface HTMLRuxIconLocalMallElement extends Components.RuxIconLocalMall, HTMLStencilElement {
    }
    var HTMLRuxIconLocalMallElement: {
        prototype: HTMLRuxIconLocalMallElement;
        new (): HTMLRuxIconLocalMallElement;
    };
    interface HTMLRuxIconLocalMoviesElement extends Components.RuxIconLocalMovies, HTMLStencilElement {
    }
    var HTMLRuxIconLocalMoviesElement: {
        prototype: HTMLRuxIconLocalMoviesElement;
        new (): HTMLRuxIconLocalMoviesElement;
    };
    interface HTMLRuxIconLocalOfferElement extends Components.RuxIconLocalOffer, HTMLStencilElement {
    }
    var HTMLRuxIconLocalOfferElement: {
        prototype: HTMLRuxIconLocalOfferElement;
        new (): HTMLRuxIconLocalOfferElement;
    };
    interface HTMLRuxIconLocalParkingElement extends Components.RuxIconLocalParking, HTMLStencilElement {
    }
    var HTMLRuxIconLocalParkingElement: {
        prototype: HTMLRuxIconLocalParkingElement;
        new (): HTMLRuxIconLocalParkingElement;
    };
    interface HTMLRuxIconLocalPharmacyElement extends Components.RuxIconLocalPharmacy, HTMLStencilElement {
    }
    var HTMLRuxIconLocalPharmacyElement: {
        prototype: HTMLRuxIconLocalPharmacyElement;
        new (): HTMLRuxIconLocalPharmacyElement;
    };
    interface HTMLRuxIconLocalPhoneElement extends Components.RuxIconLocalPhone, HTMLStencilElement {
    }
    var HTMLRuxIconLocalPhoneElement: {
        prototype: HTMLRuxIconLocalPhoneElement;
        new (): HTMLRuxIconLocalPhoneElement;
    };
    interface HTMLRuxIconLocalPlayElement extends Components.RuxIconLocalPlay, HTMLStencilElement {
    }
    var HTMLRuxIconLocalPlayElement: {
        prototype: HTMLRuxIconLocalPlayElement;
        new (): HTMLRuxIconLocalPlayElement;
    };
    interface HTMLRuxIconLocalPostOfficeElement extends Components.RuxIconLocalPostOffice, HTMLStencilElement {
    }
    var HTMLRuxIconLocalPostOfficeElement: {
        prototype: HTMLRuxIconLocalPostOfficeElement;
        new (): HTMLRuxIconLocalPostOfficeElement;
    };
    interface HTMLRuxIconLocalPrintshopElement extends Components.RuxIconLocalPrintshop, HTMLStencilElement {
    }
    var HTMLRuxIconLocalPrintshopElement: {
        prototype: HTMLRuxIconLocalPrintshopElement;
        new (): HTMLRuxIconLocalPrintshopElement;
    };
    interface HTMLRuxIconLocalSeeElement extends Components.RuxIconLocalSee, HTMLStencilElement {
    }
    var HTMLRuxIconLocalSeeElement: {
        prototype: HTMLRuxIconLocalSeeElement;
        new (): HTMLRuxIconLocalSeeElement;
    };
    interface HTMLRuxIconLocalShippingElement extends Components.RuxIconLocalShipping, HTMLStencilElement {
    }
    var HTMLRuxIconLocalShippingElement: {
        prototype: HTMLRuxIconLocalShippingElement;
        new (): HTMLRuxIconLocalShippingElement;
    };
    interface HTMLRuxIconLocalTaxiElement extends Components.RuxIconLocalTaxi, HTMLStencilElement {
    }
    var HTMLRuxIconLocalTaxiElement: {
        prototype: HTMLRuxIconLocalTaxiElement;
        new (): HTMLRuxIconLocalTaxiElement;
    };
    interface HTMLRuxIconLocationCityElement extends Components.RuxIconLocationCity, HTMLStencilElement {
    }
    var HTMLRuxIconLocationCityElement: {
        prototype: HTMLRuxIconLocationCityElement;
        new (): HTMLRuxIconLocationCityElement;
    };
    interface HTMLRuxIconLocationDisabledElement extends Components.RuxIconLocationDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconLocationDisabledElement: {
        prototype: HTMLRuxIconLocationDisabledElement;
        new (): HTMLRuxIconLocationDisabledElement;
    };
    interface HTMLRuxIconLocationOffElement extends Components.RuxIconLocationOff, HTMLStencilElement {
    }
    var HTMLRuxIconLocationOffElement: {
        prototype: HTMLRuxIconLocationOffElement;
        new (): HTMLRuxIconLocationOffElement;
    };
    interface HTMLRuxIconLocationOnElement extends Components.RuxIconLocationOn, HTMLStencilElement {
    }
    var HTMLRuxIconLocationOnElement: {
        prototype: HTMLRuxIconLocationOnElement;
        new (): HTMLRuxIconLocationOnElement;
    };
    interface HTMLRuxIconLocationSearchingElement extends Components.RuxIconLocationSearching, HTMLStencilElement {
    }
    var HTMLRuxIconLocationSearchingElement: {
        prototype: HTMLRuxIconLocationSearchingElement;
        new (): HTMLRuxIconLocationSearchingElement;
    };
    interface HTMLRuxIconLockElement extends Components.RuxIconLock, HTMLStencilElement {
    }
    var HTMLRuxIconLockElement: {
        prototype: HTMLRuxIconLockElement;
        new (): HTMLRuxIconLockElement;
    };
    interface HTMLRuxIconLockOpenElement extends Components.RuxIconLockOpen, HTMLStencilElement {
    }
    var HTMLRuxIconLockOpenElement: {
        prototype: HTMLRuxIconLockOpenElement;
        new (): HTMLRuxIconLockOpenElement;
    };
    interface HTMLRuxIconLooksElement extends Components.RuxIconLooks, HTMLStencilElement {
    }
    var HTMLRuxIconLooksElement: {
        prototype: HTMLRuxIconLooksElement;
        new (): HTMLRuxIconLooksElement;
    };
    interface HTMLRuxIconLooks1Element extends Components.RuxIconLooks1, HTMLStencilElement {
    }
    var HTMLRuxIconLooks1Element: {
        prototype: HTMLRuxIconLooks1Element;
        new (): HTMLRuxIconLooks1Element;
    };
    interface HTMLRuxIconLooks2Element extends Components.RuxIconLooks2, HTMLStencilElement {
    }
    var HTMLRuxIconLooks2Element: {
        prototype: HTMLRuxIconLooks2Element;
        new (): HTMLRuxIconLooks2Element;
    };
    interface HTMLRuxIconLooks3Element extends Components.RuxIconLooks3, HTMLStencilElement {
    }
    var HTMLRuxIconLooks3Element: {
        prototype: HTMLRuxIconLooks3Element;
        new (): HTMLRuxIconLooks3Element;
    };
    interface HTMLRuxIconLooks4Element extends Components.RuxIconLooks4, HTMLStencilElement {
    }
    var HTMLRuxIconLooks4Element: {
        prototype: HTMLRuxIconLooks4Element;
        new (): HTMLRuxIconLooks4Element;
    };
    interface HTMLRuxIconLooks5Element extends Components.RuxIconLooks5, HTMLStencilElement {
    }
    var HTMLRuxIconLooks5Element: {
        prototype: HTMLRuxIconLooks5Element;
        new (): HTMLRuxIconLooks5Element;
    };
    interface HTMLRuxIconLooks6Element extends Components.RuxIconLooks6, HTMLStencilElement {
    }
    var HTMLRuxIconLooks6Element: {
        prototype: HTMLRuxIconLooks6Element;
        new (): HTMLRuxIconLooks6Element;
    };
    interface HTMLRuxIconLoopElement extends Components.RuxIconLoop, HTMLStencilElement {
    }
    var HTMLRuxIconLoopElement: {
        prototype: HTMLRuxIconLoopElement;
        new (): HTMLRuxIconLoopElement;
    };
    interface HTMLRuxIconLoupeElement extends Components.RuxIconLoupe, HTMLStencilElement {
    }
    var HTMLRuxIconLoupeElement: {
        prototype: HTMLRuxIconLoupeElement;
        new (): HTMLRuxIconLoupeElement;
    };
    interface HTMLRuxIconLowPriorityElement extends Components.RuxIconLowPriority, HTMLStencilElement {
    }
    var HTMLRuxIconLowPriorityElement: {
        prototype: HTMLRuxIconLowPriorityElement;
        new (): HTMLRuxIconLowPriorityElement;
    };
    interface HTMLRuxIconLoyaltyElement extends Components.RuxIconLoyalty, HTMLStencilElement {
    }
    var HTMLRuxIconLoyaltyElement: {
        prototype: HTMLRuxIconLoyaltyElement;
        new (): HTMLRuxIconLoyaltyElement;
    };
    interface HTMLRuxIconMailElement extends Components.RuxIconMail, HTMLStencilElement {
    }
    var HTMLRuxIconMailElement: {
        prototype: HTMLRuxIconMailElement;
        new (): HTMLRuxIconMailElement;
    };
    interface HTMLRuxIconMailOutlineElement extends Components.RuxIconMailOutline, HTMLStencilElement {
    }
    var HTMLRuxIconMailOutlineElement: {
        prototype: HTMLRuxIconMailOutlineElement;
        new (): HTMLRuxIconMailOutlineElement;
    };
    interface HTMLRuxIconMapElement extends Components.RuxIconMap, HTMLStencilElement {
    }
    var HTMLRuxIconMapElement: {
        prototype: HTMLRuxIconMapElement;
        new (): HTMLRuxIconMapElement;
    };
    interface HTMLRuxIconMarkunreadElement extends Components.RuxIconMarkunread, HTMLStencilElement {
    }
    var HTMLRuxIconMarkunreadElement: {
        prototype: HTMLRuxIconMarkunreadElement;
        new (): HTMLRuxIconMarkunreadElement;
    };
    interface HTMLRuxIconMarkunreadMailboxElement extends Components.RuxIconMarkunreadMailbox, HTMLStencilElement {
    }
    var HTMLRuxIconMarkunreadMailboxElement: {
        prototype: HTMLRuxIconMarkunreadMailboxElement;
        new (): HTMLRuxIconMarkunreadMailboxElement;
    };
    interface HTMLRuxIconMaximizeElement extends Components.RuxIconMaximize, HTMLStencilElement {
    }
    var HTMLRuxIconMaximizeElement: {
        prototype: HTMLRuxIconMaximizeElement;
        new (): HTMLRuxIconMaximizeElement;
    };
    interface HTMLRuxIconMeetingRoomElement extends Components.RuxIconMeetingRoom, HTMLStencilElement {
    }
    var HTMLRuxIconMeetingRoomElement: {
        prototype: HTMLRuxIconMeetingRoomElement;
        new (): HTMLRuxIconMeetingRoomElement;
    };
    interface HTMLRuxIconMemoryElement extends Components.RuxIconMemory, HTMLStencilElement {
    }
    var HTMLRuxIconMemoryElement: {
        prototype: HTMLRuxIconMemoryElement;
        new (): HTMLRuxIconMemoryElement;
    };
    interface HTMLRuxIconMenuElement extends Components.RuxIconMenu, HTMLStencilElement {
    }
    var HTMLRuxIconMenuElement: {
        prototype: HTMLRuxIconMenuElement;
        new (): HTMLRuxIconMenuElement;
    };
    interface HTMLRuxIconMergeTypeElement extends Components.RuxIconMergeType, HTMLStencilElement {
    }
    var HTMLRuxIconMergeTypeElement: {
        prototype: HTMLRuxIconMergeTypeElement;
        new (): HTMLRuxIconMergeTypeElement;
    };
    interface HTMLRuxIconMessageElement extends Components.RuxIconMessage, HTMLStencilElement {
    }
    var HTMLRuxIconMessageElement: {
        prototype: HTMLRuxIconMessageElement;
        new (): HTMLRuxIconMessageElement;
    };
    interface HTMLRuxIconMicElement extends Components.RuxIconMic, HTMLStencilElement {
    }
    var HTMLRuxIconMicElement: {
        prototype: HTMLRuxIconMicElement;
        new (): HTMLRuxIconMicElement;
    };
    interface HTMLRuxIconMicNoneElement extends Components.RuxIconMicNone, HTMLStencilElement {
    }
    var HTMLRuxIconMicNoneElement: {
        prototype: HTMLRuxIconMicNoneElement;
        new (): HTMLRuxIconMicNoneElement;
    };
    interface HTMLRuxIconMicOffElement extends Components.RuxIconMicOff, HTMLStencilElement {
    }
    var HTMLRuxIconMicOffElement: {
        prototype: HTMLRuxIconMicOffElement;
        new (): HTMLRuxIconMicOffElement;
    };
    interface HTMLRuxIconMinimizeElement extends Components.RuxIconMinimize, HTMLStencilElement {
    }
    var HTMLRuxIconMinimizeElement: {
        prototype: HTMLRuxIconMinimizeElement;
        new (): HTMLRuxIconMinimizeElement;
    };
    interface HTMLRuxIconMissedVideoCallElement extends Components.RuxIconMissedVideoCall, HTMLStencilElement {
    }
    var HTMLRuxIconMissedVideoCallElement: {
        prototype: HTMLRuxIconMissedVideoCallElement;
        new (): HTMLRuxIconMissedVideoCallElement;
    };
    interface HTMLRuxIconMissionElement extends Components.RuxIconMission, HTMLStencilElement {
    }
    var HTMLRuxIconMissionElement: {
        prototype: HTMLRuxIconMissionElement;
        new (): HTMLRuxIconMissionElement;
    };
    interface HTMLRuxIconMmsElement extends Components.RuxIconMms, HTMLStencilElement {
    }
    var HTMLRuxIconMmsElement: {
        prototype: HTMLRuxIconMmsElement;
        new (): HTMLRuxIconMmsElement;
    };
    interface HTMLRuxIconMobileFriendlyElement extends Components.RuxIconMobileFriendly, HTMLStencilElement {
    }
    var HTMLRuxIconMobileFriendlyElement: {
        prototype: HTMLRuxIconMobileFriendlyElement;
        new (): HTMLRuxIconMobileFriendlyElement;
    };
    interface HTMLRuxIconMobileOffElement extends Components.RuxIconMobileOff, HTMLStencilElement {
    }
    var HTMLRuxIconMobileOffElement: {
        prototype: HTMLRuxIconMobileOffElement;
        new (): HTMLRuxIconMobileOffElement;
    };
    interface HTMLRuxIconMobileScreenShareElement extends Components.RuxIconMobileScreenShare, HTMLStencilElement {
    }
    var HTMLRuxIconMobileScreenShareElement: {
        prototype: HTMLRuxIconMobileScreenShareElement;
        new (): HTMLRuxIconMobileScreenShareElement;
    };
    interface HTMLRuxIconModeCommentElement extends Components.RuxIconModeComment, HTMLStencilElement {
    }
    var HTMLRuxIconModeCommentElement: {
        prototype: HTMLRuxIconModeCommentElement;
        new (): HTMLRuxIconModeCommentElement;
    };
    interface HTMLRuxIconMonetizationOnElement extends Components.RuxIconMonetizationOn, HTMLStencilElement {
    }
    var HTMLRuxIconMonetizationOnElement: {
        prototype: HTMLRuxIconMonetizationOnElement;
        new (): HTMLRuxIconMonetizationOnElement;
    };
    interface HTMLRuxIconMoneyElement extends Components.RuxIconMoney, HTMLStencilElement {
    }
    var HTMLRuxIconMoneyElement: {
        prototype: HTMLRuxIconMoneyElement;
        new (): HTMLRuxIconMoneyElement;
    };
    interface HTMLRuxIconMoneyOffElement extends Components.RuxIconMoneyOff, HTMLStencilElement {
    }
    var HTMLRuxIconMoneyOffElement: {
        prototype: HTMLRuxIconMoneyOffElement;
        new (): HTMLRuxIconMoneyOffElement;
    };
    interface HTMLRuxIconMonochromePhotosElement extends Components.RuxIconMonochromePhotos, HTMLStencilElement {
    }
    var HTMLRuxIconMonochromePhotosElement: {
        prototype: HTMLRuxIconMonochromePhotosElement;
        new (): HTMLRuxIconMonochromePhotosElement;
    };
    interface HTMLRuxIconMoodElement extends Components.RuxIconMood, HTMLStencilElement {
    }
    var HTMLRuxIconMoodElement: {
        prototype: HTMLRuxIconMoodElement;
        new (): HTMLRuxIconMoodElement;
    };
    interface HTMLRuxIconMoodBadElement extends Components.RuxIconMoodBad, HTMLStencilElement {
    }
    var HTMLRuxIconMoodBadElement: {
        prototype: HTMLRuxIconMoodBadElement;
        new (): HTMLRuxIconMoodBadElement;
    };
    interface HTMLRuxIconMoreElement extends Components.RuxIconMore, HTMLStencilElement {
    }
    var HTMLRuxIconMoreElement: {
        prototype: HTMLRuxIconMoreElement;
        new (): HTMLRuxIconMoreElement;
    };
    interface HTMLRuxIconMoreHorizElement extends Components.RuxIconMoreHoriz, HTMLStencilElement {
    }
    var HTMLRuxIconMoreHorizElement: {
        prototype: HTMLRuxIconMoreHorizElement;
        new (): HTMLRuxIconMoreHorizElement;
    };
    interface HTMLRuxIconMoreVertElement extends Components.RuxIconMoreVert, HTMLStencilElement {
    }
    var HTMLRuxIconMoreVertElement: {
        prototype: HTMLRuxIconMoreVertElement;
        new (): HTMLRuxIconMoreVertElement;
    };
    interface HTMLRuxIconMotorcycleElement extends Components.RuxIconMotorcycle, HTMLStencilElement {
    }
    var HTMLRuxIconMotorcycleElement: {
        prototype: HTMLRuxIconMotorcycleElement;
        new (): HTMLRuxIconMotorcycleElement;
    };
    interface HTMLRuxIconMouseElement extends Components.RuxIconMouse, HTMLStencilElement {
    }
    var HTMLRuxIconMouseElement: {
        prototype: HTMLRuxIconMouseElement;
        new (): HTMLRuxIconMouseElement;
    };
    interface HTMLRuxIconMoveToInboxElement extends Components.RuxIconMoveToInbox, HTMLStencilElement {
    }
    var HTMLRuxIconMoveToInboxElement: {
        prototype: HTMLRuxIconMoveToInboxElement;
        new (): HTMLRuxIconMoveToInboxElement;
    };
    interface HTMLRuxIconMovieElement extends Components.RuxIconMovie, HTMLStencilElement {
    }
    var HTMLRuxIconMovieElement: {
        prototype: HTMLRuxIconMovieElement;
        new (): HTMLRuxIconMovieElement;
    };
    interface HTMLRuxIconMovieCreationElement extends Components.RuxIconMovieCreation, HTMLStencilElement {
    }
    var HTMLRuxIconMovieCreationElement: {
        prototype: HTMLRuxIconMovieCreationElement;
        new (): HTMLRuxIconMovieCreationElement;
    };
    interface HTMLRuxIconMovieFilterElement extends Components.RuxIconMovieFilter, HTMLStencilElement {
    }
    var HTMLRuxIconMovieFilterElement: {
        prototype: HTMLRuxIconMovieFilterElement;
        new (): HTMLRuxIconMovieFilterElement;
    };
    interface HTMLRuxIconMultilineChartElement extends Components.RuxIconMultilineChart, HTMLStencilElement {
    }
    var HTMLRuxIconMultilineChartElement: {
        prototype: HTMLRuxIconMultilineChartElement;
        new (): HTMLRuxIconMultilineChartElement;
    };
    interface HTMLRuxIconMusicNoteElement extends Components.RuxIconMusicNote, HTMLStencilElement {
    }
    var HTMLRuxIconMusicNoteElement: {
        prototype: HTMLRuxIconMusicNoteElement;
        new (): HTMLRuxIconMusicNoteElement;
    };
    interface HTMLRuxIconMusicOffElement extends Components.RuxIconMusicOff, HTMLStencilElement {
    }
    var HTMLRuxIconMusicOffElement: {
        prototype: HTMLRuxIconMusicOffElement;
        new (): HTMLRuxIconMusicOffElement;
    };
    interface HTMLRuxIconMusicVideoElement extends Components.RuxIconMusicVideo, HTMLStencilElement {
    }
    var HTMLRuxIconMusicVideoElement: {
        prototype: HTMLRuxIconMusicVideoElement;
        new (): HTMLRuxIconMusicVideoElement;
    };
    interface HTMLRuxIconMyLocationElement extends Components.RuxIconMyLocation, HTMLStencilElement {
    }
    var HTMLRuxIconMyLocationElement: {
        prototype: HTMLRuxIconMyLocationElement;
        new (): HTMLRuxIconMyLocationElement;
    };
    interface HTMLRuxIconNatureElement extends Components.RuxIconNature, HTMLStencilElement {
    }
    var HTMLRuxIconNatureElement: {
        prototype: HTMLRuxIconNatureElement;
        new (): HTMLRuxIconNatureElement;
    };
    interface HTMLRuxIconNaturePeopleElement extends Components.RuxIconNaturePeople, HTMLStencilElement {
    }
    var HTMLRuxIconNaturePeopleElement: {
        prototype: HTMLRuxIconNaturePeopleElement;
        new (): HTMLRuxIconNaturePeopleElement;
    };
    interface HTMLRuxIconNavigateBeforeElement extends Components.RuxIconNavigateBefore, HTMLStencilElement {
    }
    var HTMLRuxIconNavigateBeforeElement: {
        prototype: HTMLRuxIconNavigateBeforeElement;
        new (): HTMLRuxIconNavigateBeforeElement;
    };
    interface HTMLRuxIconNavigateNextElement extends Components.RuxIconNavigateNext, HTMLStencilElement {
    }
    var HTMLRuxIconNavigateNextElement: {
        prototype: HTMLRuxIconNavigateNextElement;
        new (): HTMLRuxIconNavigateNextElement;
    };
    interface HTMLRuxIconNavigationElement extends Components.RuxIconNavigation, HTMLStencilElement {
    }
    var HTMLRuxIconNavigationElement: {
        prototype: HTMLRuxIconNavigationElement;
        new (): HTMLRuxIconNavigationElement;
    };
    interface HTMLRuxIconNearMeElement extends Components.RuxIconNearMe, HTMLStencilElement {
    }
    var HTMLRuxIconNearMeElement: {
        prototype: HTMLRuxIconNearMeElement;
        new (): HTMLRuxIconNearMeElement;
    };
    interface HTMLRuxIconNetcomElement extends Components.RuxIconNetcom, HTMLStencilElement {
    }
    var HTMLRuxIconNetcomElement: {
        prototype: HTMLRuxIconNetcomElement;
        new (): HTMLRuxIconNetcomElement;
    };
    interface HTMLRuxIconNetworkCellElement extends Components.RuxIconNetworkCell, HTMLStencilElement {
    }
    var HTMLRuxIconNetworkCellElement: {
        prototype: HTMLRuxIconNetworkCellElement;
        new (): HTMLRuxIconNetworkCellElement;
    };
    interface HTMLRuxIconNetworkCheckElement extends Components.RuxIconNetworkCheck, HTMLStencilElement {
    }
    var HTMLRuxIconNetworkCheckElement: {
        prototype: HTMLRuxIconNetworkCheckElement;
        new (): HTMLRuxIconNetworkCheckElement;
    };
    interface HTMLRuxIconNetworkLockedElement extends Components.RuxIconNetworkLocked, HTMLStencilElement {
    }
    var HTMLRuxIconNetworkLockedElement: {
        prototype: HTMLRuxIconNetworkLockedElement;
        new (): HTMLRuxIconNetworkLockedElement;
    };
    interface HTMLRuxIconNetworkWifiElement extends Components.RuxIconNetworkWifi, HTMLStencilElement {
    }
    var HTMLRuxIconNetworkWifiElement: {
        prototype: HTMLRuxIconNetworkWifiElement;
        new (): HTMLRuxIconNetworkWifiElement;
    };
    interface HTMLRuxIconNewReleasesElement extends Components.RuxIconNewReleases, HTMLStencilElement {
    }
    var HTMLRuxIconNewReleasesElement: {
        prototype: HTMLRuxIconNewReleasesElement;
        new (): HTMLRuxIconNewReleasesElement;
    };
    interface HTMLRuxIconNextWeekElement extends Components.RuxIconNextWeek, HTMLStencilElement {
    }
    var HTMLRuxIconNextWeekElement: {
        prototype: HTMLRuxIconNextWeekElement;
        new (): HTMLRuxIconNextWeekElement;
    };
    interface HTMLRuxIconNfcElement extends Components.RuxIconNfc, HTMLStencilElement {
    }
    var HTMLRuxIconNfcElement: {
        prototype: HTMLRuxIconNfcElement;
        new (): HTMLRuxIconNfcElement;
    };
    interface HTMLRuxIconNoEncryptionElement extends Components.RuxIconNoEncryption, HTMLStencilElement {
    }
    var HTMLRuxIconNoEncryptionElement: {
        prototype: HTMLRuxIconNoEncryptionElement;
        new (): HTMLRuxIconNoEncryptionElement;
    };
    interface HTMLRuxIconNoMeetingRoomElement extends Components.RuxIconNoMeetingRoom, HTMLStencilElement {
    }
    var HTMLRuxIconNoMeetingRoomElement: {
        prototype: HTMLRuxIconNoMeetingRoomElement;
        new (): HTMLRuxIconNoMeetingRoomElement;
    };
    interface HTMLRuxIconNoSimElement extends Components.RuxIconNoSim, HTMLStencilElement {
    }
    var HTMLRuxIconNoSimElement: {
        prototype: HTMLRuxIconNoSimElement;
        new (): HTMLRuxIconNoSimElement;
    };
    interface HTMLRuxIconNotInterestedElement extends Components.RuxIconNotInterested, HTMLStencilElement {
    }
    var HTMLRuxIconNotInterestedElement: {
        prototype: HTMLRuxIconNotInterestedElement;
        new (): HTMLRuxIconNotInterestedElement;
    };
    interface HTMLRuxIconNotListedLocationElement extends Components.RuxIconNotListedLocation, HTMLStencilElement {
    }
    var HTMLRuxIconNotListedLocationElement: {
        prototype: HTMLRuxIconNotListedLocationElement;
        new (): HTMLRuxIconNotListedLocationElement;
    };
    interface HTMLRuxIconNoteElement extends Components.RuxIconNote, HTMLStencilElement {
    }
    var HTMLRuxIconNoteElement: {
        prototype: HTMLRuxIconNoteElement;
        new (): HTMLRuxIconNoteElement;
    };
    interface HTMLRuxIconNoteAddElement extends Components.RuxIconNoteAdd, HTMLStencilElement {
    }
    var HTMLRuxIconNoteAddElement: {
        prototype: HTMLRuxIconNoteAddElement;
        new (): HTMLRuxIconNoteAddElement;
    };
    interface HTMLRuxIconNotesElement extends Components.RuxIconNotes, HTMLStencilElement {
    }
    var HTMLRuxIconNotesElement: {
        prototype: HTMLRuxIconNotesElement;
        new (): HTMLRuxIconNotesElement;
    };
    interface HTMLRuxIconNotificationImportantElement extends Components.RuxIconNotificationImportant, HTMLStencilElement {
    }
    var HTMLRuxIconNotificationImportantElement: {
        prototype: HTMLRuxIconNotificationImportantElement;
        new (): HTMLRuxIconNotificationImportantElement;
    };
    interface HTMLRuxIconNotificationsElement extends Components.RuxIconNotifications, HTMLStencilElement {
    }
    var HTMLRuxIconNotificationsElement: {
        prototype: HTMLRuxIconNotificationsElement;
        new (): HTMLRuxIconNotificationsElement;
    };
    interface HTMLRuxIconNotificationsActiveElement extends Components.RuxIconNotificationsActive, HTMLStencilElement {
    }
    var HTMLRuxIconNotificationsActiveElement: {
        prototype: HTMLRuxIconNotificationsActiveElement;
        new (): HTMLRuxIconNotificationsActiveElement;
    };
    interface HTMLRuxIconNotificationsNoneElement extends Components.RuxIconNotificationsNone, HTMLStencilElement {
    }
    var HTMLRuxIconNotificationsNoneElement: {
        prototype: HTMLRuxIconNotificationsNoneElement;
        new (): HTMLRuxIconNotificationsNoneElement;
    };
    interface HTMLRuxIconNotificationsOffElement extends Components.RuxIconNotificationsOff, HTMLStencilElement {
    }
    var HTMLRuxIconNotificationsOffElement: {
        prototype: HTMLRuxIconNotificationsOffElement;
        new (): HTMLRuxIconNotificationsOffElement;
    };
    interface HTMLRuxIconNotificationsPausedElement extends Components.RuxIconNotificationsPaused, HTMLStencilElement {
    }
    var HTMLRuxIconNotificationsPausedElement: {
        prototype: HTMLRuxIconNotificationsPausedElement;
        new (): HTMLRuxIconNotificationsPausedElement;
    };
    interface HTMLRuxIconOfflineBoltElement extends Components.RuxIconOfflineBolt, HTMLStencilElement {
    }
    var HTMLRuxIconOfflineBoltElement: {
        prototype: HTMLRuxIconOfflineBoltElement;
        new (): HTMLRuxIconOfflineBoltElement;
    };
    interface HTMLRuxIconOfflinePinElement extends Components.RuxIconOfflinePin, HTMLStencilElement {
    }
    var HTMLRuxIconOfflinePinElement: {
        prototype: HTMLRuxIconOfflinePinElement;
        new (): HTMLRuxIconOfflinePinElement;
    };
    interface HTMLRuxIconOndemandVideoElement extends Components.RuxIconOndemandVideo, HTMLStencilElement {
    }
    var HTMLRuxIconOndemandVideoElement: {
        prototype: HTMLRuxIconOndemandVideoElement;
        new (): HTMLRuxIconOndemandVideoElement;
    };
    interface HTMLRuxIconOpacityElement extends Components.RuxIconOpacity, HTMLStencilElement {
    }
    var HTMLRuxIconOpacityElement: {
        prototype: HTMLRuxIconOpacityElement;
        new (): HTMLRuxIconOpacityElement;
    };
    interface HTMLRuxIconOpenInBrowserElement extends Components.RuxIconOpenInBrowser, HTMLStencilElement {
    }
    var HTMLRuxIconOpenInBrowserElement: {
        prototype: HTMLRuxIconOpenInBrowserElement;
        new (): HTMLRuxIconOpenInBrowserElement;
    };
    interface HTMLRuxIconOpenInNewElement extends Components.RuxIconOpenInNew, HTMLStencilElement {
    }
    var HTMLRuxIconOpenInNewElement: {
        prototype: HTMLRuxIconOpenInNewElement;
        new (): HTMLRuxIconOpenInNewElement;
    };
    interface HTMLRuxIconOpenWithElement extends Components.RuxIconOpenWith, HTMLStencilElement {
    }
    var HTMLRuxIconOpenWithElement: {
        prototype: HTMLRuxIconOpenWithElement;
        new (): HTMLRuxIconOpenWithElement;
    };
    interface HTMLRuxIconOutlinedFlagElement extends Components.RuxIconOutlinedFlag, HTMLStencilElement {
    }
    var HTMLRuxIconOutlinedFlagElement: {
        prototype: HTMLRuxIconOutlinedFlagElement;
        new (): HTMLRuxIconOutlinedFlagElement;
    };
    interface HTMLRuxIconPagesElement extends Components.RuxIconPages, HTMLStencilElement {
    }
    var HTMLRuxIconPagesElement: {
        prototype: HTMLRuxIconPagesElement;
        new (): HTMLRuxIconPagesElement;
    };
    interface HTMLRuxIconPageviewElement extends Components.RuxIconPageview, HTMLStencilElement {
    }
    var HTMLRuxIconPageviewElement: {
        prototype: HTMLRuxIconPageviewElement;
        new (): HTMLRuxIconPageviewElement;
    };
    interface HTMLRuxIconPaletteElement extends Components.RuxIconPalette, HTMLStencilElement {
    }
    var HTMLRuxIconPaletteElement: {
        prototype: HTMLRuxIconPaletteElement;
        new (): HTMLRuxIconPaletteElement;
    };
    interface HTMLRuxIconPanToolElement extends Components.RuxIconPanTool, HTMLStencilElement {
    }
    var HTMLRuxIconPanToolElement: {
        prototype: HTMLRuxIconPanToolElement;
        new (): HTMLRuxIconPanToolElement;
    };
    interface HTMLRuxIconPanoramaElement extends Components.RuxIconPanorama, HTMLStencilElement {
    }
    var HTMLRuxIconPanoramaElement: {
        prototype: HTMLRuxIconPanoramaElement;
        new (): HTMLRuxIconPanoramaElement;
    };
    interface HTMLRuxIconPanoramaFishEyeElement extends Components.RuxIconPanoramaFishEye, HTMLStencilElement {
    }
    var HTMLRuxIconPanoramaFishEyeElement: {
        prototype: HTMLRuxIconPanoramaFishEyeElement;
        new (): HTMLRuxIconPanoramaFishEyeElement;
    };
    interface HTMLRuxIconPanoramaHorizontalElement extends Components.RuxIconPanoramaHorizontal, HTMLStencilElement {
    }
    var HTMLRuxIconPanoramaHorizontalElement: {
        prototype: HTMLRuxIconPanoramaHorizontalElement;
        new (): HTMLRuxIconPanoramaHorizontalElement;
    };
    interface HTMLRuxIconPanoramaVerticalElement extends Components.RuxIconPanoramaVertical, HTMLStencilElement {
    }
    var HTMLRuxIconPanoramaVerticalElement: {
        prototype: HTMLRuxIconPanoramaVerticalElement;
        new (): HTMLRuxIconPanoramaVerticalElement;
    };
    interface HTMLRuxIconPanoramaWideAngleElement extends Components.RuxIconPanoramaWideAngle, HTMLStencilElement {
    }
    var HTMLRuxIconPanoramaWideAngleElement: {
        prototype: HTMLRuxIconPanoramaWideAngleElement;
        new (): HTMLRuxIconPanoramaWideAngleElement;
    };
    interface HTMLRuxIconPartyModeElement extends Components.RuxIconPartyMode, HTMLStencilElement {
    }
    var HTMLRuxIconPartyModeElement: {
        prototype: HTMLRuxIconPartyModeElement;
        new (): HTMLRuxIconPartyModeElement;
    };
    interface HTMLRuxIconPauseElement extends Components.RuxIconPause, HTMLStencilElement {
    }
    var HTMLRuxIconPauseElement: {
        prototype: HTMLRuxIconPauseElement;
        new (): HTMLRuxIconPauseElement;
    };
    interface HTMLRuxIconPauseCircleFilledElement extends Components.RuxIconPauseCircleFilled, HTMLStencilElement {
    }
    var HTMLRuxIconPauseCircleFilledElement: {
        prototype: HTMLRuxIconPauseCircleFilledElement;
        new (): HTMLRuxIconPauseCircleFilledElement;
    };
    interface HTMLRuxIconPauseCircleOutlineElement extends Components.RuxIconPauseCircleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconPauseCircleOutlineElement: {
        prototype: HTMLRuxIconPauseCircleOutlineElement;
        new (): HTMLRuxIconPauseCircleOutlineElement;
    };
    interface HTMLRuxIconPausePresentationElement extends Components.RuxIconPausePresentation, HTMLStencilElement {
    }
    var HTMLRuxIconPausePresentationElement: {
        prototype: HTMLRuxIconPausePresentationElement;
        new (): HTMLRuxIconPausePresentationElement;
    };
    interface HTMLRuxIconPayloadElement extends Components.RuxIconPayload, HTMLStencilElement {
    }
    var HTMLRuxIconPayloadElement: {
        prototype: HTMLRuxIconPayloadElement;
        new (): HTMLRuxIconPayloadElement;
    };
    interface HTMLRuxIconPaymentElement extends Components.RuxIconPayment, HTMLStencilElement {
    }
    var HTMLRuxIconPaymentElement: {
        prototype: HTMLRuxIconPaymentElement;
        new (): HTMLRuxIconPaymentElement;
    };
    interface HTMLRuxIconPeopleOutlineElement extends Components.RuxIconPeopleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconPeopleOutlineElement: {
        prototype: HTMLRuxIconPeopleOutlineElement;
        new (): HTMLRuxIconPeopleOutlineElement;
    };
    interface HTMLRuxIconPermCameraMicElement extends Components.RuxIconPermCameraMic, HTMLStencilElement {
    }
    var HTMLRuxIconPermCameraMicElement: {
        prototype: HTMLRuxIconPermCameraMicElement;
        new (): HTMLRuxIconPermCameraMicElement;
    };
    interface HTMLRuxIconPermContactCalendarElement extends Components.RuxIconPermContactCalendar, HTMLStencilElement {
    }
    var HTMLRuxIconPermContactCalendarElement: {
        prototype: HTMLRuxIconPermContactCalendarElement;
        new (): HTMLRuxIconPermContactCalendarElement;
    };
    interface HTMLRuxIconPermDataSettingElement extends Components.RuxIconPermDataSetting, HTMLStencilElement {
    }
    var HTMLRuxIconPermDataSettingElement: {
        prototype: HTMLRuxIconPermDataSettingElement;
        new (): HTMLRuxIconPermDataSettingElement;
    };
    interface HTMLRuxIconPermDeviceInformationElement extends Components.RuxIconPermDeviceInformation, HTMLStencilElement {
    }
    var HTMLRuxIconPermDeviceInformationElement: {
        prototype: HTMLRuxIconPermDeviceInformationElement;
        new (): HTMLRuxIconPermDeviceInformationElement;
    };
    interface HTMLRuxIconPermIdentityElement extends Components.RuxIconPermIdentity, HTMLStencilElement {
    }
    var HTMLRuxIconPermIdentityElement: {
        prototype: HTMLRuxIconPermIdentityElement;
        new (): HTMLRuxIconPermIdentityElement;
    };
    interface HTMLRuxIconPermMediaElement extends Components.RuxIconPermMedia, HTMLStencilElement {
    }
    var HTMLRuxIconPermMediaElement: {
        prototype: HTMLRuxIconPermMediaElement;
        new (): HTMLRuxIconPermMediaElement;
    };
    interface HTMLRuxIconPermPhoneMsgElement extends Components.RuxIconPermPhoneMsg, HTMLStencilElement {
    }
    var HTMLRuxIconPermPhoneMsgElement: {
        prototype: HTMLRuxIconPermPhoneMsgElement;
        new (): HTMLRuxIconPermPhoneMsgElement;
    };
    interface HTMLRuxIconPermScanWifiElement extends Components.RuxIconPermScanWifi, HTMLStencilElement {
    }
    var HTMLRuxIconPermScanWifiElement: {
        prototype: HTMLRuxIconPermScanWifiElement;
        new (): HTMLRuxIconPermScanWifiElement;
    };
    interface HTMLRuxIconPersonElement extends Components.RuxIconPerson, HTMLStencilElement {
    }
    var HTMLRuxIconPersonElement: {
        prototype: HTMLRuxIconPersonElement;
        new (): HTMLRuxIconPersonElement;
    };
    interface HTMLRuxIconPersonAddElement extends Components.RuxIconPersonAdd, HTMLStencilElement {
    }
    var HTMLRuxIconPersonAddElement: {
        prototype: HTMLRuxIconPersonAddElement;
        new (): HTMLRuxIconPersonAddElement;
    };
    interface HTMLRuxIconPersonAddDisabledElement extends Components.RuxIconPersonAddDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconPersonAddDisabledElement: {
        prototype: HTMLRuxIconPersonAddDisabledElement;
        new (): HTMLRuxIconPersonAddDisabledElement;
    };
    interface HTMLRuxIconPersonOutlineElement extends Components.RuxIconPersonOutline, HTMLStencilElement {
    }
    var HTMLRuxIconPersonOutlineElement: {
        prototype: HTMLRuxIconPersonOutlineElement;
        new (): HTMLRuxIconPersonOutlineElement;
    };
    interface HTMLRuxIconPersonPinElement extends Components.RuxIconPersonPin, HTMLStencilElement {
    }
    var HTMLRuxIconPersonPinElement: {
        prototype: HTMLRuxIconPersonPinElement;
        new (): HTMLRuxIconPersonPinElement;
    };
    interface HTMLRuxIconPersonPinCircleElement extends Components.RuxIconPersonPinCircle, HTMLStencilElement {
    }
    var HTMLRuxIconPersonPinCircleElement: {
        prototype: HTMLRuxIconPersonPinCircleElement;
        new (): HTMLRuxIconPersonPinCircleElement;
    };
    interface HTMLRuxIconPersonalVideoElement extends Components.RuxIconPersonalVideo, HTMLStencilElement {
    }
    var HTMLRuxIconPersonalVideoElement: {
        prototype: HTMLRuxIconPersonalVideoElement;
        new (): HTMLRuxIconPersonalVideoElement;
    };
    interface HTMLRuxIconPetsElement extends Components.RuxIconPets, HTMLStencilElement {
    }
    var HTMLRuxIconPetsElement: {
        prototype: HTMLRuxIconPetsElement;
        new (): HTMLRuxIconPetsElement;
    };
    interface HTMLRuxIconPhoneElement extends Components.RuxIconPhone, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneElement: {
        prototype: HTMLRuxIconPhoneElement;
        new (): HTMLRuxIconPhoneElement;
    };
    interface HTMLRuxIconPhoneAndroidElement extends Components.RuxIconPhoneAndroid, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneAndroidElement: {
        prototype: HTMLRuxIconPhoneAndroidElement;
        new (): HTMLRuxIconPhoneAndroidElement;
    };
    interface HTMLRuxIconPhoneBluetoothSpeakerElement extends Components.RuxIconPhoneBluetoothSpeaker, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneBluetoothSpeakerElement: {
        prototype: HTMLRuxIconPhoneBluetoothSpeakerElement;
        new (): HTMLRuxIconPhoneBluetoothSpeakerElement;
    };
    interface HTMLRuxIconPhoneCallbackElement extends Components.RuxIconPhoneCallback, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneCallbackElement: {
        prototype: HTMLRuxIconPhoneCallbackElement;
        new (): HTMLRuxIconPhoneCallbackElement;
    };
    interface HTMLRuxIconPhoneForwardedElement extends Components.RuxIconPhoneForwarded, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneForwardedElement: {
        prototype: HTMLRuxIconPhoneForwardedElement;
        new (): HTMLRuxIconPhoneForwardedElement;
    };
    interface HTMLRuxIconPhoneInTalkElement extends Components.RuxIconPhoneInTalk, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneInTalkElement: {
        prototype: HTMLRuxIconPhoneInTalkElement;
        new (): HTMLRuxIconPhoneInTalkElement;
    };
    interface HTMLRuxIconPhoneIphoneElement extends Components.RuxIconPhoneIphone, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneIphoneElement: {
        prototype: HTMLRuxIconPhoneIphoneElement;
        new (): HTMLRuxIconPhoneIphoneElement;
    };
    interface HTMLRuxIconPhoneLockedElement extends Components.RuxIconPhoneLocked, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneLockedElement: {
        prototype: HTMLRuxIconPhoneLockedElement;
        new (): HTMLRuxIconPhoneLockedElement;
    };
    interface HTMLRuxIconPhoneMissedElement extends Components.RuxIconPhoneMissed, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneMissedElement: {
        prototype: HTMLRuxIconPhoneMissedElement;
        new (): HTMLRuxIconPhoneMissedElement;
    };
    interface HTMLRuxIconPhonePausedElement extends Components.RuxIconPhonePaused, HTMLStencilElement {
    }
    var HTMLRuxIconPhonePausedElement: {
        prototype: HTMLRuxIconPhonePausedElement;
        new (): HTMLRuxIconPhonePausedElement;
    };
    interface HTMLRuxIconPhonelinkElement extends Components.RuxIconPhonelink, HTMLStencilElement {
    }
    var HTMLRuxIconPhonelinkElement: {
        prototype: HTMLRuxIconPhonelinkElement;
        new (): HTMLRuxIconPhonelinkElement;
    };
    interface HTMLRuxIconPhonelinkEraseElement extends Components.RuxIconPhonelinkErase, HTMLStencilElement {
    }
    var HTMLRuxIconPhonelinkEraseElement: {
        prototype: HTMLRuxIconPhonelinkEraseElement;
        new (): HTMLRuxIconPhonelinkEraseElement;
    };
    interface HTMLRuxIconPhonelinkLockElement extends Components.RuxIconPhonelinkLock, HTMLStencilElement {
    }
    var HTMLRuxIconPhonelinkLockElement: {
        prototype: HTMLRuxIconPhonelinkLockElement;
        new (): HTMLRuxIconPhonelinkLockElement;
    };
    interface HTMLRuxIconPhonelinkOffElement extends Components.RuxIconPhonelinkOff, HTMLStencilElement {
    }
    var HTMLRuxIconPhonelinkOffElement: {
        prototype: HTMLRuxIconPhonelinkOffElement;
        new (): HTMLRuxIconPhonelinkOffElement;
    };
    interface HTMLRuxIconPhonelinkRingElement extends Components.RuxIconPhonelinkRing, HTMLStencilElement {
    }
    var HTMLRuxIconPhonelinkRingElement: {
        prototype: HTMLRuxIconPhonelinkRingElement;
        new (): HTMLRuxIconPhonelinkRingElement;
    };
    interface HTMLRuxIconPhonelinkSetupElement extends Components.RuxIconPhonelinkSetup, HTMLStencilElement {
    }
    var HTMLRuxIconPhonelinkSetupElement: {
        prototype: HTMLRuxIconPhonelinkSetupElement;
        new (): HTMLRuxIconPhonelinkSetupElement;
    };
    interface HTMLRuxIconPhotoElement extends Components.RuxIconPhoto, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoElement: {
        prototype: HTMLRuxIconPhotoElement;
        new (): HTMLRuxIconPhotoElement;
    };
    interface HTMLRuxIconPhotoAlbumElement extends Components.RuxIconPhotoAlbum, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoAlbumElement: {
        prototype: HTMLRuxIconPhotoAlbumElement;
        new (): HTMLRuxIconPhotoAlbumElement;
    };
    interface HTMLRuxIconPhotoCameraElement extends Components.RuxIconPhotoCamera, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoCameraElement: {
        prototype: HTMLRuxIconPhotoCameraElement;
        new (): HTMLRuxIconPhotoCameraElement;
    };
    interface HTMLRuxIconPhotoFilterElement extends Components.RuxIconPhotoFilter, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoFilterElement: {
        prototype: HTMLRuxIconPhotoFilterElement;
        new (): HTMLRuxIconPhotoFilterElement;
    };
    interface HTMLRuxIconPhotoLibraryElement extends Components.RuxIconPhotoLibrary, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoLibraryElement: {
        prototype: HTMLRuxIconPhotoLibraryElement;
        new (): HTMLRuxIconPhotoLibraryElement;
    };
    interface HTMLRuxIconPhotoSizeSelectActualElement extends Components.RuxIconPhotoSizeSelectActual, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoSizeSelectActualElement: {
        prototype: HTMLRuxIconPhotoSizeSelectActualElement;
        new (): HTMLRuxIconPhotoSizeSelectActualElement;
    };
    interface HTMLRuxIconPhotoSizeSelectLargeElement extends Components.RuxIconPhotoSizeSelectLarge, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoSizeSelectLargeElement: {
        prototype: HTMLRuxIconPhotoSizeSelectLargeElement;
        new (): HTMLRuxIconPhotoSizeSelectLargeElement;
    };
    interface HTMLRuxIconPhotoSizeSelectSmallElement extends Components.RuxIconPhotoSizeSelectSmall, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoSizeSelectSmallElement: {
        prototype: HTMLRuxIconPhotoSizeSelectSmallElement;
        new (): HTMLRuxIconPhotoSizeSelectSmallElement;
    };
    interface HTMLRuxIconPictureAsPdfElement extends Components.RuxIconPictureAsPdf, HTMLStencilElement {
    }
    var HTMLRuxIconPictureAsPdfElement: {
        prototype: HTMLRuxIconPictureAsPdfElement;
        new (): HTMLRuxIconPictureAsPdfElement;
    };
    interface HTMLRuxIconPictureInPictureElement extends Components.RuxIconPictureInPicture, HTMLStencilElement {
    }
    var HTMLRuxIconPictureInPictureElement: {
        prototype: HTMLRuxIconPictureInPictureElement;
        new (): HTMLRuxIconPictureInPictureElement;
    };
    interface HTMLRuxIconPictureInPictureAltElement extends Components.RuxIconPictureInPictureAlt, HTMLStencilElement {
    }
    var HTMLRuxIconPictureInPictureAltElement: {
        prototype: HTMLRuxIconPictureInPictureAltElement;
        new (): HTMLRuxIconPictureInPictureAltElement;
    };
    interface HTMLRuxIconPieChartElement extends Components.RuxIconPieChart, HTMLStencilElement {
    }
    var HTMLRuxIconPieChartElement: {
        prototype: HTMLRuxIconPieChartElement;
        new (): HTMLRuxIconPieChartElement;
    };
    interface HTMLRuxIconPinDropElement extends Components.RuxIconPinDrop, HTMLStencilElement {
    }
    var HTMLRuxIconPinDropElement: {
        prototype: HTMLRuxIconPinDropElement;
        new (): HTMLRuxIconPinDropElement;
    };
    interface HTMLRuxIconPlaceElement extends Components.RuxIconPlace, HTMLStencilElement {
    }
    var HTMLRuxIconPlaceElement: {
        prototype: HTMLRuxIconPlaceElement;
        new (): HTMLRuxIconPlaceElement;
    };
    interface HTMLRuxIconPlayArrowElement extends Components.RuxIconPlayArrow, HTMLStencilElement {
    }
    var HTMLRuxIconPlayArrowElement: {
        prototype: HTMLRuxIconPlayArrowElement;
        new (): HTMLRuxIconPlayArrowElement;
    };
    interface HTMLRuxIconPlayCircleFilledElement extends Components.RuxIconPlayCircleFilled, HTMLStencilElement {
    }
    var HTMLRuxIconPlayCircleFilledElement: {
        prototype: HTMLRuxIconPlayCircleFilledElement;
        new (): HTMLRuxIconPlayCircleFilledElement;
    };
    interface HTMLRuxIconPlayCircleFilledWhiteElement extends Components.RuxIconPlayCircleFilledWhite, HTMLStencilElement {
    }
    var HTMLRuxIconPlayCircleFilledWhiteElement: {
        prototype: HTMLRuxIconPlayCircleFilledWhiteElement;
        new (): HTMLRuxIconPlayCircleFilledWhiteElement;
    };
    interface HTMLRuxIconPlayCircleOutlineElement extends Components.RuxIconPlayCircleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconPlayCircleOutlineElement: {
        prototype: HTMLRuxIconPlayCircleOutlineElement;
        new (): HTMLRuxIconPlayCircleOutlineElement;
    };
    interface HTMLRuxIconPlayForWorkElement extends Components.RuxIconPlayForWork, HTMLStencilElement {
    }
    var HTMLRuxIconPlayForWorkElement: {
        prototype: HTMLRuxIconPlayForWorkElement;
        new (): HTMLRuxIconPlayForWorkElement;
    };
    interface HTMLRuxIconPlaylistAddElement extends Components.RuxIconPlaylistAdd, HTMLStencilElement {
    }
    var HTMLRuxIconPlaylistAddElement: {
        prototype: HTMLRuxIconPlaylistAddElement;
        new (): HTMLRuxIconPlaylistAddElement;
    };
    interface HTMLRuxIconPlaylistAddCheckElement extends Components.RuxIconPlaylistAddCheck, HTMLStencilElement {
    }
    var HTMLRuxIconPlaylistAddCheckElement: {
        prototype: HTMLRuxIconPlaylistAddCheckElement;
        new (): HTMLRuxIconPlaylistAddCheckElement;
    };
    interface HTMLRuxIconPlaylistPlayElement extends Components.RuxIconPlaylistPlay, HTMLStencilElement {
    }
    var HTMLRuxIconPlaylistPlayElement: {
        prototype: HTMLRuxIconPlaylistPlayElement;
        new (): HTMLRuxIconPlaylistPlayElement;
    };
    interface HTMLRuxIconPlusOneElement extends Components.RuxIconPlusOne, HTMLStencilElement {
    }
    var HTMLRuxIconPlusOneElement: {
        prototype: HTMLRuxIconPlusOneElement;
        new (): HTMLRuxIconPlusOneElement;
    };
    interface HTMLRuxIconPollElement extends Components.RuxIconPoll, HTMLStencilElement {
    }
    var HTMLRuxIconPollElement: {
        prototype: HTMLRuxIconPollElement;
        new (): HTMLRuxIconPollElement;
    };
    interface HTMLRuxIconPoolElement extends Components.RuxIconPool, HTMLStencilElement {
    }
    var HTMLRuxIconPoolElement: {
        prototype: HTMLRuxIconPoolElement;
        new (): HTMLRuxIconPoolElement;
    };
    interface HTMLRuxIconPortableWifiOffElement extends Components.RuxIconPortableWifiOff, HTMLStencilElement {
    }
    var HTMLRuxIconPortableWifiOffElement: {
        prototype: HTMLRuxIconPortableWifiOffElement;
        new (): HTMLRuxIconPortableWifiOffElement;
    };
    interface HTMLRuxIconPortraitElement extends Components.RuxIconPortrait, HTMLStencilElement {
    }
    var HTMLRuxIconPortraitElement: {
        prototype: HTMLRuxIconPortraitElement;
        new (): HTMLRuxIconPortraitElement;
    };
    interface HTMLRuxIconPowerElement extends Components.RuxIconPower, HTMLStencilElement {
    }
    var HTMLRuxIconPowerElement: {
        prototype: HTMLRuxIconPowerElement;
        new (): HTMLRuxIconPowerElement;
    };
    interface HTMLRuxIconPowerInputElement extends Components.RuxIconPowerInput, HTMLStencilElement {
    }
    var HTMLRuxIconPowerInputElement: {
        prototype: HTMLRuxIconPowerInputElement;
        new (): HTMLRuxIconPowerInputElement;
    };
    interface HTMLRuxIconPowerOffElement extends Components.RuxIconPowerOff, HTMLStencilElement {
    }
    var HTMLRuxIconPowerOffElement: {
        prototype: HTMLRuxIconPowerOffElement;
        new (): HTMLRuxIconPowerOffElement;
    };
    interface HTMLRuxIconPowerSettingsNewElement extends Components.RuxIconPowerSettingsNew, HTMLStencilElement {
    }
    var HTMLRuxIconPowerSettingsNewElement: {
        prototype: HTMLRuxIconPowerSettingsNewElement;
        new (): HTMLRuxIconPowerSettingsNewElement;
    };
    interface HTMLRuxIconPregnantWomanElement extends Components.RuxIconPregnantWoman, HTMLStencilElement {
    }
    var HTMLRuxIconPregnantWomanElement: {
        prototype: HTMLRuxIconPregnantWomanElement;
        new (): HTMLRuxIconPregnantWomanElement;
    };
    interface HTMLRuxIconPresentToAllElement extends Components.RuxIconPresentToAll, HTMLStencilElement {
    }
    var HTMLRuxIconPresentToAllElement: {
        prototype: HTMLRuxIconPresentToAllElement;
        new (): HTMLRuxIconPresentToAllElement;
    };
    interface HTMLRuxIconPrintElement extends Components.RuxIconPrint, HTMLStencilElement {
    }
    var HTMLRuxIconPrintElement: {
        prototype: HTMLRuxIconPrintElement;
        new (): HTMLRuxIconPrintElement;
    };
    interface HTMLRuxIconPrintDisabledElement extends Components.RuxIconPrintDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconPrintDisabledElement: {
        prototype: HTMLRuxIconPrintDisabledElement;
        new (): HTMLRuxIconPrintDisabledElement;
    };
    interface HTMLRuxIconPriorityHighElement extends Components.RuxIconPriorityHigh, HTMLStencilElement {
    }
    var HTMLRuxIconPriorityHighElement: {
        prototype: HTMLRuxIconPriorityHighElement;
        new (): HTMLRuxIconPriorityHighElement;
    };
    interface HTMLRuxIconProcessorElement extends Components.RuxIconProcessor, HTMLStencilElement {
    }
    var HTMLRuxIconProcessorElement: {
        prototype: HTMLRuxIconProcessorElement;
        new (): HTMLRuxIconProcessorElement;
    };
    interface HTMLRuxIconProcessorAltElement extends Components.RuxIconProcessorAlt, HTMLStencilElement {
    }
    var HTMLRuxIconProcessorAltElement: {
        prototype: HTMLRuxIconProcessorAltElement;
        new (): HTMLRuxIconProcessorAltElement;
    };
    interface HTMLRuxIconPropulsionPowerElement extends Components.RuxIconPropulsionPower, HTMLStencilElement {
    }
    var HTMLRuxIconPropulsionPowerElement: {
        prototype: HTMLRuxIconPropulsionPowerElement;
        new (): HTMLRuxIconPropulsionPowerElement;
    };
    interface HTMLRuxIconPublicElement extends Components.RuxIconPublic, HTMLStencilElement {
    }
    var HTMLRuxIconPublicElement: {
        prototype: HTMLRuxIconPublicElement;
        new (): HTMLRuxIconPublicElement;
    };
    interface HTMLRuxIconPublishElement extends Components.RuxIconPublish, HTMLStencilElement {
    }
    var HTMLRuxIconPublishElement: {
        prototype: HTMLRuxIconPublishElement;
        new (): HTMLRuxIconPublishElement;
    };
    interface HTMLRuxIconQueryBuilderElement extends Components.RuxIconQueryBuilder, HTMLStencilElement {
    }
    var HTMLRuxIconQueryBuilderElement: {
        prototype: HTMLRuxIconQueryBuilderElement;
        new (): HTMLRuxIconQueryBuilderElement;
    };
    interface HTMLRuxIconQuestionAnswerElement extends Components.RuxIconQuestionAnswer, HTMLStencilElement {
    }
    var HTMLRuxIconQuestionAnswerElement: {
        prototype: HTMLRuxIconQuestionAnswerElement;
        new (): HTMLRuxIconQuestionAnswerElement;
    };
    interface HTMLRuxIconQueueElement extends Components.RuxIconQueue, HTMLStencilElement {
    }
    var HTMLRuxIconQueueElement: {
        prototype: HTMLRuxIconQueueElement;
        new (): HTMLRuxIconQueueElement;
    };
    interface HTMLRuxIconQueueMusicElement extends Components.RuxIconQueueMusic, HTMLStencilElement {
    }
    var HTMLRuxIconQueueMusicElement: {
        prototype: HTMLRuxIconQueueMusicElement;
        new (): HTMLRuxIconQueueMusicElement;
    };
    interface HTMLRuxIconQueuePlayNextElement extends Components.RuxIconQueuePlayNext, HTMLStencilElement {
    }
    var HTMLRuxIconQueuePlayNextElement: {
        prototype: HTMLRuxIconQueuePlayNextElement;
        new (): HTMLRuxIconQueuePlayNextElement;
    };
    interface HTMLRuxIconRadioElement extends Components.RuxIconRadio, HTMLStencilElement {
    }
    var HTMLRuxIconRadioElement: {
        prototype: HTMLRuxIconRadioElement;
        new (): HTMLRuxIconRadioElement;
    };
    interface HTMLRuxIconRadioButtonCheckedElement extends Components.RuxIconRadioButtonChecked, HTMLStencilElement {
    }
    var HTMLRuxIconRadioButtonCheckedElement: {
        prototype: HTMLRuxIconRadioButtonCheckedElement;
        new (): HTMLRuxIconRadioButtonCheckedElement;
    };
    interface HTMLRuxIconRadioButtonUncheckedElement extends Components.RuxIconRadioButtonUnchecked, HTMLStencilElement {
    }
    var HTMLRuxIconRadioButtonUncheckedElement: {
        prototype: HTMLRuxIconRadioButtonUncheckedElement;
        new (): HTMLRuxIconRadioButtonUncheckedElement;
    };
    interface HTMLRuxIconRateReviewElement extends Components.RuxIconRateReview, HTMLStencilElement {
    }
    var HTMLRuxIconRateReviewElement: {
        prototype: HTMLRuxIconRateReviewElement;
        new (): HTMLRuxIconRateReviewElement;
    };
    interface HTMLRuxIconReceiptElement extends Components.RuxIconReceipt, HTMLStencilElement {
    }
    var HTMLRuxIconReceiptElement: {
        prototype: HTMLRuxIconReceiptElement;
        new (): HTMLRuxIconReceiptElement;
    };
    interface HTMLRuxIconRecentActorsElement extends Components.RuxIconRecentActors, HTMLStencilElement {
    }
    var HTMLRuxIconRecentActorsElement: {
        prototype: HTMLRuxIconRecentActorsElement;
        new (): HTMLRuxIconRecentActorsElement;
    };
    interface HTMLRuxIconRecordVoiceOverElement extends Components.RuxIconRecordVoiceOver, HTMLStencilElement {
    }
    var HTMLRuxIconRecordVoiceOverElement: {
        prototype: HTMLRuxIconRecordVoiceOverElement;
        new (): HTMLRuxIconRecordVoiceOverElement;
    };
    interface HTMLRuxIconRedeemElement extends Components.RuxIconRedeem, HTMLStencilElement {
    }
    var HTMLRuxIconRedeemElement: {
        prototype: HTMLRuxIconRedeemElement;
        new (): HTMLRuxIconRedeemElement;
    };
    interface HTMLRuxIconRedoElement extends Components.RuxIconRedo, HTMLStencilElement {
    }
    var HTMLRuxIconRedoElement: {
        prototype: HTMLRuxIconRedoElement;
        new (): HTMLRuxIconRedoElement;
    };
    interface HTMLRuxIconRefreshElement extends Components.RuxIconRefresh, HTMLStencilElement {
    }
    var HTMLRuxIconRefreshElement: {
        prototype: HTMLRuxIconRefreshElement;
        new (): HTMLRuxIconRefreshElement;
    };
    interface HTMLRuxIconRemoveElement extends Components.RuxIconRemove, HTMLStencilElement {
    }
    var HTMLRuxIconRemoveElement: {
        prototype: HTMLRuxIconRemoveElement;
        new (): HTMLRuxIconRemoveElement;
    };
    interface HTMLRuxIconRemoveCircleElement extends Components.RuxIconRemoveCircle, HTMLStencilElement {
    }
    var HTMLRuxIconRemoveCircleElement: {
        prototype: HTMLRuxIconRemoveCircleElement;
        new (): HTMLRuxIconRemoveCircleElement;
    };
    interface HTMLRuxIconRemoveCircleOutlineElement extends Components.RuxIconRemoveCircleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconRemoveCircleOutlineElement: {
        prototype: HTMLRuxIconRemoveCircleOutlineElement;
        new (): HTMLRuxIconRemoveCircleOutlineElement;
    };
    interface HTMLRuxIconRemoveFromQueueElement extends Components.RuxIconRemoveFromQueue, HTMLStencilElement {
    }
    var HTMLRuxIconRemoveFromQueueElement: {
        prototype: HTMLRuxIconRemoveFromQueueElement;
        new (): HTMLRuxIconRemoveFromQueueElement;
    };
    interface HTMLRuxIconRemoveRedEyeElement extends Components.RuxIconRemoveRedEye, HTMLStencilElement {
    }
    var HTMLRuxIconRemoveRedEyeElement: {
        prototype: HTMLRuxIconRemoveRedEyeElement;
        new (): HTMLRuxIconRemoveRedEyeElement;
    };
    interface HTMLRuxIconRemoveShoppingCartElement extends Components.RuxIconRemoveShoppingCart, HTMLStencilElement {
    }
    var HTMLRuxIconRemoveShoppingCartElement: {
        prototype: HTMLRuxIconRemoveShoppingCartElement;
        new (): HTMLRuxIconRemoveShoppingCartElement;
    };
    interface HTMLRuxIconReorderElement extends Components.RuxIconReorder, HTMLStencilElement {
    }
    var HTMLRuxIconReorderElement: {
        prototype: HTMLRuxIconReorderElement;
        new (): HTMLRuxIconReorderElement;
    };
    interface HTMLRuxIconRepeatElement extends Components.RuxIconRepeat, HTMLStencilElement {
    }
    var HTMLRuxIconRepeatElement: {
        prototype: HTMLRuxIconRepeatElement;
        new (): HTMLRuxIconRepeatElement;
    };
    interface HTMLRuxIconRepeatOneElement extends Components.RuxIconRepeatOne, HTMLStencilElement {
    }
    var HTMLRuxIconRepeatOneElement: {
        prototype: HTMLRuxIconRepeatOneElement;
        new (): HTMLRuxIconRepeatOneElement;
    };
    interface HTMLRuxIconReplayElement extends Components.RuxIconReplay, HTMLStencilElement {
    }
    var HTMLRuxIconReplayElement: {
        prototype: HTMLRuxIconReplayElement;
        new (): HTMLRuxIconReplayElement;
    };
    interface HTMLRuxIconReplay10Element extends Components.RuxIconReplay10, HTMLStencilElement {
    }
    var HTMLRuxIconReplay10Element: {
        prototype: HTMLRuxIconReplay10Element;
        new (): HTMLRuxIconReplay10Element;
    };
    interface HTMLRuxIconReplay30Element extends Components.RuxIconReplay30, HTMLStencilElement {
    }
    var HTMLRuxIconReplay30Element: {
        prototype: HTMLRuxIconReplay30Element;
        new (): HTMLRuxIconReplay30Element;
    };
    interface HTMLRuxIconReplay5Element extends Components.RuxIconReplay5, HTMLStencilElement {
    }
    var HTMLRuxIconReplay5Element: {
        prototype: HTMLRuxIconReplay5Element;
        new (): HTMLRuxIconReplay5Element;
    };
    interface HTMLRuxIconReplyElement extends Components.RuxIconReply, HTMLStencilElement {
    }
    var HTMLRuxIconReplyElement: {
        prototype: HTMLRuxIconReplyElement;
        new (): HTMLRuxIconReplyElement;
    };
    interface HTMLRuxIconReplyAllElement extends Components.RuxIconReplyAll, HTMLStencilElement {
    }
    var HTMLRuxIconReplyAllElement: {
        prototype: HTMLRuxIconReplyAllElement;
        new (): HTMLRuxIconReplyAllElement;
    };
    interface HTMLRuxIconReportElement extends Components.RuxIconReport, HTMLStencilElement {
    }
    var HTMLRuxIconReportElement: {
        prototype: HTMLRuxIconReportElement;
        new (): HTMLRuxIconReportElement;
    };
    interface HTMLRuxIconReportOffElement extends Components.RuxIconReportOff, HTMLStencilElement {
    }
    var HTMLRuxIconReportOffElement: {
        prototype: HTMLRuxIconReportOffElement;
        new (): HTMLRuxIconReportOffElement;
    };
    interface HTMLRuxIconReportProblemElement extends Components.RuxIconReportProblem, HTMLStencilElement {
    }
    var HTMLRuxIconReportProblemElement: {
        prototype: HTMLRuxIconReportProblemElement;
        new (): HTMLRuxIconReportProblemElement;
    };
    interface HTMLRuxIconRestaurantElement extends Components.RuxIconRestaurant, HTMLStencilElement {
    }
    var HTMLRuxIconRestaurantElement: {
        prototype: HTMLRuxIconRestaurantElement;
        new (): HTMLRuxIconRestaurantElement;
    };
    interface HTMLRuxIconRestaurantMenuElement extends Components.RuxIconRestaurantMenu, HTMLStencilElement {
    }
    var HTMLRuxIconRestaurantMenuElement: {
        prototype: HTMLRuxIconRestaurantMenuElement;
        new (): HTMLRuxIconRestaurantMenuElement;
    };
    interface HTMLRuxIconRestoreElement extends Components.RuxIconRestore, HTMLStencilElement {
    }
    var HTMLRuxIconRestoreElement: {
        prototype: HTMLRuxIconRestoreElement;
        new (): HTMLRuxIconRestoreElement;
    };
    interface HTMLRuxIconRestoreFromTrashElement extends Components.RuxIconRestoreFromTrash, HTMLStencilElement {
    }
    var HTMLRuxIconRestoreFromTrashElement: {
        prototype: HTMLRuxIconRestoreFromTrashElement;
        new (): HTMLRuxIconRestoreFromTrashElement;
    };
    interface HTMLRuxIconRestorePageElement extends Components.RuxIconRestorePage, HTMLStencilElement {
    }
    var HTMLRuxIconRestorePageElement: {
        prototype: HTMLRuxIconRestorePageElement;
        new (): HTMLRuxIconRestorePageElement;
    };
    interface HTMLRuxIconRingVolumeElement extends Components.RuxIconRingVolume, HTMLStencilElement {
    }
    var HTMLRuxIconRingVolumeElement: {
        prototype: HTMLRuxIconRingVolumeElement;
        new (): HTMLRuxIconRingVolumeElement;
    };
    interface HTMLRuxIconRoomElement extends Components.RuxIconRoom, HTMLStencilElement {
    }
    var HTMLRuxIconRoomElement: {
        prototype: HTMLRuxIconRoomElement;
        new (): HTMLRuxIconRoomElement;
    };
    interface HTMLRuxIconRoomServiceElement extends Components.RuxIconRoomService, HTMLStencilElement {
    }
    var HTMLRuxIconRoomServiceElement: {
        prototype: HTMLRuxIconRoomServiceElement;
        new (): HTMLRuxIconRoomServiceElement;
    };
    interface HTMLRuxIconRotate90DegreesCcElement extends Components.RuxIconRotate90DegreesCc, HTMLStencilElement {
    }
    var HTMLRuxIconRotate90DegreesCcElement: {
        prototype: HTMLRuxIconRotate90DegreesCcElement;
        new (): HTMLRuxIconRotate90DegreesCcElement;
    };
    interface HTMLRuxIconRotateLeftElement extends Components.RuxIconRotateLeft, HTMLStencilElement {
    }
    var HTMLRuxIconRotateLeftElement: {
        prototype: HTMLRuxIconRotateLeftElement;
        new (): HTMLRuxIconRotateLeftElement;
    };
    interface HTMLRuxIconRotateRightElement extends Components.RuxIconRotateRight, HTMLStencilElement {
    }
    var HTMLRuxIconRotateRightElement: {
        prototype: HTMLRuxIconRotateRightElement;
        new (): HTMLRuxIconRotateRightElement;
    };
    interface HTMLRuxIconRoundedCornerElement extends Components.RuxIconRoundedCorner, HTMLStencilElement {
    }
    var HTMLRuxIconRoundedCornerElement: {
        prototype: HTMLRuxIconRoundedCornerElement;
        new (): HTMLRuxIconRoundedCornerElement;
    };
    interface HTMLRuxIconRouterElement extends Components.RuxIconRouter, HTMLStencilElement {
    }
    var HTMLRuxIconRouterElement: {
        prototype: HTMLRuxIconRouterElement;
        new (): HTMLRuxIconRouterElement;
    };
    interface HTMLRuxIconRowingElement extends Components.RuxIconRowing, HTMLStencilElement {
    }
    var HTMLRuxIconRowingElement: {
        prototype: HTMLRuxIconRowingElement;
        new (): HTMLRuxIconRowingElement;
    };
    interface HTMLRuxIconRssFeedElement extends Components.RuxIconRssFeed, HTMLStencilElement {
    }
    var HTMLRuxIconRssFeedElement: {
        prototype: HTMLRuxIconRssFeedElement;
        new (): HTMLRuxIconRssFeedElement;
    };
    interface HTMLRuxIconRvHookupElement extends Components.RuxIconRvHookup, HTMLStencilElement {
    }
    var HTMLRuxIconRvHookupElement: {
        prototype: HTMLRuxIconRvHookupElement;
        new (): HTMLRuxIconRvHookupElement;
    };
    interface HTMLRuxIconSatelliteElement extends Components.RuxIconSatellite, HTMLStencilElement {
    }
    var HTMLRuxIconSatelliteElement: {
        prototype: HTMLRuxIconSatelliteElement;
        new (): HTMLRuxIconSatelliteElement;
    };
    interface HTMLRuxIconSatelliteOffElement extends Components.RuxIconSatelliteOff, HTMLStencilElement {
    }
    var HTMLRuxIconSatelliteOffElement: {
        prototype: HTMLRuxIconSatelliteOffElement;
        new (): HTMLRuxIconSatelliteOffElement;
    };
    interface HTMLRuxIconSatelliteReceiveElement extends Components.RuxIconSatelliteReceive, HTMLStencilElement {
    }
    var HTMLRuxIconSatelliteReceiveElement: {
        prototype: HTMLRuxIconSatelliteReceiveElement;
        new (): HTMLRuxIconSatelliteReceiveElement;
    };
    interface HTMLRuxIconSatelliteTransmitElement extends Components.RuxIconSatelliteTransmit, HTMLStencilElement {
    }
    var HTMLRuxIconSatelliteTransmitElement: {
        prototype: HTMLRuxIconSatelliteTransmitElement;
        new (): HTMLRuxIconSatelliteTransmitElement;
    };
    interface HTMLRuxIconSaveElement extends Components.RuxIconSave, HTMLStencilElement {
    }
    var HTMLRuxIconSaveElement: {
        prototype: HTMLRuxIconSaveElement;
        new (): HTMLRuxIconSaveElement;
    };
    interface HTMLRuxIconSaveAltElement extends Components.RuxIconSaveAlt, HTMLStencilElement {
    }
    var HTMLRuxIconSaveAltElement: {
        prototype: HTMLRuxIconSaveAltElement;
        new (): HTMLRuxIconSaveAltElement;
    };
    interface HTMLRuxIconScannerElement extends Components.RuxIconScanner, HTMLStencilElement {
    }
    var HTMLRuxIconScannerElement: {
        prototype: HTMLRuxIconScannerElement;
        new (): HTMLRuxIconScannerElement;
    };
    interface HTMLRuxIconScatterPlotElement extends Components.RuxIconScatterPlot, HTMLStencilElement {
    }
    var HTMLRuxIconScatterPlotElement: {
        prototype: HTMLRuxIconScatterPlotElement;
        new (): HTMLRuxIconScatterPlotElement;
    };
    interface HTMLRuxIconScheduleElement extends Components.RuxIconSchedule, HTMLStencilElement {
    }
    var HTMLRuxIconScheduleElement: {
        prototype: HTMLRuxIconScheduleElement;
        new (): HTMLRuxIconScheduleElement;
    };
    interface HTMLRuxIconSchoolElement extends Components.RuxIconSchool, HTMLStencilElement {
    }
    var HTMLRuxIconSchoolElement: {
        prototype: HTMLRuxIconSchoolElement;
        new (): HTMLRuxIconSchoolElement;
    };
    interface HTMLRuxIconScoreElement extends Components.RuxIconScore, HTMLStencilElement {
    }
    var HTMLRuxIconScoreElement: {
        prototype: HTMLRuxIconScoreElement;
        new (): HTMLRuxIconScoreElement;
    };
    interface HTMLRuxIconScreenLockLandscapeElement extends Components.RuxIconScreenLockLandscape, HTMLStencilElement {
    }
    var HTMLRuxIconScreenLockLandscapeElement: {
        prototype: HTMLRuxIconScreenLockLandscapeElement;
        new (): HTMLRuxIconScreenLockLandscapeElement;
    };
    interface HTMLRuxIconScreenLockPortraitElement extends Components.RuxIconScreenLockPortrait, HTMLStencilElement {
    }
    var HTMLRuxIconScreenLockPortraitElement: {
        prototype: HTMLRuxIconScreenLockPortraitElement;
        new (): HTMLRuxIconScreenLockPortraitElement;
    };
    interface HTMLRuxIconScreenLockRotationElement extends Components.RuxIconScreenLockRotation, HTMLStencilElement {
    }
    var HTMLRuxIconScreenLockRotationElement: {
        prototype: HTMLRuxIconScreenLockRotationElement;
        new (): HTMLRuxIconScreenLockRotationElement;
    };
    interface HTMLRuxIconScreenRotationElement extends Components.RuxIconScreenRotation, HTMLStencilElement {
    }
    var HTMLRuxIconScreenRotationElement: {
        prototype: HTMLRuxIconScreenRotationElement;
        new (): HTMLRuxIconScreenRotationElement;
    };
    interface HTMLRuxIconScreenShareElement extends Components.RuxIconScreenShare, HTMLStencilElement {
    }
    var HTMLRuxIconScreenShareElement: {
        prototype: HTMLRuxIconScreenShareElement;
        new (): HTMLRuxIconScreenShareElement;
    };
    interface HTMLRuxIconSdCardElement extends Components.RuxIconSdCard, HTMLStencilElement {
    }
    var HTMLRuxIconSdCardElement: {
        prototype: HTMLRuxIconSdCardElement;
        new (): HTMLRuxIconSdCardElement;
    };
    interface HTMLRuxIconSdStorageElement extends Components.RuxIconSdStorage, HTMLStencilElement {
    }
    var HTMLRuxIconSdStorageElement: {
        prototype: HTMLRuxIconSdStorageElement;
        new (): HTMLRuxIconSdStorageElement;
    };
    interface HTMLRuxIconSearchElement extends Components.RuxIconSearch, HTMLStencilElement {
    }
    var HTMLRuxIconSearchElement: {
        prototype: HTMLRuxIconSearchElement;
        new (): HTMLRuxIconSearchElement;
    };
    interface HTMLRuxIconSeatElement extends Components.RuxIconSeat, HTMLStencilElement {
    }
    var HTMLRuxIconSeatElement: {
        prototype: HTMLRuxIconSeatElement;
        new (): HTMLRuxIconSeatElement;
    };
    interface HTMLRuxIconSecurityElement extends Components.RuxIconSecurity, HTMLStencilElement {
    }
    var HTMLRuxIconSecurityElement: {
        prototype: HTMLRuxIconSecurityElement;
        new (): HTMLRuxIconSecurityElement;
    };
    interface HTMLRuxIconSelectAllElement extends Components.RuxIconSelectAll, HTMLStencilElement {
    }
    var HTMLRuxIconSelectAllElement: {
        prototype: HTMLRuxIconSelectAllElement;
        new (): HTMLRuxIconSelectAllElement;
    };
    interface HTMLRuxIconSendElement extends Components.RuxIconSend, HTMLStencilElement {
    }
    var HTMLRuxIconSendElement: {
        prototype: HTMLRuxIconSendElement;
        new (): HTMLRuxIconSendElement;
    };
    interface HTMLRuxIconSentimentDissatisfiedElement extends Components.RuxIconSentimentDissatisfied, HTMLStencilElement {
    }
    var HTMLRuxIconSentimentDissatisfiedElement: {
        prototype: HTMLRuxIconSentimentDissatisfiedElement;
        new (): HTMLRuxIconSentimentDissatisfiedElement;
    };
    interface HTMLRuxIconSentimentSatisfiedElement extends Components.RuxIconSentimentSatisfied, HTMLStencilElement {
    }
    var HTMLRuxIconSentimentSatisfiedElement: {
        prototype: HTMLRuxIconSentimentSatisfiedElement;
        new (): HTMLRuxIconSentimentSatisfiedElement;
    };
    interface HTMLRuxIconSentimentSatisfiedAltElement extends Components.RuxIconSentimentSatisfiedAlt, HTMLStencilElement {
    }
    var HTMLRuxIconSentimentSatisfiedAltElement: {
        prototype: HTMLRuxIconSentimentSatisfiedAltElement;
        new (): HTMLRuxIconSentimentSatisfiedAltElement;
    };
    interface HTMLRuxIconSentimentVeryDissatisfiedElement extends Components.RuxIconSentimentVeryDissatisfied, HTMLStencilElement {
    }
    var HTMLRuxIconSentimentVeryDissatisfiedElement: {
        prototype: HTMLRuxIconSentimentVeryDissatisfiedElement;
        new (): HTMLRuxIconSentimentVeryDissatisfiedElement;
    };
    interface HTMLRuxIconSentimentVerySatisfiedElement extends Components.RuxIconSentimentVerySatisfied, HTMLStencilElement {
    }
    var HTMLRuxIconSentimentVerySatisfiedElement: {
        prototype: HTMLRuxIconSentimentVerySatisfiedElement;
        new (): HTMLRuxIconSentimentVerySatisfiedElement;
    };
    interface HTMLRuxIconSettingsElement extends Components.RuxIconSettings, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsElement: {
        prototype: HTMLRuxIconSettingsElement;
        new (): HTMLRuxIconSettingsElement;
    };
    interface HTMLRuxIconSettingsApplicationsElement extends Components.RuxIconSettingsApplications, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsApplicationsElement: {
        prototype: HTMLRuxIconSettingsApplicationsElement;
        new (): HTMLRuxIconSettingsApplicationsElement;
    };
    interface HTMLRuxIconSettingsBackupRestoreElement extends Components.RuxIconSettingsBackupRestore, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsBackupRestoreElement: {
        prototype: HTMLRuxIconSettingsBackupRestoreElement;
        new (): HTMLRuxIconSettingsBackupRestoreElement;
    };
    interface HTMLRuxIconSettingsBluetoothElement extends Components.RuxIconSettingsBluetooth, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsBluetoothElement: {
        prototype: HTMLRuxIconSettingsBluetoothElement;
        new (): HTMLRuxIconSettingsBluetoothElement;
    };
    interface HTMLRuxIconSettingsBrightnessElement extends Components.RuxIconSettingsBrightness, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsBrightnessElement: {
        prototype: HTMLRuxIconSettingsBrightnessElement;
        new (): HTMLRuxIconSettingsBrightnessElement;
    };
    interface HTMLRuxIconSettingsCellElement extends Components.RuxIconSettingsCell, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsCellElement: {
        prototype: HTMLRuxIconSettingsCellElement;
        new (): HTMLRuxIconSettingsCellElement;
    };
    interface HTMLRuxIconSettingsEthernetElement extends Components.RuxIconSettingsEthernet, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsEthernetElement: {
        prototype: HTMLRuxIconSettingsEthernetElement;
        new (): HTMLRuxIconSettingsEthernetElement;
    };
    interface HTMLRuxIconSettingsInputAntennaElement extends Components.RuxIconSettingsInputAntenna, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsInputAntennaElement: {
        prototype: HTMLRuxIconSettingsInputAntennaElement;
        new (): HTMLRuxIconSettingsInputAntennaElement;
    };
    interface HTMLRuxIconSettingsInputComponentElement extends Components.RuxIconSettingsInputComponent, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsInputComponentElement: {
        prototype: HTMLRuxIconSettingsInputComponentElement;
        new (): HTMLRuxIconSettingsInputComponentElement;
    };
    interface HTMLRuxIconSettingsInputCompositeElement extends Components.RuxIconSettingsInputComposite, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsInputCompositeElement: {
        prototype: HTMLRuxIconSettingsInputCompositeElement;
        new (): HTMLRuxIconSettingsInputCompositeElement;
    };
    interface HTMLRuxIconSettingsInputHdmiElement extends Components.RuxIconSettingsInputHdmi, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsInputHdmiElement: {
        prototype: HTMLRuxIconSettingsInputHdmiElement;
        new (): HTMLRuxIconSettingsInputHdmiElement;
    };
    interface HTMLRuxIconSettingsInputSvideoElement extends Components.RuxIconSettingsInputSvideo, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsInputSvideoElement: {
        prototype: HTMLRuxIconSettingsInputSvideoElement;
        new (): HTMLRuxIconSettingsInputSvideoElement;
    };
    interface HTMLRuxIconSettingsOverscanElement extends Components.RuxIconSettingsOverscan, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsOverscanElement: {
        prototype: HTMLRuxIconSettingsOverscanElement;
        new (): HTMLRuxIconSettingsOverscanElement;
    };
    interface HTMLRuxIconSettingsPhoneElement extends Components.RuxIconSettingsPhone, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsPhoneElement: {
        prototype: HTMLRuxIconSettingsPhoneElement;
        new (): HTMLRuxIconSettingsPhoneElement;
    };
    interface HTMLRuxIconSettingsPowerElement extends Components.RuxIconSettingsPower, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsPowerElement: {
        prototype: HTMLRuxIconSettingsPowerElement;
        new (): HTMLRuxIconSettingsPowerElement;
    };
    interface HTMLRuxIconSettingsRemoteElement extends Components.RuxIconSettingsRemote, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsRemoteElement: {
        prototype: HTMLRuxIconSettingsRemoteElement;
        new (): HTMLRuxIconSettingsRemoteElement;
    };
    interface HTMLRuxIconSettingsSystemDaydreamElement extends Components.RuxIconSettingsSystemDaydream, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsSystemDaydreamElement: {
        prototype: HTMLRuxIconSettingsSystemDaydreamElement;
        new (): HTMLRuxIconSettingsSystemDaydreamElement;
    };
    interface HTMLRuxIconSettingsVoiceElement extends Components.RuxIconSettingsVoice, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsVoiceElement: {
        prototype: HTMLRuxIconSettingsVoiceElement;
        new (): HTMLRuxIconSettingsVoiceElement;
    };
    interface HTMLRuxIconShareElement extends Components.RuxIconShare, HTMLStencilElement {
    }
    var HTMLRuxIconShareElement: {
        prototype: HTMLRuxIconShareElement;
        new (): HTMLRuxIconShareElement;
    };
    interface HTMLRuxIconShopElement extends Components.RuxIconShop, HTMLStencilElement {
    }
    var HTMLRuxIconShopElement: {
        prototype: HTMLRuxIconShopElement;
        new (): HTMLRuxIconShopElement;
    };
    interface HTMLRuxIconShopTwoElement extends Components.RuxIconShopTwo, HTMLStencilElement {
    }
    var HTMLRuxIconShopTwoElement: {
        prototype: HTMLRuxIconShopTwoElement;
        new (): HTMLRuxIconShopTwoElement;
    };
    interface HTMLRuxIconShoppingBasketElement extends Components.RuxIconShoppingBasket, HTMLStencilElement {
    }
    var HTMLRuxIconShoppingBasketElement: {
        prototype: HTMLRuxIconShoppingBasketElement;
        new (): HTMLRuxIconShoppingBasketElement;
    };
    interface HTMLRuxIconShoppingCartElement extends Components.RuxIconShoppingCart, HTMLStencilElement {
    }
    var HTMLRuxIconShoppingCartElement: {
        prototype: HTMLRuxIconShoppingCartElement;
        new (): HTMLRuxIconShoppingCartElement;
    };
    interface HTMLRuxIconShortTextElement extends Components.RuxIconShortText, HTMLStencilElement {
    }
    var HTMLRuxIconShortTextElement: {
        prototype: HTMLRuxIconShortTextElement;
        new (): HTMLRuxIconShortTextElement;
    };
    interface HTMLRuxIconShowChartElement extends Components.RuxIconShowChart, HTMLStencilElement {
    }
    var HTMLRuxIconShowChartElement: {
        prototype: HTMLRuxIconShowChartElement;
        new (): HTMLRuxIconShowChartElement;
    };
    interface HTMLRuxIconShuffleElement extends Components.RuxIconShuffle, HTMLStencilElement {
    }
    var HTMLRuxIconShuffleElement: {
        prototype: HTMLRuxIconShuffleElement;
        new (): HTMLRuxIconShuffleElement;
    };
    interface HTMLRuxIconShutterSpeedElement extends Components.RuxIconShutterSpeed, HTMLStencilElement {
    }
    var HTMLRuxIconShutterSpeedElement: {
        prototype: HTMLRuxIconShutterSpeedElement;
        new (): HTMLRuxIconShutterSpeedElement;
    };
    interface HTMLRuxIconSignalCellular0BarElement extends Components.RuxIconSignalCellular0Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellular0BarElement: {
        prototype: HTMLRuxIconSignalCellular0BarElement;
        new (): HTMLRuxIconSignalCellular0BarElement;
    };
    interface HTMLRuxIconSignalCellular1BarElement extends Components.RuxIconSignalCellular1Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellular1BarElement: {
        prototype: HTMLRuxIconSignalCellular1BarElement;
        new (): HTMLRuxIconSignalCellular1BarElement;
    };
    interface HTMLRuxIconSignalCellular2BarElement extends Components.RuxIconSignalCellular2Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellular2BarElement: {
        prototype: HTMLRuxIconSignalCellular2BarElement;
        new (): HTMLRuxIconSignalCellular2BarElement;
    };
    interface HTMLRuxIconSignalCellular3BarElement extends Components.RuxIconSignalCellular3Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellular3BarElement: {
        prototype: HTMLRuxIconSignalCellular3BarElement;
        new (): HTMLRuxIconSignalCellular3BarElement;
    };
    interface HTMLRuxIconSignalCellular4BarElement extends Components.RuxIconSignalCellular4Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellular4BarElement: {
        prototype: HTMLRuxIconSignalCellular4BarElement;
        new (): HTMLRuxIconSignalCellular4BarElement;
    };
    interface HTMLRuxIconSignalCellularAltElement extends Components.RuxIconSignalCellularAlt, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularAltElement: {
        prototype: HTMLRuxIconSignalCellularAltElement;
        new (): HTMLRuxIconSignalCellularAltElement;
    };
    interface HTMLRuxIconSignalCellularConnectedNoInternet0BarElement extends Components.RuxIconSignalCellularConnectedNoInternet0Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularConnectedNoInternet0BarElement: {
        prototype: HTMLRuxIconSignalCellularConnectedNoInternet0BarElement;
        new (): HTMLRuxIconSignalCellularConnectedNoInternet0BarElement;
    };
    interface HTMLRuxIconSignalCellularConnectedNoInternet1BarElement extends Components.RuxIconSignalCellularConnectedNoInternet1Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularConnectedNoInternet1BarElement: {
        prototype: HTMLRuxIconSignalCellularConnectedNoInternet1BarElement;
        new (): HTMLRuxIconSignalCellularConnectedNoInternet1BarElement;
    };
    interface HTMLRuxIconSignalCellularConnectedNoInternet2BarElement extends Components.RuxIconSignalCellularConnectedNoInternet2Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularConnectedNoInternet2BarElement: {
        prototype: HTMLRuxIconSignalCellularConnectedNoInternet2BarElement;
        new (): HTMLRuxIconSignalCellularConnectedNoInternet2BarElement;
    };
    interface HTMLRuxIconSignalCellularConnectedNoInternet3BarElement extends Components.RuxIconSignalCellularConnectedNoInternet3Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularConnectedNoInternet3BarElement: {
        prototype: HTMLRuxIconSignalCellularConnectedNoInternet3BarElement;
        new (): HTMLRuxIconSignalCellularConnectedNoInternet3BarElement;
    };
    interface HTMLRuxIconSignalCellularConnectedNoInternet4BarElement extends Components.RuxIconSignalCellularConnectedNoInternet4Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularConnectedNoInternet4BarElement: {
        prototype: HTMLRuxIconSignalCellularConnectedNoInternet4BarElement;
        new (): HTMLRuxIconSignalCellularConnectedNoInternet4BarElement;
    };
    interface HTMLRuxIconSignalCellularNoSimElement extends Components.RuxIconSignalCellularNoSim, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularNoSimElement: {
        prototype: HTMLRuxIconSignalCellularNoSimElement;
        new (): HTMLRuxIconSignalCellularNoSimElement;
    };
    interface HTMLRuxIconSignalCellularNullElement extends Components.RuxIconSignalCellularNull, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularNullElement: {
        prototype: HTMLRuxIconSignalCellularNullElement;
        new (): HTMLRuxIconSignalCellularNullElement;
    };
    interface HTMLRuxIconSignalCellularOffElement extends Components.RuxIconSignalCellularOff, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularOffElement: {
        prototype: HTMLRuxIconSignalCellularOffElement;
        new (): HTMLRuxIconSignalCellularOffElement;
    };
    interface HTMLRuxIconSignalWifi0BarElement extends Components.RuxIconSignalWifi0Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi0BarElement: {
        prototype: HTMLRuxIconSignalWifi0BarElement;
        new (): HTMLRuxIconSignalWifi0BarElement;
    };
    interface HTMLRuxIconSignalWifi1BarElement extends Components.RuxIconSignalWifi1Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi1BarElement: {
        prototype: HTMLRuxIconSignalWifi1BarElement;
        new (): HTMLRuxIconSignalWifi1BarElement;
    };
    interface HTMLRuxIconSignalWifi1BarLockElement extends Components.RuxIconSignalWifi1BarLock, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi1BarLockElement: {
        prototype: HTMLRuxIconSignalWifi1BarLockElement;
        new (): HTMLRuxIconSignalWifi1BarLockElement;
    };
    interface HTMLRuxIconSignalWifi2BarElement extends Components.RuxIconSignalWifi2Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi2BarElement: {
        prototype: HTMLRuxIconSignalWifi2BarElement;
        new (): HTMLRuxIconSignalWifi2BarElement;
    };
    interface HTMLRuxIconSignalWifi2BarLockElement extends Components.RuxIconSignalWifi2BarLock, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi2BarLockElement: {
        prototype: HTMLRuxIconSignalWifi2BarLockElement;
        new (): HTMLRuxIconSignalWifi2BarLockElement;
    };
    interface HTMLRuxIconSignalWifi3BarElement extends Components.RuxIconSignalWifi3Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi3BarElement: {
        prototype: HTMLRuxIconSignalWifi3BarElement;
        new (): HTMLRuxIconSignalWifi3BarElement;
    };
    interface HTMLRuxIconSignalWifi3BarLockElement extends Components.RuxIconSignalWifi3BarLock, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi3BarLockElement: {
        prototype: HTMLRuxIconSignalWifi3BarLockElement;
        new (): HTMLRuxIconSignalWifi3BarLockElement;
    };
    interface HTMLRuxIconSignalWifi4BarElement extends Components.RuxIconSignalWifi4Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi4BarElement: {
        prototype: HTMLRuxIconSignalWifi4BarElement;
        new (): HTMLRuxIconSignalWifi4BarElement;
    };
    interface HTMLRuxIconSignalWifi4BarLockElement extends Components.RuxIconSignalWifi4BarLock, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi4BarLockElement: {
        prototype: HTMLRuxIconSignalWifi4BarLockElement;
        new (): HTMLRuxIconSignalWifi4BarLockElement;
    };
    interface HTMLRuxIconSignalWifiOffElement extends Components.RuxIconSignalWifiOff, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifiOffElement: {
        prototype: HTMLRuxIconSignalWifiOffElement;
        new (): HTMLRuxIconSignalWifiOffElement;
    };
    interface HTMLRuxIconSimCardElement extends Components.RuxIconSimCard, HTMLStencilElement {
    }
    var HTMLRuxIconSimCardElement: {
        prototype: HTMLRuxIconSimCardElement;
        new (): HTMLRuxIconSimCardElement;
    };
    interface HTMLRuxIconSkipNextElement extends Components.RuxIconSkipNext, HTMLStencilElement {
    }
    var HTMLRuxIconSkipNextElement: {
        prototype: HTMLRuxIconSkipNextElement;
        new (): HTMLRuxIconSkipNextElement;
    };
    interface HTMLRuxIconSkipPreviousElement extends Components.RuxIconSkipPrevious, HTMLStencilElement {
    }
    var HTMLRuxIconSkipPreviousElement: {
        prototype: HTMLRuxIconSkipPreviousElement;
        new (): HTMLRuxIconSkipPreviousElement;
    };
    interface HTMLRuxIconSlideshowElement extends Components.RuxIconSlideshow, HTMLStencilElement {
    }
    var HTMLRuxIconSlideshowElement: {
        prototype: HTMLRuxIconSlideshowElement;
        new (): HTMLRuxIconSlideshowElement;
    };
    interface HTMLRuxIconSlowMotionVideoElement extends Components.RuxIconSlowMotionVideo, HTMLStencilElement {
    }
    var HTMLRuxIconSlowMotionVideoElement: {
        prototype: HTMLRuxIconSlowMotionVideoElement;
        new (): HTMLRuxIconSlowMotionVideoElement;
    };
    interface HTMLRuxIconSmartphoneElement extends Components.RuxIconSmartphone, HTMLStencilElement {
    }
    var HTMLRuxIconSmartphoneElement: {
        prototype: HTMLRuxIconSmartphoneElement;
        new (): HTMLRuxIconSmartphoneElement;
    };
    interface HTMLRuxIconSmokeFreeElement extends Components.RuxIconSmokeFree, HTMLStencilElement {
    }
    var HTMLRuxIconSmokeFreeElement: {
        prototype: HTMLRuxIconSmokeFreeElement;
        new (): HTMLRuxIconSmokeFreeElement;
    };
    interface HTMLRuxIconSmokingRoomsElement extends Components.RuxIconSmokingRooms, HTMLStencilElement {
    }
    var HTMLRuxIconSmokingRoomsElement: {
        prototype: HTMLRuxIconSmokingRoomsElement;
        new (): HTMLRuxIconSmokingRoomsElement;
    };
    interface HTMLRuxIconSmsElement extends Components.RuxIconSms, HTMLStencilElement {
    }
    var HTMLRuxIconSmsElement: {
        prototype: HTMLRuxIconSmsElement;
        new (): HTMLRuxIconSmsElement;
    };
    interface HTMLRuxIconSmsFailedElement extends Components.RuxIconSmsFailed, HTMLStencilElement {
    }
    var HTMLRuxIconSmsFailedElement: {
        prototype: HTMLRuxIconSmsFailedElement;
        new (): HTMLRuxIconSmsFailedElement;
    };
    interface HTMLRuxIconSnoozeElement extends Components.RuxIconSnooze, HTMLStencilElement {
    }
    var HTMLRuxIconSnoozeElement: {
        prototype: HTMLRuxIconSnoozeElement;
        new (): HTMLRuxIconSnoozeElement;
    };
    interface HTMLRuxIconSolarElement extends Components.RuxIconSolar, HTMLStencilElement {
    }
    var HTMLRuxIconSolarElement: {
        prototype: HTMLRuxIconSolarElement;
        new (): HTMLRuxIconSolarElement;
    };
    interface HTMLRuxIconSortElement extends Components.RuxIconSort, HTMLStencilElement {
    }
    var HTMLRuxIconSortElement: {
        prototype: HTMLRuxIconSortElement;
        new (): HTMLRuxIconSortElement;
    };
    interface HTMLRuxIconSortByAlphaElement extends Components.RuxIconSortByAlpha, HTMLStencilElement {
    }
    var HTMLRuxIconSortByAlphaElement: {
        prototype: HTMLRuxIconSortByAlphaElement;
        new (): HTMLRuxIconSortByAlphaElement;
    };
    interface HTMLRuxIconSpaElement extends Components.RuxIconSpa, HTMLStencilElement {
    }
    var HTMLRuxIconSpaElement: {
        prototype: HTMLRuxIconSpaElement;
        new (): HTMLRuxIconSpaElement;
    };
    interface HTMLRuxIconSpaceBarElement extends Components.RuxIconSpaceBar, HTMLStencilElement {
    }
    var HTMLRuxIconSpaceBarElement: {
        prototype: HTMLRuxIconSpaceBarElement;
        new (): HTMLRuxIconSpaceBarElement;
    };
    interface HTMLRuxIconSpeakerElement extends Components.RuxIconSpeaker, HTMLStencilElement {
    }
    var HTMLRuxIconSpeakerElement: {
        prototype: HTMLRuxIconSpeakerElement;
        new (): HTMLRuxIconSpeakerElement;
    };
    interface HTMLRuxIconSpeakerGroupElement extends Components.RuxIconSpeakerGroup, HTMLStencilElement {
    }
    var HTMLRuxIconSpeakerGroupElement: {
        prototype: HTMLRuxIconSpeakerGroupElement;
        new (): HTMLRuxIconSpeakerGroupElement;
    };
    interface HTMLRuxIconSpeakerNotesElement extends Components.RuxIconSpeakerNotes, HTMLStencilElement {
    }
    var HTMLRuxIconSpeakerNotesElement: {
        prototype: HTMLRuxIconSpeakerNotesElement;
        new (): HTMLRuxIconSpeakerNotesElement;
    };
    interface HTMLRuxIconSpeakerNotesOffElement extends Components.RuxIconSpeakerNotesOff, HTMLStencilElement {
    }
    var HTMLRuxIconSpeakerNotesOffElement: {
        prototype: HTMLRuxIconSpeakerNotesOffElement;
        new (): HTMLRuxIconSpeakerNotesOffElement;
    };
    interface HTMLRuxIconSpeakerPhoneElement extends Components.RuxIconSpeakerPhone, HTMLStencilElement {
    }
    var HTMLRuxIconSpeakerPhoneElement: {
        prototype: HTMLRuxIconSpeakerPhoneElement;
        new (): HTMLRuxIconSpeakerPhoneElement;
    };
    interface HTMLRuxIconSpellcheckElement extends Components.RuxIconSpellcheck, HTMLStencilElement {
    }
    var HTMLRuxIconSpellcheckElement: {
        prototype: HTMLRuxIconSpellcheckElement;
        new (): HTMLRuxIconSpellcheckElement;
    };
    interface HTMLRuxIconStarElement extends Components.RuxIconStar, HTMLStencilElement {
    }
    var HTMLRuxIconStarElement: {
        prototype: HTMLRuxIconStarElement;
        new (): HTMLRuxIconStarElement;
    };
    interface HTMLRuxIconStarBorderElement extends Components.RuxIconStarBorder, HTMLStencilElement {
    }
    var HTMLRuxIconStarBorderElement: {
        prototype: HTMLRuxIconStarBorderElement;
        new (): HTMLRuxIconStarBorderElement;
    };
    interface HTMLRuxIconStarHalfElement extends Components.RuxIconStarHalf, HTMLStencilElement {
    }
    var HTMLRuxIconStarHalfElement: {
        prototype: HTMLRuxIconStarHalfElement;
        new (): HTMLRuxIconStarHalfElement;
    };
    interface HTMLRuxIconStarRateElement extends Components.RuxIconStarRate, HTMLStencilElement {
    }
    var HTMLRuxIconStarRateElement: {
        prototype: HTMLRuxIconStarRateElement;
        new (): HTMLRuxIconStarRateElement;
    };
    interface HTMLRuxIconStarsElement extends Components.RuxIconStars, HTMLStencilElement {
    }
    var HTMLRuxIconStarsElement: {
        prototype: HTMLRuxIconStarsElement;
        new (): HTMLRuxIconStarsElement;
    };
    interface HTMLRuxIconStayCurrentLandscapeElement extends Components.RuxIconStayCurrentLandscape, HTMLStencilElement {
    }
    var HTMLRuxIconStayCurrentLandscapeElement: {
        prototype: HTMLRuxIconStayCurrentLandscapeElement;
        new (): HTMLRuxIconStayCurrentLandscapeElement;
    };
    interface HTMLRuxIconStayCurrentPortraitElement extends Components.RuxIconStayCurrentPortrait, HTMLStencilElement {
    }
    var HTMLRuxIconStayCurrentPortraitElement: {
        prototype: HTMLRuxIconStayCurrentPortraitElement;
        new (): HTMLRuxIconStayCurrentPortraitElement;
    };
    interface HTMLRuxIconStayPrimaryLandscapeElement extends Components.RuxIconStayPrimaryLandscape, HTMLStencilElement {
    }
    var HTMLRuxIconStayPrimaryLandscapeElement: {
        prototype: HTMLRuxIconStayPrimaryLandscapeElement;
        new (): HTMLRuxIconStayPrimaryLandscapeElement;
    };
    interface HTMLRuxIconStayPrimaryPortraitElement extends Components.RuxIconStayPrimaryPortrait, HTMLStencilElement {
    }
    var HTMLRuxIconStayPrimaryPortraitElement: {
        prototype: HTMLRuxIconStayPrimaryPortraitElement;
        new (): HTMLRuxIconStayPrimaryPortraitElement;
    };
    interface HTMLRuxIconStopElement extends Components.RuxIconStop, HTMLStencilElement {
    }
    var HTMLRuxIconStopElement: {
        prototype: HTMLRuxIconStopElement;
        new (): HTMLRuxIconStopElement;
    };
    interface HTMLRuxIconStopScreenShareElement extends Components.RuxIconStopScreenShare, HTMLStencilElement {
    }
    var HTMLRuxIconStopScreenShareElement: {
        prototype: HTMLRuxIconStopScreenShareElement;
        new (): HTMLRuxIconStopScreenShareElement;
    };
    interface HTMLRuxIconStorageElement extends Components.RuxIconStorage, HTMLStencilElement {
    }
    var HTMLRuxIconStorageElement: {
        prototype: HTMLRuxIconStorageElement;
        new (): HTMLRuxIconStorageElement;
    };
    interface HTMLRuxIconStoreElement extends Components.RuxIconStore, HTMLStencilElement {
    }
    var HTMLRuxIconStoreElement: {
        prototype: HTMLRuxIconStoreElement;
        new (): HTMLRuxIconStoreElement;
    };
    interface HTMLRuxIconStoreMallDirectoryElement extends Components.RuxIconStoreMallDirectory, HTMLStencilElement {
    }
    var HTMLRuxIconStoreMallDirectoryElement: {
        prototype: HTMLRuxIconStoreMallDirectoryElement;
        new (): HTMLRuxIconStoreMallDirectoryElement;
    };
    interface HTMLRuxIconStraightenElement extends Components.RuxIconStraighten, HTMLStencilElement {
    }
    var HTMLRuxIconStraightenElement: {
        prototype: HTMLRuxIconStraightenElement;
        new (): HTMLRuxIconStraightenElement;
    };
    interface HTMLRuxIconStreetviewElement extends Components.RuxIconStreetview, HTMLStencilElement {
    }
    var HTMLRuxIconStreetviewElement: {
        prototype: HTMLRuxIconStreetviewElement;
        new (): HTMLRuxIconStreetviewElement;
    };
    interface HTMLRuxIconStrikethroughSElement extends Components.RuxIconStrikethroughS, HTMLStencilElement {
    }
    var HTMLRuxIconStrikethroughSElement: {
        prototype: HTMLRuxIconStrikethroughSElement;
        new (): HTMLRuxIconStrikethroughSElement;
    };
    interface HTMLRuxIconStyleElement extends Components.RuxIconStyle, HTMLStencilElement {
    }
    var HTMLRuxIconStyleElement: {
        prototype: HTMLRuxIconStyleElement;
        new (): HTMLRuxIconStyleElement;
    };
    interface HTMLRuxIconSubdirectoryArrowLeftElement extends Components.RuxIconSubdirectoryArrowLeft, HTMLStencilElement {
    }
    var HTMLRuxIconSubdirectoryArrowLeftElement: {
        prototype: HTMLRuxIconSubdirectoryArrowLeftElement;
        new (): HTMLRuxIconSubdirectoryArrowLeftElement;
    };
    interface HTMLRuxIconSubdirectoryArrowRightElement extends Components.RuxIconSubdirectoryArrowRight, HTMLStencilElement {
    }
    var HTMLRuxIconSubdirectoryArrowRightElement: {
        prototype: HTMLRuxIconSubdirectoryArrowRightElement;
        new (): HTMLRuxIconSubdirectoryArrowRightElement;
    };
    interface HTMLRuxIconSubjectElement extends Components.RuxIconSubject, HTMLStencilElement {
    }
    var HTMLRuxIconSubjectElement: {
        prototype: HTMLRuxIconSubjectElement;
        new (): HTMLRuxIconSubjectElement;
    };
    interface HTMLRuxIconSubscriptionsElement extends Components.RuxIconSubscriptions, HTMLStencilElement {
    }
    var HTMLRuxIconSubscriptionsElement: {
        prototype: HTMLRuxIconSubscriptionsElement;
        new (): HTMLRuxIconSubscriptionsElement;
    };
    interface HTMLRuxIconSubtitlesElement extends Components.RuxIconSubtitles, HTMLStencilElement {
    }
    var HTMLRuxIconSubtitlesElement: {
        prototype: HTMLRuxIconSubtitlesElement;
        new (): HTMLRuxIconSubtitlesElement;
    };
    interface HTMLRuxIconSubwayElement extends Components.RuxIconSubway, HTMLStencilElement {
    }
    var HTMLRuxIconSubwayElement: {
        prototype: HTMLRuxIconSubwayElement;
        new (): HTMLRuxIconSubwayElement;
    };
    interface HTMLRuxIconSupervisedUserCircleElement extends Components.RuxIconSupervisedUserCircle, HTMLStencilElement {
    }
    var HTMLRuxIconSupervisedUserCircleElement: {
        prototype: HTMLRuxIconSupervisedUserCircleElement;
        new (): HTMLRuxIconSupervisedUserCircleElement;
    };
    interface HTMLRuxIconSupervisorAccountElement extends Components.RuxIconSupervisorAccount, HTMLStencilElement {
    }
    var HTMLRuxIconSupervisorAccountElement: {
        prototype: HTMLRuxIconSupervisorAccountElement;
        new (): HTMLRuxIconSupervisorAccountElement;
    };
    interface HTMLRuxIconSurroundSoundElement extends Components.RuxIconSurroundSound, HTMLStencilElement {
    }
    var HTMLRuxIconSurroundSoundElement: {
        prototype: HTMLRuxIconSurroundSoundElement;
        new (): HTMLRuxIconSurroundSoundElement;
    };
    interface HTMLRuxIconSwapCallsElement extends Components.RuxIconSwapCalls, HTMLStencilElement {
    }
    var HTMLRuxIconSwapCallsElement: {
        prototype: HTMLRuxIconSwapCallsElement;
        new (): HTMLRuxIconSwapCallsElement;
    };
    interface HTMLRuxIconSwapHorizElement extends Components.RuxIconSwapHoriz, HTMLStencilElement {
    }
    var HTMLRuxIconSwapHorizElement: {
        prototype: HTMLRuxIconSwapHorizElement;
        new (): HTMLRuxIconSwapHorizElement;
    };
    interface HTMLRuxIconSwapHorizontalCircleElement extends Components.RuxIconSwapHorizontalCircle, HTMLStencilElement {
    }
    var HTMLRuxIconSwapHorizontalCircleElement: {
        prototype: HTMLRuxIconSwapHorizontalCircleElement;
        new (): HTMLRuxIconSwapHorizontalCircleElement;
    };
    interface HTMLRuxIconSwapVertElement extends Components.RuxIconSwapVert, HTMLStencilElement {
    }
    var HTMLRuxIconSwapVertElement: {
        prototype: HTMLRuxIconSwapVertElement;
        new (): HTMLRuxIconSwapVertElement;
    };
    interface HTMLRuxIconSwapVerticalCircleElement extends Components.RuxIconSwapVerticalCircle, HTMLStencilElement {
    }
    var HTMLRuxIconSwapVerticalCircleElement: {
        prototype: HTMLRuxIconSwapVerticalCircleElement;
        new (): HTMLRuxIconSwapVerticalCircleElement;
    };
    interface HTMLRuxIconSwitchCameraElement extends Components.RuxIconSwitchCamera, HTMLStencilElement {
    }
    var HTMLRuxIconSwitchCameraElement: {
        prototype: HTMLRuxIconSwitchCameraElement;
        new (): HTMLRuxIconSwitchCameraElement;
    };
    interface HTMLRuxIconSwitchVideoElement extends Components.RuxIconSwitchVideo, HTMLStencilElement {
    }
    var HTMLRuxIconSwitchVideoElement: {
        prototype: HTMLRuxIconSwitchVideoElement;
        new (): HTMLRuxIconSwitchVideoElement;
    };
    interface HTMLRuxIconSyncElement extends Components.RuxIconSync, HTMLStencilElement {
    }
    var HTMLRuxIconSyncElement: {
        prototype: HTMLRuxIconSyncElement;
        new (): HTMLRuxIconSyncElement;
    };
    interface HTMLRuxIconSyncDisabledElement extends Components.RuxIconSyncDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconSyncDisabledElement: {
        prototype: HTMLRuxIconSyncDisabledElement;
        new (): HTMLRuxIconSyncDisabledElement;
    };
    interface HTMLRuxIconSyncProblemElement extends Components.RuxIconSyncProblem, HTMLStencilElement {
    }
    var HTMLRuxIconSyncProblemElement: {
        prototype: HTMLRuxIconSyncProblemElement;
        new (): HTMLRuxIconSyncProblemElement;
    };
    interface HTMLRuxIconSystemUpdateElement extends Components.RuxIconSystemUpdate, HTMLStencilElement {
    }
    var HTMLRuxIconSystemUpdateElement: {
        prototype: HTMLRuxIconSystemUpdateElement;
        new (): HTMLRuxIconSystemUpdateElement;
    };
    interface HTMLRuxIconTabElement extends Components.RuxIconTab, HTMLStencilElement {
    }
    var HTMLRuxIconTabElement: {
        prototype: HTMLRuxIconTabElement;
        new (): HTMLRuxIconTabElement;
    };
    interface HTMLRuxIconTabUnselectedElement extends Components.RuxIconTabUnselected, HTMLStencilElement {
    }
    var HTMLRuxIconTabUnselectedElement: {
        prototype: HTMLRuxIconTabUnselectedElement;
        new (): HTMLRuxIconTabUnselectedElement;
    };
    interface HTMLRuxIconTableChartElement extends Components.RuxIconTableChart, HTMLStencilElement {
    }
    var HTMLRuxIconTableChartElement: {
        prototype: HTMLRuxIconTableChartElement;
        new (): HTMLRuxIconTableChartElement;
    };
    interface HTMLRuxIconTabletElement extends Components.RuxIconTablet, HTMLStencilElement {
    }
    var HTMLRuxIconTabletElement: {
        prototype: HTMLRuxIconTabletElement;
        new (): HTMLRuxIconTabletElement;
    };
    interface HTMLRuxIconTabletAndroidElement extends Components.RuxIconTabletAndroid, HTMLStencilElement {
    }
    var HTMLRuxIconTabletAndroidElement: {
        prototype: HTMLRuxIconTabletAndroidElement;
        new (): HTMLRuxIconTabletAndroidElement;
    };
    interface HTMLRuxIconTabletMacElement extends Components.RuxIconTabletMac, HTMLStencilElement {
    }
    var HTMLRuxIconTabletMacElement: {
        prototype: HTMLRuxIconTabletMacElement;
        new (): HTMLRuxIconTabletMacElement;
    };
    interface HTMLRuxIconTagFacesElement extends Components.RuxIconTagFaces, HTMLStencilElement {
    }
    var HTMLRuxIconTagFacesElement: {
        prototype: HTMLRuxIconTagFacesElement;
        new (): HTMLRuxIconTagFacesElement;
    };
    interface HTMLRuxIconTapAndPlayElement extends Components.RuxIconTapAndPlay, HTMLStencilElement {
    }
    var HTMLRuxIconTapAndPlayElement: {
        prototype: HTMLRuxIconTapAndPlayElement;
        new (): HTMLRuxIconTapAndPlayElement;
    };
    interface HTMLRuxIconTerrainElement extends Components.RuxIconTerrain, HTMLStencilElement {
    }
    var HTMLRuxIconTerrainElement: {
        prototype: HTMLRuxIconTerrainElement;
        new (): HTMLRuxIconTerrainElement;
    };
    interface HTMLRuxIconTextFieldsElement extends Components.RuxIconTextFields, HTMLStencilElement {
    }
    var HTMLRuxIconTextFieldsElement: {
        prototype: HTMLRuxIconTextFieldsElement;
        new (): HTMLRuxIconTextFieldsElement;
    };
    interface HTMLRuxIconTextFormatElement extends Components.RuxIconTextFormat, HTMLStencilElement {
    }
    var HTMLRuxIconTextFormatElement: {
        prototype: HTMLRuxIconTextFormatElement;
        new (): HTMLRuxIconTextFormatElement;
    };
    interface HTMLRuxIconTextRotateUpElement extends Components.RuxIconTextRotateUp, HTMLStencilElement {
    }
    var HTMLRuxIconTextRotateUpElement: {
        prototype: HTMLRuxIconTextRotateUpElement;
        new (): HTMLRuxIconTextRotateUpElement;
    };
    interface HTMLRuxIconTextRotateVerticalElement extends Components.RuxIconTextRotateVertical, HTMLStencilElement {
    }
    var HTMLRuxIconTextRotateVerticalElement: {
        prototype: HTMLRuxIconTextRotateVerticalElement;
        new (): HTMLRuxIconTextRotateVerticalElement;
    };
    interface HTMLRuxIconTextRotationNoneElement extends Components.RuxIconTextRotationNone, HTMLStencilElement {
    }
    var HTMLRuxIconTextRotationNoneElement: {
        prototype: HTMLRuxIconTextRotationNoneElement;
        new (): HTMLRuxIconTextRotationNoneElement;
    };
    interface HTMLRuxIconTextsmsElement extends Components.RuxIconTextsms, HTMLStencilElement {
    }
    var HTMLRuxIconTextsmsElement: {
        prototype: HTMLRuxIconTextsmsElement;
        new (): HTMLRuxIconTextsmsElement;
    };
    interface HTMLRuxIconTextureElement extends Components.RuxIconTexture, HTMLStencilElement {
    }
    var HTMLRuxIconTextureElement: {
        prototype: HTMLRuxIconTextureElement;
        new (): HTMLRuxIconTextureElement;
    };
    interface HTMLRuxIconTheatersElement extends Components.RuxIconTheaters, HTMLStencilElement {
    }
    var HTMLRuxIconTheatersElement: {
        prototype: HTMLRuxIconTheatersElement;
        new (): HTMLRuxIconTheatersElement;
    };
    interface HTMLRuxIconThermalElement extends Components.RuxIconThermal, HTMLStencilElement {
    }
    var HTMLRuxIconThermalElement: {
        prototype: HTMLRuxIconThermalElement;
        new (): HTMLRuxIconThermalElement;
    };
    interface HTMLRuxIconThumbDownElement extends Components.RuxIconThumbDown, HTMLStencilElement {
    }
    var HTMLRuxIconThumbDownElement: {
        prototype: HTMLRuxIconThumbDownElement;
        new (): HTMLRuxIconThumbDownElement;
    };
    interface HTMLRuxIconThumbDownAltElement extends Components.RuxIconThumbDownAlt, HTMLStencilElement {
    }
    var HTMLRuxIconThumbDownAltElement: {
        prototype: HTMLRuxIconThumbDownAltElement;
        new (): HTMLRuxIconThumbDownAltElement;
    };
    interface HTMLRuxIconThumbUpElement extends Components.RuxIconThumbUp, HTMLStencilElement {
    }
    var HTMLRuxIconThumbUpElement: {
        prototype: HTMLRuxIconThumbUpElement;
        new (): HTMLRuxIconThumbUpElement;
    };
    interface HTMLRuxIconThumbUpAltElement extends Components.RuxIconThumbUpAlt, HTMLStencilElement {
    }
    var HTMLRuxIconThumbUpAltElement: {
        prototype: HTMLRuxIconThumbUpAltElement;
        new (): HTMLRuxIconThumbUpAltElement;
    };
    interface HTMLRuxIconThumbsUpDownElement extends Components.RuxIconThumbsUpDown, HTMLStencilElement {
    }
    var HTMLRuxIconThumbsUpDownElement: {
        prototype: HTMLRuxIconThumbsUpDownElement;
        new (): HTMLRuxIconThumbsUpDownElement;
    };
    interface HTMLRuxIconTimeToLeaveElement extends Components.RuxIconTimeToLeave, HTMLStencilElement {
    }
    var HTMLRuxIconTimeToLeaveElement: {
        prototype: HTMLRuxIconTimeToLeaveElement;
        new (): HTMLRuxIconTimeToLeaveElement;
    };
    interface HTMLRuxIconTimelapseElement extends Components.RuxIconTimelapse, HTMLStencilElement {
    }
    var HTMLRuxIconTimelapseElement: {
        prototype: HTMLRuxIconTimelapseElement;
        new (): HTMLRuxIconTimelapseElement;
    };
    interface HTMLRuxIconTimelineElement extends Components.RuxIconTimeline, HTMLStencilElement {
    }
    var HTMLRuxIconTimelineElement: {
        prototype: HTMLRuxIconTimelineElement;
        new (): HTMLRuxIconTimelineElement;
    };
    interface HTMLRuxIconTimerElement extends Components.RuxIconTimer, HTMLStencilElement {
    }
    var HTMLRuxIconTimerElement: {
        prototype: HTMLRuxIconTimerElement;
        new (): HTMLRuxIconTimerElement;
    };
    interface HTMLRuxIconTimer10Element extends Components.RuxIconTimer10, HTMLStencilElement {
    }
    var HTMLRuxIconTimer10Element: {
        prototype: HTMLRuxIconTimer10Element;
        new (): HTMLRuxIconTimer10Element;
    };
    interface HTMLRuxIconTimer3Element extends Components.RuxIconTimer3, HTMLStencilElement {
    }
    var HTMLRuxIconTimer3Element: {
        prototype: HTMLRuxIconTimer3Element;
        new (): HTMLRuxIconTimer3Element;
    };
    interface HTMLRuxIconTimerOffElement extends Components.RuxIconTimerOff, HTMLStencilElement {
    }
    var HTMLRuxIconTimerOffElement: {
        prototype: HTMLRuxIconTimerOffElement;
        new (): HTMLRuxIconTimerOffElement;
    };
    interface HTMLRuxIconTitleElement extends Components.RuxIconTitle, HTMLStencilElement {
    }
    var HTMLRuxIconTitleElement: {
        prototype: HTMLRuxIconTitleElement;
        new (): HTMLRuxIconTitleElement;
    };
    interface HTMLRuxIconTocElement extends Components.RuxIconToc, HTMLStencilElement {
    }
    var HTMLRuxIconTocElement: {
        prototype: HTMLRuxIconTocElement;
        new (): HTMLRuxIconTocElement;
    };
    interface HTMLRuxIconTodayElement extends Components.RuxIconToday, HTMLStencilElement {
    }
    var HTMLRuxIconTodayElement: {
        prototype: HTMLRuxIconTodayElement;
        new (): HTMLRuxIconTodayElement;
    };
    interface HTMLRuxIconToggleOffElement extends Components.RuxIconToggleOff, HTMLStencilElement {
    }
    var HTMLRuxIconToggleOffElement: {
        prototype: HTMLRuxIconToggleOffElement;
        new (): HTMLRuxIconToggleOffElement;
    };
    interface HTMLRuxIconToggleOnElement extends Components.RuxIconToggleOn, HTMLStencilElement {
    }
    var HTMLRuxIconToggleOnElement: {
        prototype: HTMLRuxIconToggleOnElement;
        new (): HTMLRuxIconToggleOnElement;
    };
    interface HTMLRuxIconTollElement extends Components.RuxIconToll, HTMLStencilElement {
    }
    var HTMLRuxIconTollElement: {
        prototype: HTMLRuxIconTollElement;
        new (): HTMLRuxIconTollElement;
    };
    interface HTMLRuxIconTonalityElement extends Components.RuxIconTonality, HTMLStencilElement {
    }
    var HTMLRuxIconTonalityElement: {
        prototype: HTMLRuxIconTonalityElement;
        new (): HTMLRuxIconTonalityElement;
    };
    interface HTMLRuxIconTouchAppElement extends Components.RuxIconTouchApp, HTMLStencilElement {
    }
    var HTMLRuxIconTouchAppElement: {
        prototype: HTMLRuxIconTouchAppElement;
        new (): HTMLRuxIconTouchAppElement;
    };
    interface HTMLRuxIconToysElement extends Components.RuxIconToys, HTMLStencilElement {
    }
    var HTMLRuxIconToysElement: {
        prototype: HTMLRuxIconToysElement;
        new (): HTMLRuxIconToysElement;
    };
    interface HTMLRuxIconTrackChangesElement extends Components.RuxIconTrackChanges, HTMLStencilElement {
    }
    var HTMLRuxIconTrackChangesElement: {
        prototype: HTMLRuxIconTrackChangesElement;
        new (): HTMLRuxIconTrackChangesElement;
    };
    interface HTMLRuxIconTrafficElement extends Components.RuxIconTraffic, HTMLStencilElement {
    }
    var HTMLRuxIconTrafficElement: {
        prototype: HTMLRuxIconTrafficElement;
        new (): HTMLRuxIconTrafficElement;
    };
    interface HTMLRuxIconTrainElement extends Components.RuxIconTrain, HTMLStencilElement {
    }
    var HTMLRuxIconTrainElement: {
        prototype: HTMLRuxIconTrainElement;
        new (): HTMLRuxIconTrainElement;
    };
    interface HTMLRuxIconTramElement extends Components.RuxIconTram, HTMLStencilElement {
    }
    var HTMLRuxIconTramElement: {
        prototype: HTMLRuxIconTramElement;
        new (): HTMLRuxIconTramElement;
    };
    interface HTMLRuxIconTransferWithinAStationElement extends Components.RuxIconTransferWithinAStation, HTMLStencilElement {
    }
    var HTMLRuxIconTransferWithinAStationElement: {
        prototype: HTMLRuxIconTransferWithinAStationElement;
        new (): HTMLRuxIconTransferWithinAStationElement;
    };
    interface HTMLRuxIconTransformElement extends Components.RuxIconTransform, HTMLStencilElement {
    }
    var HTMLRuxIconTransformElement: {
        prototype: HTMLRuxIconTransformElement;
        new (): HTMLRuxIconTransformElement;
    };
    interface HTMLRuxIconTransitEnterexitElement extends Components.RuxIconTransitEnterexit, HTMLStencilElement {
    }
    var HTMLRuxIconTransitEnterexitElement: {
        prototype: HTMLRuxIconTransitEnterexitElement;
        new (): HTMLRuxIconTransitEnterexitElement;
    };
    interface HTMLRuxIconTranslateElement extends Components.RuxIconTranslate, HTMLStencilElement {
    }
    var HTMLRuxIconTranslateElement: {
        prototype: HTMLRuxIconTranslateElement;
        new (): HTMLRuxIconTranslateElement;
    };
    interface HTMLRuxIconTrendingDownElement extends Components.RuxIconTrendingDown, HTMLStencilElement {
    }
    var HTMLRuxIconTrendingDownElement: {
        prototype: HTMLRuxIconTrendingDownElement;
        new (): HTMLRuxIconTrendingDownElement;
    };
    interface HTMLRuxIconTrendingFlatElement extends Components.RuxIconTrendingFlat, HTMLStencilElement {
    }
    var HTMLRuxIconTrendingFlatElement: {
        prototype: HTMLRuxIconTrendingFlatElement;
        new (): HTMLRuxIconTrendingFlatElement;
    };
    interface HTMLRuxIconTrendingUpElement extends Components.RuxIconTrendingUp, HTMLStencilElement {
    }
    var HTMLRuxIconTrendingUpElement: {
        prototype: HTMLRuxIconTrendingUpElement;
        new (): HTMLRuxIconTrendingUpElement;
    };
    interface HTMLRuxIconTripOriginElement extends Components.RuxIconTripOrigin, HTMLStencilElement {
    }
    var HTMLRuxIconTripOriginElement: {
        prototype: HTMLRuxIconTripOriginElement;
        new (): HTMLRuxIconTripOriginElement;
    };
    interface HTMLRuxIconTuneElement extends Components.RuxIconTune, HTMLStencilElement {
    }
    var HTMLRuxIconTuneElement: {
        prototype: HTMLRuxIconTuneElement;
        new (): HTMLRuxIconTuneElement;
    };
    interface HTMLRuxIconTurnedInElement extends Components.RuxIconTurnedIn, HTMLStencilElement {
    }
    var HTMLRuxIconTurnedInElement: {
        prototype: HTMLRuxIconTurnedInElement;
        new (): HTMLRuxIconTurnedInElement;
    };
    interface HTMLRuxIconTurnedInNotElement extends Components.RuxIconTurnedInNot, HTMLStencilElement {
    }
    var HTMLRuxIconTurnedInNotElement: {
        prototype: HTMLRuxIconTurnedInNotElement;
        new (): HTMLRuxIconTurnedInNotElement;
    };
    interface HTMLRuxIconTvElement extends Components.RuxIconTv, HTMLStencilElement {
    }
    var HTMLRuxIconTvElement: {
        prototype: HTMLRuxIconTvElement;
        new (): HTMLRuxIconTvElement;
    };
    interface HTMLRuxIconTvOffElement extends Components.RuxIconTvOff, HTMLStencilElement {
    }
    var HTMLRuxIconTvOffElement: {
        prototype: HTMLRuxIconTvOffElement;
        new (): HTMLRuxIconTvOffElement;
    };
    interface HTMLRuxIconUnarchiveElement extends Components.RuxIconUnarchive, HTMLStencilElement {
    }
    var HTMLRuxIconUnarchiveElement: {
        prototype: HTMLRuxIconUnarchiveElement;
        new (): HTMLRuxIconUnarchiveElement;
    };
    interface HTMLRuxIconUndoElement extends Components.RuxIconUndo, HTMLStencilElement {
    }
    var HTMLRuxIconUndoElement: {
        prototype: HTMLRuxIconUndoElement;
        new (): HTMLRuxIconUndoElement;
    };
    interface HTMLRuxIconUnfoldLessElement extends Components.RuxIconUnfoldLess, HTMLStencilElement {
    }
    var HTMLRuxIconUnfoldLessElement: {
        prototype: HTMLRuxIconUnfoldLessElement;
        new (): HTMLRuxIconUnfoldLessElement;
    };
    interface HTMLRuxIconUnfoldMoreElement extends Components.RuxIconUnfoldMore, HTMLStencilElement {
    }
    var HTMLRuxIconUnfoldMoreElement: {
        prototype: HTMLRuxIconUnfoldMoreElement;
        new (): HTMLRuxIconUnfoldMoreElement;
    };
    interface HTMLRuxIconUnsubscribeElement extends Components.RuxIconUnsubscribe, HTMLStencilElement {
    }
    var HTMLRuxIconUnsubscribeElement: {
        prototype: HTMLRuxIconUnsubscribeElement;
        new (): HTMLRuxIconUnsubscribeElement;
    };
    interface HTMLRuxIconUpdateElement extends Components.RuxIconUpdate, HTMLStencilElement {
    }
    var HTMLRuxIconUpdateElement: {
        prototype: HTMLRuxIconUpdateElement;
        new (): HTMLRuxIconUpdateElement;
    };
    interface HTMLRuxIconUsbElement extends Components.RuxIconUsb, HTMLStencilElement {
    }
    var HTMLRuxIconUsbElement: {
        prototype: HTMLRuxIconUsbElement;
        new (): HTMLRuxIconUsbElement;
    };
    interface HTMLRuxIconVerifiedUserElement extends Components.RuxIconVerifiedUser, HTMLStencilElement {
    }
    var HTMLRuxIconVerifiedUserElement: {
        prototype: HTMLRuxIconVerifiedUserElement;
        new (): HTMLRuxIconVerifiedUserElement;
    };
    interface HTMLRuxIconVerticalAlignBottomElement extends Components.RuxIconVerticalAlignBottom, HTMLStencilElement {
    }
    var HTMLRuxIconVerticalAlignBottomElement: {
        prototype: HTMLRuxIconVerticalAlignBottomElement;
        new (): HTMLRuxIconVerticalAlignBottomElement;
    };
    interface HTMLRuxIconVerticalAlignCenterElement extends Components.RuxIconVerticalAlignCenter, HTMLStencilElement {
    }
    var HTMLRuxIconVerticalAlignCenterElement: {
        prototype: HTMLRuxIconVerticalAlignCenterElement;
        new (): HTMLRuxIconVerticalAlignCenterElement;
    };
    interface HTMLRuxIconVerticalAlignTopElement extends Components.RuxIconVerticalAlignTop, HTMLStencilElement {
    }
    var HTMLRuxIconVerticalAlignTopElement: {
        prototype: HTMLRuxIconVerticalAlignTopElement;
        new (): HTMLRuxIconVerticalAlignTopElement;
    };
    interface HTMLRuxIconVerticalSplitElement extends Components.RuxIconVerticalSplit, HTMLStencilElement {
    }
    var HTMLRuxIconVerticalSplitElement: {
        prototype: HTMLRuxIconVerticalSplitElement;
        new (): HTMLRuxIconVerticalSplitElement;
    };
    interface HTMLRuxIconVibrationElement extends Components.RuxIconVibration, HTMLStencilElement {
    }
    var HTMLRuxIconVibrationElement: {
        prototype: HTMLRuxIconVibrationElement;
        new (): HTMLRuxIconVibrationElement;
    };
    interface HTMLRuxIconVideoCallElement extends Components.RuxIconVideoCall, HTMLStencilElement {
    }
    var HTMLRuxIconVideoCallElement: {
        prototype: HTMLRuxIconVideoCallElement;
        new (): HTMLRuxIconVideoCallElement;
    };
    interface HTMLRuxIconVideoLabelElement extends Components.RuxIconVideoLabel, HTMLStencilElement {
    }
    var HTMLRuxIconVideoLabelElement: {
        prototype: HTMLRuxIconVideoLabelElement;
        new (): HTMLRuxIconVideoLabelElement;
    };
    interface HTMLRuxIconVideoLibraryElement extends Components.RuxIconVideoLibrary, HTMLStencilElement {
    }
    var HTMLRuxIconVideoLibraryElement: {
        prototype: HTMLRuxIconVideoLibraryElement;
        new (): HTMLRuxIconVideoLibraryElement;
    };
    interface HTMLRuxIconVideocamElement extends Components.RuxIconVideocam, HTMLStencilElement {
    }
    var HTMLRuxIconVideocamElement: {
        prototype: HTMLRuxIconVideocamElement;
        new (): HTMLRuxIconVideocamElement;
    };
    interface HTMLRuxIconVideocamOffElement extends Components.RuxIconVideocamOff, HTMLStencilElement {
    }
    var HTMLRuxIconVideocamOffElement: {
        prototype: HTMLRuxIconVideocamOffElement;
        new (): HTMLRuxIconVideocamOffElement;
    };
    interface HTMLRuxIconVideogameAssetElement extends Components.RuxIconVideogameAsset, HTMLStencilElement {
    }
    var HTMLRuxIconVideogameAssetElement: {
        prototype: HTMLRuxIconVideogameAssetElement;
        new (): HTMLRuxIconVideogameAssetElement;
    };
    interface HTMLRuxIconViewAgendaElement extends Components.RuxIconViewAgenda, HTMLStencilElement {
    }
    var HTMLRuxIconViewAgendaElement: {
        prototype: HTMLRuxIconViewAgendaElement;
        new (): HTMLRuxIconViewAgendaElement;
    };
    interface HTMLRuxIconViewArrayElement extends Components.RuxIconViewArray, HTMLStencilElement {
    }
    var HTMLRuxIconViewArrayElement: {
        prototype: HTMLRuxIconViewArrayElement;
        new (): HTMLRuxIconViewArrayElement;
    };
    interface HTMLRuxIconViewCarouselElement extends Components.RuxIconViewCarousel, HTMLStencilElement {
    }
    var HTMLRuxIconViewCarouselElement: {
        prototype: HTMLRuxIconViewCarouselElement;
        new (): HTMLRuxIconViewCarouselElement;
    };
    interface HTMLRuxIconViewColumnElement extends Components.RuxIconViewColumn, HTMLStencilElement {
    }
    var HTMLRuxIconViewColumnElement: {
        prototype: HTMLRuxIconViewColumnElement;
        new (): HTMLRuxIconViewColumnElement;
    };
    interface HTMLRuxIconViewComfyElement extends Components.RuxIconViewComfy, HTMLStencilElement {
    }
    var HTMLRuxIconViewComfyElement: {
        prototype: HTMLRuxIconViewComfyElement;
        new (): HTMLRuxIconViewComfyElement;
    };
    interface HTMLRuxIconViewCompactElement extends Components.RuxIconViewCompact, HTMLStencilElement {
    }
    var HTMLRuxIconViewCompactElement: {
        prototype: HTMLRuxIconViewCompactElement;
        new (): HTMLRuxIconViewCompactElement;
    };
    interface HTMLRuxIconViewDayElement extends Components.RuxIconViewDay, HTMLStencilElement {
    }
    var HTMLRuxIconViewDayElement: {
        prototype: HTMLRuxIconViewDayElement;
        new (): HTMLRuxIconViewDayElement;
    };
    interface HTMLRuxIconViewHeadlineElement extends Components.RuxIconViewHeadline, HTMLStencilElement {
    }
    var HTMLRuxIconViewHeadlineElement: {
        prototype: HTMLRuxIconViewHeadlineElement;
        new (): HTMLRuxIconViewHeadlineElement;
    };
    interface HTMLRuxIconViewListElement extends Components.RuxIconViewList, HTMLStencilElement {
    }
    var HTMLRuxIconViewListElement: {
        prototype: HTMLRuxIconViewListElement;
        new (): HTMLRuxIconViewListElement;
    };
    interface HTMLRuxIconViewModuleElement extends Components.RuxIconViewModule, HTMLStencilElement {
    }
    var HTMLRuxIconViewModuleElement: {
        prototype: HTMLRuxIconViewModuleElement;
        new (): HTMLRuxIconViewModuleElement;
    };
    interface HTMLRuxIconViewQuiltElement extends Components.RuxIconViewQuilt, HTMLStencilElement {
    }
    var HTMLRuxIconViewQuiltElement: {
        prototype: HTMLRuxIconViewQuiltElement;
        new (): HTMLRuxIconViewQuiltElement;
    };
    interface HTMLRuxIconViewStreamElement extends Components.RuxIconViewStream, HTMLStencilElement {
    }
    var HTMLRuxIconViewStreamElement: {
        prototype: HTMLRuxIconViewStreamElement;
        new (): HTMLRuxIconViewStreamElement;
    };
    interface HTMLRuxIconViewWeekElement extends Components.RuxIconViewWeek, HTMLStencilElement {
    }
    var HTMLRuxIconViewWeekElement: {
        prototype: HTMLRuxIconViewWeekElement;
        new (): HTMLRuxIconViewWeekElement;
    };
    interface HTMLRuxIconVignetteElement extends Components.RuxIconVignette, HTMLStencilElement {
    }
    var HTMLRuxIconVignetteElement: {
        prototype: HTMLRuxIconVignetteElement;
        new (): HTMLRuxIconVignetteElement;
    };
    interface HTMLRuxIconVisibilityElement extends Components.RuxIconVisibility, HTMLStencilElement {
    }
    var HTMLRuxIconVisibilityElement: {
        prototype: HTMLRuxIconVisibilityElement;
        new (): HTMLRuxIconVisibilityElement;
    };
    interface HTMLRuxIconVisibilityOffElement extends Components.RuxIconVisibilityOff, HTMLStencilElement {
    }
    var HTMLRuxIconVisibilityOffElement: {
        prototype: HTMLRuxIconVisibilityOffElement;
        new (): HTMLRuxIconVisibilityOffElement;
    };
    interface HTMLRuxIconVoiceChatElement extends Components.RuxIconVoiceChat, HTMLStencilElement {
    }
    var HTMLRuxIconVoiceChatElement: {
        prototype: HTMLRuxIconVoiceChatElement;
        new (): HTMLRuxIconVoiceChatElement;
    };
    interface HTMLRuxIconVoiceOverOffElement extends Components.RuxIconVoiceOverOff, HTMLStencilElement {
    }
    var HTMLRuxIconVoiceOverOffElement: {
        prototype: HTMLRuxIconVoiceOverOffElement;
        new (): HTMLRuxIconVoiceOverOffElement;
    };
    interface HTMLRuxIconVoicemailElement extends Components.RuxIconVoicemail, HTMLStencilElement {
    }
    var HTMLRuxIconVoicemailElement: {
        prototype: HTMLRuxIconVoicemailElement;
        new (): HTMLRuxIconVoicemailElement;
    };
    interface HTMLRuxIconVolumeDownElement extends Components.RuxIconVolumeDown, HTMLStencilElement {
    }
    var HTMLRuxIconVolumeDownElement: {
        prototype: HTMLRuxIconVolumeDownElement;
        new (): HTMLRuxIconVolumeDownElement;
    };
    interface HTMLRuxIconVolumeMuteElement extends Components.RuxIconVolumeMute, HTMLStencilElement {
    }
    var HTMLRuxIconVolumeMuteElement: {
        prototype: HTMLRuxIconVolumeMuteElement;
        new (): HTMLRuxIconVolumeMuteElement;
    };
    interface HTMLRuxIconVolumeOffElement extends Components.RuxIconVolumeOff, HTMLStencilElement {
    }
    var HTMLRuxIconVolumeOffElement: {
        prototype: HTMLRuxIconVolumeOffElement;
        new (): HTMLRuxIconVolumeOffElement;
    };
    interface HTMLRuxIconVolumeUpElement extends Components.RuxIconVolumeUp, HTMLStencilElement {
    }
    var HTMLRuxIconVolumeUpElement: {
        prototype: HTMLRuxIconVolumeUpElement;
        new (): HTMLRuxIconVolumeUpElement;
    };
    interface HTMLRuxIconVpnKeyElement extends Components.RuxIconVpnKey, HTMLStencilElement {
    }
    var HTMLRuxIconVpnKeyElement: {
        prototype: HTMLRuxIconVpnKeyElement;
        new (): HTMLRuxIconVpnKeyElement;
    };
    interface HTMLRuxIconVpnLockElement extends Components.RuxIconVpnLock, HTMLStencilElement {
    }
    var HTMLRuxIconVpnLockElement: {
        prototype: HTMLRuxIconVpnLockElement;
        new (): HTMLRuxIconVpnLockElement;
    };
    interface HTMLRuxIconWallpaperElement extends Components.RuxIconWallpaper, HTMLStencilElement {
    }
    var HTMLRuxIconWallpaperElement: {
        prototype: HTMLRuxIconWallpaperElement;
        new (): HTMLRuxIconWallpaperElement;
    };
    interface HTMLRuxIconWarningElement extends Components.RuxIconWarning, HTMLStencilElement {
    }
    var HTMLRuxIconWarningElement: {
        prototype: HTMLRuxIconWarningElement;
        new (): HTMLRuxIconWarningElement;
    };
    interface HTMLRuxIconWatchElement extends Components.RuxIconWatch, HTMLStencilElement {
    }
    var HTMLRuxIconWatchElement: {
        prototype: HTMLRuxIconWatchElement;
        new (): HTMLRuxIconWatchElement;
    };
    interface HTMLRuxIconWatchLaterElement extends Components.RuxIconWatchLater, HTMLStencilElement {
    }
    var HTMLRuxIconWatchLaterElement: {
        prototype: HTMLRuxIconWatchLaterElement;
        new (): HTMLRuxIconWatchLaterElement;
    };
    interface HTMLRuxIconWavesElement extends Components.RuxIconWaves, HTMLStencilElement {
    }
    var HTMLRuxIconWavesElement: {
        prototype: HTMLRuxIconWavesElement;
        new (): HTMLRuxIconWavesElement;
    };
    interface HTMLRuxIconWbAutoElement extends Components.RuxIconWbAuto, HTMLStencilElement {
    }
    var HTMLRuxIconWbAutoElement: {
        prototype: HTMLRuxIconWbAutoElement;
        new (): HTMLRuxIconWbAutoElement;
    };
    interface HTMLRuxIconWbCloudyElement extends Components.RuxIconWbCloudy, HTMLStencilElement {
    }
    var HTMLRuxIconWbCloudyElement: {
        prototype: HTMLRuxIconWbCloudyElement;
        new (): HTMLRuxIconWbCloudyElement;
    };
    interface HTMLRuxIconWbIncandescentElement extends Components.RuxIconWbIncandescent, HTMLStencilElement {
    }
    var HTMLRuxIconWbIncandescentElement: {
        prototype: HTMLRuxIconWbIncandescentElement;
        new (): HTMLRuxIconWbIncandescentElement;
    };
    interface HTMLRuxIconWbIridescentElement extends Components.RuxIconWbIridescent, HTMLStencilElement {
    }
    var HTMLRuxIconWbIridescentElement: {
        prototype: HTMLRuxIconWbIridescentElement;
        new (): HTMLRuxIconWbIridescentElement;
    };
    interface HTMLRuxIconWbSunnyElement extends Components.RuxIconWbSunny, HTMLStencilElement {
    }
    var HTMLRuxIconWbSunnyElement: {
        prototype: HTMLRuxIconWbSunnyElement;
        new (): HTMLRuxIconWbSunnyElement;
    };
    interface HTMLRuxIconWcElement extends Components.RuxIconWc, HTMLStencilElement {
    }
    var HTMLRuxIconWcElement: {
        prototype: HTMLRuxIconWcElement;
        new (): HTMLRuxIconWcElement;
    };
    interface HTMLRuxIconWebElement extends Components.RuxIconWeb, HTMLStencilElement {
    }
    var HTMLRuxIconWebElement: {
        prototype: HTMLRuxIconWebElement;
        new (): HTMLRuxIconWebElement;
    };
    interface HTMLRuxIconWebAssetElement extends Components.RuxIconWebAsset, HTMLStencilElement {
    }
    var HTMLRuxIconWebAssetElement: {
        prototype: HTMLRuxIconWebAssetElement;
        new (): HTMLRuxIconWebAssetElement;
    };
    interface HTMLRuxIconWeekendElement extends Components.RuxIconWeekend, HTMLStencilElement {
    }
    var HTMLRuxIconWeekendElement: {
        prototype: HTMLRuxIconWeekendElement;
        new (): HTMLRuxIconWeekendElement;
    };
    interface HTMLRuxIconWhatshotElement extends Components.RuxIconWhatshot, HTMLStencilElement {
    }
    var HTMLRuxIconWhatshotElement: {
        prototype: HTMLRuxIconWhatshotElement;
        new (): HTMLRuxIconWhatshotElement;
    };
    interface HTMLRuxIconWhereToVoteElement extends Components.RuxIconWhereToVote, HTMLStencilElement {
    }
    var HTMLRuxIconWhereToVoteElement: {
        prototype: HTMLRuxIconWhereToVoteElement;
        new (): HTMLRuxIconWhereToVoteElement;
    };
    interface HTMLRuxIconWidgetsElement extends Components.RuxIconWidgets, HTMLStencilElement {
    }
    var HTMLRuxIconWidgetsElement: {
        prototype: HTMLRuxIconWidgetsElement;
        new (): HTMLRuxIconWidgetsElement;
    };
    interface HTMLRuxIconWifiElement extends Components.RuxIconWifi, HTMLStencilElement {
    }
    var HTMLRuxIconWifiElement: {
        prototype: HTMLRuxIconWifiElement;
        new (): HTMLRuxIconWifiElement;
    };
    interface HTMLRuxIconWifiLockElement extends Components.RuxIconWifiLock, HTMLStencilElement {
    }
    var HTMLRuxIconWifiLockElement: {
        prototype: HTMLRuxIconWifiLockElement;
        new (): HTMLRuxIconWifiLockElement;
    };
    interface HTMLRuxIconWifiOffElement extends Components.RuxIconWifiOff, HTMLStencilElement {
    }
    var HTMLRuxIconWifiOffElement: {
        prototype: HTMLRuxIconWifiOffElement;
        new (): HTMLRuxIconWifiOffElement;
    };
    interface HTMLRuxIconWifiTetheringElement extends Components.RuxIconWifiTethering, HTMLStencilElement {
    }
    var HTMLRuxIconWifiTetheringElement: {
        prototype: HTMLRuxIconWifiTetheringElement;
        new (): HTMLRuxIconWifiTetheringElement;
    };
    interface HTMLRuxIconWorkElement extends Components.RuxIconWork, HTMLStencilElement {
    }
    var HTMLRuxIconWorkElement: {
        prototype: HTMLRuxIconWorkElement;
        new (): HTMLRuxIconWorkElement;
    };
    interface HTMLRuxIconWorkOffElement extends Components.RuxIconWorkOff, HTMLStencilElement {
    }
    var HTMLRuxIconWorkOffElement: {
        prototype: HTMLRuxIconWorkOffElement;
        new (): HTMLRuxIconWorkOffElement;
    };
    interface HTMLRuxIconWorkOutlineElement extends Components.RuxIconWorkOutline, HTMLStencilElement {
    }
    var HTMLRuxIconWorkOutlineElement: {
        prototype: HTMLRuxIconWorkOutlineElement;
        new (): HTMLRuxIconWorkOutlineElement;
    };
    interface HTMLRuxIconWrapTextElement extends Components.RuxIconWrapText, HTMLStencilElement {
    }
    var HTMLRuxIconWrapTextElement: {
        prototype: HTMLRuxIconWrapTextElement;
        new (): HTMLRuxIconWrapTextElement;
    };
    interface HTMLRuxIconYoutubeSearchedForElement extends Components.RuxIconYoutubeSearchedFor, HTMLStencilElement {
    }
    var HTMLRuxIconYoutubeSearchedForElement: {
        prototype: HTMLRuxIconYoutubeSearchedForElement;
        new (): HTMLRuxIconYoutubeSearchedForElement;
    };
    interface HTMLRuxIconZoomInElement extends Components.RuxIconZoomIn, HTMLStencilElement {
    }
    var HTMLRuxIconZoomInElement: {
        prototype: HTMLRuxIconZoomInElement;
        new (): HTMLRuxIconZoomInElement;
    };
    interface HTMLRuxIconZoomInMapElement extends Components.RuxIconZoomInMap, HTMLStencilElement {
    }
    var HTMLRuxIconZoomInMapElement: {
        prototype: HTMLRuxIconZoomInMapElement;
        new (): HTMLRuxIconZoomInMapElement;
    };
    interface HTMLRuxIconZoomOutElement extends Components.RuxIconZoomOut, HTMLStencilElement {
    }
    var HTMLRuxIconZoomOutElement: {
        prototype: HTMLRuxIconZoomOutElement;
        new (): HTMLRuxIconZoomOutElement;
    };
    interface HTMLRuxIconZoomOutMapElement extends Components.RuxIconZoomOutMap, HTMLStencilElement {
    }
    var HTMLRuxIconZoomOutMapElement: {
        prototype: HTMLRuxIconZoomOutMapElement;
        new (): HTMLRuxIconZoomOutMapElement;
    };
    interface HTMLRuxLogElement extends Components.RuxLog, HTMLStencilElement {
    }
    var HTMLRuxLogElement: {
        prototype: HTMLRuxLogElement;
        new (): HTMLRuxLogElement;
    };
    interface HTMLRuxMenuItemElement extends Components.RuxMenuItem, HTMLStencilElement {
    }
    var HTMLRuxMenuItemElement: {
        prototype: HTMLRuxMenuItemElement;
        new (): HTMLRuxMenuItemElement;
    };
    interface HTMLRuxMenuItemDividerElement extends Components.RuxMenuItemDivider, HTMLStencilElement {
    }
    var HTMLRuxMenuItemDividerElement: {
        prototype: HTMLRuxMenuItemDividerElement;
        new (): HTMLRuxMenuItemDividerElement;
    };
    interface HTMLRuxModalElement extends Components.RuxModal, HTMLStencilElement {
    }
    var HTMLRuxModalElement: {
        prototype: HTMLRuxModalElement;
        new (): HTMLRuxModalElement;
    };
    interface HTMLRuxMonitoringIconElement extends Components.RuxMonitoringIcon, HTMLStencilElement {
    }
    var HTMLRuxMonitoringIconElement: {
        prototype: HTMLRuxMonitoringIconElement;
        new (): HTMLRuxMonitoringIconElement;
    };
    interface HTMLRuxMonitoringProgressIconElement extends Components.RuxMonitoringProgressIcon, HTMLStencilElement {
    }
    var HTMLRuxMonitoringProgressIconElement: {
        prototype: HTMLRuxMonitoringProgressIconElement;
        new (): HTMLRuxMonitoringProgressIconElement;
    };
    interface HTMLRuxNotificationElement extends Components.RuxNotification, HTMLStencilElement {
    }
    var HTMLRuxNotificationElement: {
        prototype: HTMLRuxNotificationElement;
        new (): HTMLRuxNotificationElement;
    };
    interface HTMLRuxPopUpMenuElement extends Components.RuxPopUpMenu, HTMLStencilElement {
    }
    var HTMLRuxPopUpMenuElement: {
        prototype: HTMLRuxPopUpMenuElement;
        new (): HTMLRuxPopUpMenuElement;
    };
    interface HTMLRuxProgressElement extends Components.RuxProgress, HTMLStencilElement {
    }
    var HTMLRuxProgressElement: {
        prototype: HTMLRuxProgressElement;
        new (): HTMLRuxProgressElement;
    };
    interface HTMLRuxSegmentedButtonElement extends Components.RuxSegmentedButton, HTMLStencilElement {
    }
    var HTMLRuxSegmentedButtonElement: {
        prototype: HTMLRuxSegmentedButtonElement;
        new (): HTMLRuxSegmentedButtonElement;
    };
    interface HTMLRuxStatusElement extends Components.RuxStatus, HTMLStencilElement {
    }
    var HTMLRuxStatusElement: {
        prototype: HTMLRuxStatusElement;
        new (): HTMLRuxStatusElement;
    };
    interface HTMLRuxSwitchElement extends Components.RuxSwitch, HTMLStencilElement {
    }
    var HTMLRuxSwitchElement: {
        prototype: HTMLRuxSwitchElement;
        new (): HTMLRuxSwitchElement;
    };
    interface HTMLRuxTabElement extends Components.RuxTab, HTMLStencilElement {
    }
    var HTMLRuxTabElement: {
        prototype: HTMLRuxTabElement;
        new (): HTMLRuxTabElement;
    };
    interface HTMLRuxTabPanelElement extends Components.RuxTabPanel, HTMLStencilElement {
    }
    var HTMLRuxTabPanelElement: {
        prototype: HTMLRuxTabPanelElement;
        new (): HTMLRuxTabPanelElement;
    };
    interface HTMLRuxTabPanelsElement extends Components.RuxTabPanels, HTMLStencilElement {
    }
    var HTMLRuxTabPanelsElement: {
        prototype: HTMLRuxTabPanelsElement;
        new (): HTMLRuxTabPanelsElement;
    };
    interface HTMLRuxTableElement extends Components.RuxTable, HTMLStencilElement {
    }
    var HTMLRuxTableElement: {
        prototype: HTMLRuxTableElement;
        new (): HTMLRuxTableElement;
    };
    interface HTMLRuxTableBodyElement extends Components.RuxTableBody, HTMLStencilElement {
    }
    var HTMLRuxTableBodyElement: {
        prototype: HTMLRuxTableBodyElement;
        new (): HTMLRuxTableBodyElement;
    };
    interface HTMLRuxTableCellElement extends Components.RuxTableCell, HTMLStencilElement {
    }
    var HTMLRuxTableCellElement: {
        prototype: HTMLRuxTableCellElement;
        new (): HTMLRuxTableCellElement;
    };
    interface HTMLRuxTableHeaderElement extends Components.RuxTableHeader, HTMLStencilElement {
    }
    var HTMLRuxTableHeaderElement: {
        prototype: HTMLRuxTableHeaderElement;
        new (): HTMLRuxTableHeaderElement;
    };
    interface HTMLRuxTableHeaderCellElement extends Components.RuxTableHeaderCell, HTMLStencilElement {
    }
    var HTMLRuxTableHeaderCellElement: {
        prototype: HTMLRuxTableHeaderCellElement;
        new (): HTMLRuxTableHeaderCellElement;
    };
    interface HTMLRuxTableHeaderRowElement extends Components.RuxTableHeaderRow, HTMLStencilElement {
    }
    var HTMLRuxTableHeaderRowElement: {
        prototype: HTMLRuxTableHeaderRowElement;
        new (): HTMLRuxTableHeaderRowElement;
    };
    interface HTMLRuxTableRowElement extends Components.RuxTableRow, HTMLStencilElement {
    }
    var HTMLRuxTableRowElement: {
        prototype: HTMLRuxTableRowElement;
        new (): HTMLRuxTableRowElement;
    };
    interface HTMLRuxTabsElement extends Components.RuxTabs, HTMLStencilElement {
    }
    var HTMLRuxTabsElement: {
        prototype: HTMLRuxTabsElement;
        new (): HTMLRuxTabsElement;
    };
    interface HTMLRuxTreeElement extends Components.RuxTree, HTMLStencilElement {
    }
    var HTMLRuxTreeElement: {
        prototype: HTMLRuxTreeElement;
        new (): HTMLRuxTreeElement;
    };
    interface HTMLRuxTreeNodeElement extends Components.RuxTreeNode, HTMLStencilElement {
    }
    var HTMLRuxTreeNodeElement: {
        prototype: HTMLRuxTreeNodeElement;
        new (): HTMLRuxTreeNodeElement;
    };
    interface HTMLElementTagNameMap {
        "rux-button": HTMLRuxButtonElement;
        "rux-button-group": HTMLRuxButtonGroupElement;
        "rux-checkbox": HTMLRuxCheckboxElement;
        "rux-classification-marking": HTMLRuxClassificationMarkingElement;
        "rux-clock": HTMLRuxClockElement;
        "rux-datetime": HTMLRuxDatetimeElement;
        "rux-global-status-bar": HTMLRuxGlobalStatusBarElement;
        "rux-icon": HTMLRuxIconElement;
        "rux-icon-360": HTMLRuxIcon360Element;
        "rux-icon-3d-rotation": HTMLRuxIcon3dRotationElement;
        "rux-icon-4k": HTMLRuxIcon4kElement;
        "rux-icon-ac-unit": HTMLRuxIconAcUnitElement;
        "rux-icon-access-alarms": HTMLRuxIconAccessAlarmsElement;
        "rux-icon-access-time": HTMLRuxIconAccessTimeElement;
        "rux-icon-accessibility": HTMLRuxIconAccessibilityElement;
        "rux-icon-accessibility-new": HTMLRuxIconAccessibilityNewElement;
        "rux-icon-accessible": HTMLRuxIconAccessibleElement;
        "rux-icon-accessible-forward": HTMLRuxIconAccessibleForwardElement;
        "rux-icon-account-balance": HTMLRuxIconAccountBalanceElement;
        "rux-icon-account-balance-wallet": HTMLRuxIconAccountBalanceWalletElement;
        "rux-icon-account-box": HTMLRuxIconAccountBoxElement;
        "rux-icon-account-circle": HTMLRuxIconAccountCircleElement;
        "rux-icon-adb": HTMLRuxIconAdbElement;
        "rux-icon-add": HTMLRuxIconAddElement;
        "rux-icon-add-a-photo": HTMLRuxIconAddAPhotoElement;
        "rux-icon-add-alarm": HTMLRuxIconAddAlarmElement;
        "rux-icon-add-alert": HTMLRuxIconAddAlertElement;
        "rux-icon-add-box": HTMLRuxIconAddBoxElement;
        "rux-icon-add-circle": HTMLRuxIconAddCircleElement;
        "rux-icon-add-circle-outline": HTMLRuxIconAddCircleOutlineElement;
        "rux-icon-add-comment": HTMLRuxIconAddCommentElement;
        "rux-icon-add-location": HTMLRuxIconAddLocationElement;
        "rux-icon-add-photo-alternate": HTMLRuxIconAddPhotoAlternateElement;
        "rux-icon-add-shopping-cart": HTMLRuxIconAddShoppingCartElement;
        "rux-icon-add-to-home-screen": HTMLRuxIconAddToHomeScreenElement;
        "rux-icon-add-to-photos": HTMLRuxIconAddToPhotosElement;
        "rux-icon-add-to-queue": HTMLRuxIconAddToQueueElement;
        "rux-icon-adjust": HTMLRuxIconAdjustElement;
        "rux-icon-airline-seat-flat": HTMLRuxIconAirlineSeatFlatElement;
        "rux-icon-airline-seat-flat-angled": HTMLRuxIconAirlineSeatFlatAngledElement;
        "rux-icon-airline-seat-individual-suite": HTMLRuxIconAirlineSeatIndividualSuiteElement;
        "rux-icon-airline-seat-legroom-extra": HTMLRuxIconAirlineSeatLegroomExtraElement;
        "rux-icon-airline-seat-legroom-normal": HTMLRuxIconAirlineSeatLegroomNormalElement;
        "rux-icon-airline-seat-legroom-reduced": HTMLRuxIconAirlineSeatLegroomReducedElement;
        "rux-icon-airline-seat-recline-extra": HTMLRuxIconAirlineSeatReclineExtraElement;
        "rux-icon-airline-seat-recline-normal": HTMLRuxIconAirlineSeatReclineNormalElement;
        "rux-icon-airplanemode-active": HTMLRuxIconAirplanemodeActiveElement;
        "rux-icon-airplanemode-inactive": HTMLRuxIconAirplanemodeInactiveElement;
        "rux-icon-airplay": HTMLRuxIconAirplayElement;
        "rux-icon-airport-shuttle": HTMLRuxIconAirportShuttleElement;
        "rux-icon-alarm": HTMLRuxIconAlarmElement;
        "rux-icon-alarm-add": HTMLRuxIconAlarmAddElement;
        "rux-icon-alarm-off": HTMLRuxIconAlarmOffElement;
        "rux-icon-alarm-on": HTMLRuxIconAlarmOnElement;
        "rux-icon-album": HTMLRuxIconAlbumElement;
        "rux-icon-all-inbox": HTMLRuxIconAllInboxElement;
        "rux-icon-all-inclusive": HTMLRuxIconAllInclusiveElement;
        "rux-icon-all-out": HTMLRuxIconAllOutElement;
        "rux-icon-alternate-email": HTMLRuxIconAlternateEmailElement;
        "rux-icon-altitude": HTMLRuxIconAltitudeElement;
        "rux-icon-android": HTMLRuxIconAndroidElement;
        "rux-icon-announcement": HTMLRuxIconAnnouncementElement;
        "rux-icon-antenna": HTMLRuxIconAntennaElement;
        "rux-icon-antenna-off": HTMLRuxIconAntennaOffElement;
        "rux-icon-antenna-receive": HTMLRuxIconAntennaReceiveElement;
        "rux-icon-antenna-transmit": HTMLRuxIconAntennaTransmitElement;
        "rux-icon-apps": HTMLRuxIconAppsElement;
        "rux-icon-archive": HTMLRuxIconArchiveElement;
        "rux-icon-arrow-back": HTMLRuxIconArrowBackElement;
        "rux-icon-arrow-back-ios": HTMLRuxIconArrowBackIosElement;
        "rux-icon-arrow-downward": HTMLRuxIconArrowDownwardElement;
        "rux-icon-arrow-drop-down": HTMLRuxIconArrowDropDownElement;
        "rux-icon-arrow-drop-down-circle": HTMLRuxIconArrowDropDownCircleElement;
        "rux-icon-arrow-drop-up": HTMLRuxIconArrowDropUpElement;
        "rux-icon-arrow-forward": HTMLRuxIconArrowForwardElement;
        "rux-icon-arrow-forward-ios": HTMLRuxIconArrowForwardIosElement;
        "rux-icon-arrow-left": HTMLRuxIconArrowLeftElement;
        "rux-icon-arrow-right": HTMLRuxIconArrowRightElement;
        "rux-icon-arrow-right-alt": HTMLRuxIconArrowRightAltElement;
        "rux-icon-arrow-upward": HTMLRuxIconArrowUpwardElement;
        "rux-icon-art-track": HTMLRuxIconArtTrackElement;
        "rux-icon-aspect-ratio": HTMLRuxIconAspectRatioElement;
        "rux-icon-assessment": HTMLRuxIconAssessmentElement;
        "rux-icon-assignment": HTMLRuxIconAssignmentElement;
        "rux-icon-assignment-find": HTMLRuxIconAssignmentFindElement;
        "rux-icon-assignment-late": HTMLRuxIconAssignmentLateElement;
        "rux-icon-assignment-return": HTMLRuxIconAssignmentReturnElement;
        "rux-icon-assignment-returned": HTMLRuxIconAssignmentReturnedElement;
        "rux-icon-assignment-turned-in": HTMLRuxIconAssignmentTurnedInElement;
        "rux-icon-assistant": HTMLRuxIconAssistantElement;
        "rux-icon-assistant-photo": HTMLRuxIconAssistantPhotoElement;
        "rux-icon-attach-file": HTMLRuxIconAttachFileElement;
        "rux-icon-attach-money": HTMLRuxIconAttachMoneyElement;
        "rux-icon-attachment": HTMLRuxIconAttachmentElement;
        "rux-icon-audiotrack": HTMLRuxIconAudiotrackElement;
        "rux-icon-autorenew": HTMLRuxIconAutorenewElement;
        "rux-icon-av-timer": HTMLRuxIconAvTimerElement;
        "rux-icon-backspace": HTMLRuxIconBackspaceElement;
        "rux-icon-backup": HTMLRuxIconBackupElement;
        "rux-icon-ballot": HTMLRuxIconBallotElement;
        "rux-icon-bar-chart": HTMLRuxIconBarChartElement;
        "rux-icon-battery-20": HTMLRuxIconBattery20Element;
        "rux-icon-battery-30": HTMLRuxIconBattery30Element;
        "rux-icon-battery-50": HTMLRuxIconBattery50Element;
        "rux-icon-battery-60": HTMLRuxIconBattery60Element;
        "rux-icon-battery-80": HTMLRuxIconBattery80Element;
        "rux-icon-battery-90": HTMLRuxIconBattery90Element;
        "rux-icon-battery-alert": HTMLRuxIconBatteryAlertElement;
        "rux-icon-battery-charging-20": HTMLRuxIconBatteryCharging20Element;
        "rux-icon-battery-charging-30": HTMLRuxIconBatteryCharging30Element;
        "rux-icon-battery-charging-50": HTMLRuxIconBatteryCharging50Element;
        "rux-icon-battery-charging-60": HTMLRuxIconBatteryCharging60Element;
        "rux-icon-battery-charging-80": HTMLRuxIconBatteryCharging80Element;
        "rux-icon-battery-charging-90": HTMLRuxIconBatteryCharging90Element;
        "rux-icon-battery-charging-full": HTMLRuxIconBatteryChargingFullElement;
        "rux-icon-battery-full": HTMLRuxIconBatteryFullElement;
        "rux-icon-battery-std": HTMLRuxIconBatteryStdElement;
        "rux-icon-battery-unknown": HTMLRuxIconBatteryUnknownElement;
        "rux-icon-beach-access": HTMLRuxIconBeachAccessElement;
        "rux-icon-beenhere": HTMLRuxIconBeenhereElement;
        "rux-icon-block": HTMLRuxIconBlockElement;
        "rux-icon-bluetooth": HTMLRuxIconBluetoothElement;
        "rux-icon-bluetooth-audio": HTMLRuxIconBluetoothAudioElement;
        "rux-icon-bluetooth-connected": HTMLRuxIconBluetoothConnectedElement;
        "rux-icon-bluetooth-disabled": HTMLRuxIconBluetoothDisabledElement;
        "rux-icon-bluetooth-searching": HTMLRuxIconBluetoothSearchingElement;
        "rux-icon-blur-circular": HTMLRuxIconBlurCircularElement;
        "rux-icon-blur-linear": HTMLRuxIconBlurLinearElement;
        "rux-icon-blur-off": HTMLRuxIconBlurOffElement;
        "rux-icon-blur-on": HTMLRuxIconBlurOnElement;
        "rux-icon-book": HTMLRuxIconBookElement;
        "rux-icon-bookmark": HTMLRuxIconBookmarkElement;
        "rux-icon-bookmark-border": HTMLRuxIconBookmarkBorderElement;
        "rux-icon-bookmarks": HTMLRuxIconBookmarksElement;
        "rux-icon-border-all": HTMLRuxIconBorderAllElement;
        "rux-icon-border-bottom": HTMLRuxIconBorderBottomElement;
        "rux-icon-border-clear": HTMLRuxIconBorderClearElement;
        "rux-icon-border-color": HTMLRuxIconBorderColorElement;
        "rux-icon-border-horizontal": HTMLRuxIconBorderHorizontalElement;
        "rux-icon-border-inner": HTMLRuxIconBorderInnerElement;
        "rux-icon-border-left": HTMLRuxIconBorderLeftElement;
        "rux-icon-border-outer": HTMLRuxIconBorderOuterElement;
        "rux-icon-border-right": HTMLRuxIconBorderRightElement;
        "rux-icon-border-style": HTMLRuxIconBorderStyleElement;
        "rux-icon-border-top": HTMLRuxIconBorderTopElement;
        "rux-icon-border-vertical": HTMLRuxIconBorderVerticalElement;
        "rux-icon-branding-watermark": HTMLRuxIconBrandingWatermarkElement;
        "rux-icon-brightness-1": HTMLRuxIconBrightness1Element;
        "rux-icon-brightness-2": HTMLRuxIconBrightness2Element;
        "rux-icon-brightness-3": HTMLRuxIconBrightness3Element;
        "rux-icon-brightness-4": HTMLRuxIconBrightness4Element;
        "rux-icon-brightness-5": HTMLRuxIconBrightness5Element;
        "rux-icon-brightness-6": HTMLRuxIconBrightness6Element;
        "rux-icon-brightness-7": HTMLRuxIconBrightness7Element;
        "rux-icon-brightness-auto": HTMLRuxIconBrightnessAutoElement;
        "rux-icon-brightness-high": HTMLRuxIconBrightnessHighElement;
        "rux-icon-brightness-low": HTMLRuxIconBrightnessLowElement;
        "rux-icon-brightness-medium": HTMLRuxIconBrightnessMediumElement;
        "rux-icon-broken-image": HTMLRuxIconBrokenImageElement;
        "rux-icon-brush": HTMLRuxIconBrushElement;
        "rux-icon-bubble-chart": HTMLRuxIconBubbleChartElement;
        "rux-icon-bug-report": HTMLRuxIconBugReportElement;
        "rux-icon-build": HTMLRuxIconBuildElement;
        "rux-icon-burst-mode": HTMLRuxIconBurstModeElement;
        "rux-icon-business": HTMLRuxIconBusinessElement;
        "rux-icon-business-center": HTMLRuxIconBusinessCenterElement;
        "rux-icon-cached": HTMLRuxIconCachedElement;
        "rux-icon-cake": HTMLRuxIconCakeElement;
        "rux-icon-calendar-today": HTMLRuxIconCalendarTodayElement;
        "rux-icon-calendar-view-day": HTMLRuxIconCalendarViewDayElement;
        "rux-icon-call": HTMLRuxIconCallElement;
        "rux-icon-call-end": HTMLRuxIconCallEndElement;
        "rux-icon-call-made": HTMLRuxIconCallMadeElement;
        "rux-icon-call-merge": HTMLRuxIconCallMergeElement;
        "rux-icon-call-missed": HTMLRuxIconCallMissedElement;
        "rux-icon-call-missed-outgoing": HTMLRuxIconCallMissedOutgoingElement;
        "rux-icon-call-received": HTMLRuxIconCallReceivedElement;
        "rux-icon-call-split": HTMLRuxIconCallSplitElement;
        "rux-icon-call-to-action": HTMLRuxIconCallToActionElement;
        "rux-icon-camera": HTMLRuxIconCameraElement;
        "rux-icon-camera-alt": HTMLRuxIconCameraAltElement;
        "rux-icon-camera-enhance": HTMLRuxIconCameraEnhanceElement;
        "rux-icon-camera-front": HTMLRuxIconCameraFrontElement;
        "rux-icon-camera-rear": HTMLRuxIconCameraRearElement;
        "rux-icon-camera-roll": HTMLRuxIconCameraRollElement;
        "rux-icon-cancel": HTMLRuxIconCancelElement;
        "rux-icon-cancel-presentation": HTMLRuxIconCancelPresentationElement;
        "rux-icon-card-giftcard": HTMLRuxIconCardGiftcardElement;
        "rux-icon-card-membership": HTMLRuxIconCardMembershipElement;
        "rux-icon-card-travel": HTMLRuxIconCardTravelElement;
        "rux-icon-casino": HTMLRuxIconCasinoElement;
        "rux-icon-cast": HTMLRuxIconCastElement;
        "rux-icon-cast-connected": HTMLRuxIconCastConnectedElement;
        "rux-icon-cast-for-education": HTMLRuxIconCastForEducationElement;
        "rux-icon-category": HTMLRuxIconCategoryElement;
        "rux-icon-cell-wifi": HTMLRuxIconCellWifiElement;
        "rux-icon-center-focus-strong": HTMLRuxIconCenterFocusStrongElement;
        "rux-icon-center-focus-weak": HTMLRuxIconCenterFocusWeakElement;
        "rux-icon-change-history": HTMLRuxIconChangeHistoryElement;
        "rux-icon-chat": HTMLRuxIconChatElement;
        "rux-icon-chat-bubble": HTMLRuxIconChatBubbleElement;
        "rux-icon-chat-bubble-outline": HTMLRuxIconChatBubbleOutlineElement;
        "rux-icon-check": HTMLRuxIconCheckElement;
        "rux-icon-check-box": HTMLRuxIconCheckBoxElement;
        "rux-icon-check-box-outline-blank": HTMLRuxIconCheckBoxOutlineBlankElement;
        "rux-icon-check-circle": HTMLRuxIconCheckCircleElement;
        "rux-icon-check-circle-outline": HTMLRuxIconCheckCircleOutlineElement;
        "rux-icon-chevron-left": HTMLRuxIconChevronLeftElement;
        "rux-icon-chevron-right": HTMLRuxIconChevronRightElement;
        "rux-icon-child-care": HTMLRuxIconChildCareElement;
        "rux-icon-child-friendly": HTMLRuxIconChildFriendlyElement;
        "rux-icon-chrome-reader-mode": HTMLRuxIconChromeReaderModeElement;
        "rux-icon-class": HTMLRuxIconClassElement;
        "rux-icon-clear": HTMLRuxIconClearElement;
        "rux-icon-clear-all": HTMLRuxIconClearAllElement;
        "rux-icon-close": HTMLRuxIconCloseElement;
        "rux-icon-closed-caption": HTMLRuxIconClosedCaptionElement;
        "rux-icon-cloud": HTMLRuxIconCloudElement;
        "rux-icon-cloud-circle": HTMLRuxIconCloudCircleElement;
        "rux-icon-cloud-done": HTMLRuxIconCloudDoneElement;
        "rux-icon-cloud-download": HTMLRuxIconCloudDownloadElement;
        "rux-icon-cloud-off": HTMLRuxIconCloudOffElement;
        "rux-icon-cloud-queue": HTMLRuxIconCloudQueueElement;
        "rux-icon-cloud-upload": HTMLRuxIconCloudUploadElement;
        "rux-icon-code": HTMLRuxIconCodeElement;
        "rux-icon-collections": HTMLRuxIconCollectionsElement;
        "rux-icon-collections-bookmark": HTMLRuxIconCollectionsBookmarkElement;
        "rux-icon-color-lens": HTMLRuxIconColorLensElement;
        "rux-icon-colorize": HTMLRuxIconColorizeElement;
        "rux-icon-comment": HTMLRuxIconCommentElement;
        "rux-icon-commute": HTMLRuxIconCommuteElement;
        "rux-icon-compare": HTMLRuxIconCompareElement;
        "rux-icon-compare-arrows": HTMLRuxIconCompareArrowsElement;
        "rux-icon-compass-calibration": HTMLRuxIconCompassCalibrationElement;
        "rux-icon-computer": HTMLRuxIconComputerElement;
        "rux-icon-confirmation-number": HTMLRuxIconConfirmationNumberElement;
        "rux-icon-contact-mail": HTMLRuxIconContactMailElement;
        "rux-icon-contact-phone": HTMLRuxIconContactPhoneElement;
        "rux-icon-contact-support": HTMLRuxIconContactSupportElement;
        "rux-icon-contacts": HTMLRuxIconContactsElement;
        "rux-icon-control-camera": HTMLRuxIconControlCameraElement;
        "rux-icon-control-point": HTMLRuxIconControlPointElement;
        "rux-icon-control-point-duplicate": HTMLRuxIconControlPointDuplicateElement;
        "rux-icon-copyright": HTMLRuxIconCopyrightElement;
        "rux-icon-create": HTMLRuxIconCreateElement;
        "rux-icon-create-new-folder": HTMLRuxIconCreateNewFolderElement;
        "rux-icon-credit-card": HTMLRuxIconCreditCardElement;
        "rux-icon-crop": HTMLRuxIconCropElement;
        "rux-icon-crop-16-9": HTMLRuxIconCrop169Element;
        "rux-icon-crop-3-2": HTMLRuxIconCrop32Element;
        "rux-icon-crop-5-4": HTMLRuxIconCrop54Element;
        "rux-icon-crop-7-5": HTMLRuxIconCrop75Element;
        "rux-icon-crop-din": HTMLRuxIconCropDinElement;
        "rux-icon-crop-free": HTMLRuxIconCropFreeElement;
        "rux-icon-crop-landscape": HTMLRuxIconCropLandscapeElement;
        "rux-icon-crop-original": HTMLRuxIconCropOriginalElement;
        "rux-icon-crop-portrait": HTMLRuxIconCropPortraitElement;
        "rux-icon-crop-rotate": HTMLRuxIconCropRotateElement;
        "rux-icon-crop-square": HTMLRuxIconCropSquareElement;
        "rux-icon-dashboard": HTMLRuxIconDashboardElement;
        "rux-icon-data-usage": HTMLRuxIconDataUsageElement;
        "rux-icon-date-range": HTMLRuxIconDateRangeElement;
        "rux-icon-dehaze": HTMLRuxIconDehazeElement;
        "rux-icon-delete": HTMLRuxIconDeleteElement;
        "rux-icon-delete-forever": HTMLRuxIconDeleteForeverElement;
        "rux-icon-delete-outline": HTMLRuxIconDeleteOutlineElement;
        "rux-icon-delete-sweep": HTMLRuxIconDeleteSweepElement;
        "rux-icon-departure-board": HTMLRuxIconDepartureBoardElement;
        "rux-icon-description": HTMLRuxIconDescriptionElement;
        "rux-icon-desktop-access-disabled": HTMLRuxIconDesktopAccessDisabledElement;
        "rux-icon-desktop-mac": HTMLRuxIconDesktopMacElement;
        "rux-icon-desktop-windows": HTMLRuxIconDesktopWindowsElement;
        "rux-icon-details": HTMLRuxIconDetailsElement;
        "rux-icon-developer-board": HTMLRuxIconDeveloperBoardElement;
        "rux-icon-developer-mode": HTMLRuxIconDeveloperModeElement;
        "rux-icon-device-hub": HTMLRuxIconDeviceHubElement;
        "rux-icon-device-unknown": HTMLRuxIconDeviceUnknownElement;
        "rux-icon-devices": HTMLRuxIconDevicesElement;
        "rux-icon-devices-other": HTMLRuxIconDevicesOtherElement;
        "rux-icon-dialer-sip": HTMLRuxIconDialerSipElement;
        "rux-icon-dialpad": HTMLRuxIconDialpadElement;
        "rux-icon-directions": HTMLRuxIconDirectionsElement;
        "rux-icon-directions-bike": HTMLRuxIconDirectionsBikeElement;
        "rux-icon-directions-boat": HTMLRuxIconDirectionsBoatElement;
        "rux-icon-directions-bus": HTMLRuxIconDirectionsBusElement;
        "rux-icon-directions-car": HTMLRuxIconDirectionsCarElement;
        "rux-icon-directions-railway": HTMLRuxIconDirectionsRailwayElement;
        "rux-icon-directions-run": HTMLRuxIconDirectionsRunElement;
        "rux-icon-directions-subway": HTMLRuxIconDirectionsSubwayElement;
        "rux-icon-directions-transit": HTMLRuxIconDirectionsTransitElement;
        "rux-icon-directions-walk": HTMLRuxIconDirectionsWalkElement;
        "rux-icon-disc-full": HTMLRuxIconDiscFullElement;
        "rux-icon-dns": HTMLRuxIconDnsElement;
        "rux-icon-dock": HTMLRuxIconDockElement;
        "rux-icon-domain": HTMLRuxIconDomainElement;
        "rux-icon-domain-disabled": HTMLRuxIconDomainDisabledElement;
        "rux-icon-done": HTMLRuxIconDoneElement;
        "rux-icon-done-all": HTMLRuxIconDoneAllElement;
        "rux-icon-done-outline": HTMLRuxIconDoneOutlineElement;
        "rux-icon-donut-large": HTMLRuxIconDonutLargeElement;
        "rux-icon-donut-small": HTMLRuxIconDonutSmallElement;
        "rux-icon-drafts": HTMLRuxIconDraftsElement;
        "rux-icon-drag-handle": HTMLRuxIconDragHandleElement;
        "rux-icon-drag-indicator": HTMLRuxIconDragIndicatorElement;
        "rux-icon-drive-eta": HTMLRuxIconDriveEtaElement;
        "rux-icon-duo": HTMLRuxIconDuoElement;
        "rux-icon-dvr": HTMLRuxIconDvrElement;
        "rux-icon-edit": HTMLRuxIconEditElement;
        "rux-icon-edit-attributes": HTMLRuxIconEditAttributesElement;
        "rux-icon-edit-location": HTMLRuxIconEditLocationElement;
        "rux-icon-eject": HTMLRuxIconEjectElement;
        "rux-icon-email": HTMLRuxIconEmailElement;
        "rux-icon-enhanced-encryption": HTMLRuxIconEnhancedEncryptionElement;
        "rux-icon-equalizer": HTMLRuxIconEqualizerElement;
        "rux-icon-equipment": HTMLRuxIconEquipmentElement;
        "rux-icon-error": HTMLRuxIconErrorElement;
        "rux-icon-error-outline": HTMLRuxIconErrorOutlineElement;
        "rux-icon-euro-symbol": HTMLRuxIconEuroSymbolElement;
        "rux-icon-ev-station": HTMLRuxIconEvStationElement;
        "rux-icon-event": HTMLRuxIconEventElement;
        "rux-icon-event-available": HTMLRuxIconEventAvailableElement;
        "rux-icon-event-busy": HTMLRuxIconEventBusyElement;
        "rux-icon-event-note": HTMLRuxIconEventNoteElement;
        "rux-icon-exit-to-app": HTMLRuxIconExitToAppElement;
        "rux-icon-expand-less": HTMLRuxIconExpandLessElement;
        "rux-icon-expand-more": HTMLRuxIconExpandMoreElement;
        "rux-icon-explicit": HTMLRuxIconExplicitElement;
        "rux-icon-explore": HTMLRuxIconExploreElement;
        "rux-icon-explore-off": HTMLRuxIconExploreOffElement;
        "rux-icon-exposure": HTMLRuxIconExposureElement;
        "rux-icon-exposure-neg-1": HTMLRuxIconExposureNeg1Element;
        "rux-icon-exposure-neg-2": HTMLRuxIconExposureNeg2Element;
        "rux-icon-exposure-plus-1": HTMLRuxIconExposurePlus1Element;
        "rux-icon-exposure-plus-2": HTMLRuxIconExposurePlus2Element;
        "rux-icon-exposure-zero": HTMLRuxIconExposureZeroElement;
        "rux-icon-extension": HTMLRuxIconExtensionElement;
        "rux-icon-face": HTMLRuxIconFaceElement;
        "rux-icon-fast-forward": HTMLRuxIconFastForwardElement;
        "rux-icon-fast-rewind": HTMLRuxIconFastRewindElement;
        "rux-icon-fastfood": HTMLRuxIconFastfoodElement;
        "rux-icon-favorite": HTMLRuxIconFavoriteElement;
        "rux-icon-favorite-border": HTMLRuxIconFavoriteBorderElement;
        "rux-icon-featured-play-list": HTMLRuxIconFeaturedPlayListElement;
        "rux-icon-featured-video": HTMLRuxIconFeaturedVideoElement;
        "rux-icon-feedback": HTMLRuxIconFeedbackElement;
        "rux-icon-fiber-dvr": HTMLRuxIconFiberDvrElement;
        "rux-icon-fiber-manual-record": HTMLRuxIconFiberManualRecordElement;
        "rux-icon-fiber-new": HTMLRuxIconFiberNewElement;
        "rux-icon-fiber-pin": HTMLRuxIconFiberPinElement;
        "rux-icon-fiber-smart-record": HTMLRuxIconFiberSmartRecordElement;
        "rux-icon-file-copy": HTMLRuxIconFileCopyElement;
        "rux-icon-filter": HTMLRuxIconFilterElement;
        "rux-icon-filter-1": HTMLRuxIconFilter1Element;
        "rux-icon-filter-2": HTMLRuxIconFilter2Element;
        "rux-icon-filter-3": HTMLRuxIconFilter3Element;
        "rux-icon-filter-4": HTMLRuxIconFilter4Element;
        "rux-icon-filter-5": HTMLRuxIconFilter5Element;
        "rux-icon-filter-6": HTMLRuxIconFilter6Element;
        "rux-icon-filter-7": HTMLRuxIconFilter7Element;
        "rux-icon-filter-8": HTMLRuxIconFilter8Element;
        "rux-icon-filter-9": HTMLRuxIconFilter9Element;
        "rux-icon-filter-9-plus": HTMLRuxIconFilter9PlusElement;
        "rux-icon-filter-b-and-w": HTMLRuxIconFilterBAndWElement;
        "rux-icon-filter-center-focus": HTMLRuxIconFilterCenterFocusElement;
        "rux-icon-filter-drama": HTMLRuxIconFilterDramaElement;
        "rux-icon-filter-frames": HTMLRuxIconFilterFramesElement;
        "rux-icon-filter-hdr": HTMLRuxIconFilterHdrElement;
        "rux-icon-filter-list": HTMLRuxIconFilterListElement;
        "rux-icon-filter-none": HTMLRuxIconFilterNoneElement;
        "rux-icon-filter-tilt-shift": HTMLRuxIconFilterTiltShiftElement;
        "rux-icon-filter-vintage": HTMLRuxIconFilterVintageElement;
        "rux-icon-find-in-page": HTMLRuxIconFindInPageElement;
        "rux-icon-find-replace": HTMLRuxIconFindReplaceElement;
        "rux-icon-fingerprint": HTMLRuxIconFingerprintElement;
        "rux-icon-first-page": HTMLRuxIconFirstPageElement;
        "rux-icon-fitness-center": HTMLRuxIconFitnessCenterElement;
        "rux-icon-flag": HTMLRuxIconFlagElement;
        "rux-icon-flare": HTMLRuxIconFlareElement;
        "rux-icon-flash-auto": HTMLRuxIconFlashAutoElement;
        "rux-icon-flash-off": HTMLRuxIconFlashOffElement;
        "rux-icon-flash-on": HTMLRuxIconFlashOnElement;
        "rux-icon-flight": HTMLRuxIconFlightElement;
        "rux-icon-flight-land": HTMLRuxIconFlightLandElement;
        "rux-icon-flight-takeoff": HTMLRuxIconFlightTakeoffElement;
        "rux-icon-flip": HTMLRuxIconFlipElement;
        "rux-icon-flip-to-back": HTMLRuxIconFlipToBackElement;
        "rux-icon-flip-to-front": HTMLRuxIconFlipToFrontElement;
        "rux-icon-folder": HTMLRuxIconFolderElement;
        "rux-icon-folder-open": HTMLRuxIconFolderOpenElement;
        "rux-icon-folder-shared": HTMLRuxIconFolderSharedElement;
        "rux-icon-folder-special": HTMLRuxIconFolderSpecialElement;
        "rux-icon-font-download": HTMLRuxIconFontDownloadElement;
        "rux-icon-format-align-center": HTMLRuxIconFormatAlignCenterElement;
        "rux-icon-format-align-justify": HTMLRuxIconFormatAlignJustifyElement;
        "rux-icon-format-align-left": HTMLRuxIconFormatAlignLeftElement;
        "rux-icon-format-align-right": HTMLRuxIconFormatAlignRightElement;
        "rux-icon-format-bold": HTMLRuxIconFormatBoldElement;
        "rux-icon-format-clear": HTMLRuxIconFormatClearElement;
        "rux-icon-format-color-fill": HTMLRuxIconFormatColorFillElement;
        "rux-icon-format-color-reset": HTMLRuxIconFormatColorResetElement;
        "rux-icon-format-color-text": HTMLRuxIconFormatColorTextElement;
        "rux-icon-format-indent-decrease": HTMLRuxIconFormatIndentDecreaseElement;
        "rux-icon-format-indent-increase": HTMLRuxIconFormatIndentIncreaseElement;
        "rux-icon-format-italic": HTMLRuxIconFormatItalicElement;
        "rux-icon-format-line-spacing": HTMLRuxIconFormatLineSpacingElement;
        "rux-icon-format-list-bulleted": HTMLRuxIconFormatListBulletedElement;
        "rux-icon-format-list-numbered": HTMLRuxIconFormatListNumberedElement;
        "rux-icon-format-list-numbered-rtl": HTMLRuxIconFormatListNumberedRtlElement;
        "rux-icon-format-paint": HTMLRuxIconFormatPaintElement;
        "rux-icon-format-quote": HTMLRuxIconFormatQuoteElement;
        "rux-icon-format-shapes": HTMLRuxIconFormatShapesElement;
        "rux-icon-format-size": HTMLRuxIconFormatSizeElement;
        "rux-icon-format-strikethrough": HTMLRuxIconFormatStrikethroughElement;
        "rux-icon-format-textdirection-l-to-r": HTMLRuxIconFormatTextdirectionLToRElement;
        "rux-icon-format-textdirection-r-to-l": HTMLRuxIconFormatTextdirectionRToLElement;
        "rux-icon-format-underlined": HTMLRuxIconFormatUnderlinedElement;
        "rux-icon-forum": HTMLRuxIconForumElement;
        "rux-icon-forward": HTMLRuxIconForwardElement;
        "rux-icon-forward-10": HTMLRuxIconForward10Element;
        "rux-icon-forward-30": HTMLRuxIconForward30Element;
        "rux-icon-forward-5": HTMLRuxIconForward5Element;
        "rux-icon-free-breakfast": HTMLRuxIconFreeBreakfastElement;
        "rux-icon-fullscreen": HTMLRuxIconFullscreenElement;
        "rux-icon-fullscreen-exit": HTMLRuxIconFullscreenExitElement;
        "rux-icon-functions": HTMLRuxIconFunctionsElement;
        "rux-icon-g-translate": HTMLRuxIconGTranslateElement;
        "rux-icon-gamepad": HTMLRuxIconGamepadElement;
        "rux-icon-games": HTMLRuxIconGamesElement;
        "rux-icon-gavel": HTMLRuxIconGavelElement;
        "rux-icon-gesture": HTMLRuxIconGestureElement;
        "rux-icon-get-app": HTMLRuxIconGetAppElement;
        "rux-icon-gif": HTMLRuxIconGifElement;
        "rux-icon-golf-course": HTMLRuxIconGolfCourseElement;
        "rux-icon-gps-fixed": HTMLRuxIconGpsFixedElement;
        "rux-icon-gps-not-fixed": HTMLRuxIconGpsNotFixedElement;
        "rux-icon-gps-off": HTMLRuxIconGpsOffElement;
        "rux-icon-grade": HTMLRuxIconGradeElement;
        "rux-icon-gradient": HTMLRuxIconGradientElement;
        "rux-icon-grain": HTMLRuxIconGrainElement;
        "rux-icon-graphic-eq": HTMLRuxIconGraphicEqElement;
        "rux-icon-grid-off": HTMLRuxIconGridOffElement;
        "rux-icon-grid-on": HTMLRuxIconGridOnElement;
        "rux-icon-group": HTMLRuxIconGroupElement;
        "rux-icon-group-add": HTMLRuxIconGroupAddElement;
        "rux-icon-group-work": HTMLRuxIconGroupWorkElement;
        "rux-icon-hd": HTMLRuxIconHdElement;
        "rux-icon-hdr-off": HTMLRuxIconHdrOffElement;
        "rux-icon-hdr-on": HTMLRuxIconHdrOnElement;
        "rux-icon-hdr-strong": HTMLRuxIconHdrStrongElement;
        "rux-icon-hdr-weak": HTMLRuxIconHdrWeakElement;
        "rux-icon-headset": HTMLRuxIconHeadsetElement;
        "rux-icon-headset-mic": HTMLRuxIconHeadsetMicElement;
        "rux-icon-healing": HTMLRuxIconHealingElement;
        "rux-icon-hearing": HTMLRuxIconHearingElement;
        "rux-icon-help": HTMLRuxIconHelpElement;
        "rux-icon-help-outline": HTMLRuxIconHelpOutlineElement;
        "rux-icon-high-quality": HTMLRuxIconHighQualityElement;
        "rux-icon-highlight": HTMLRuxIconHighlightElement;
        "rux-icon-highlight-off": HTMLRuxIconHighlightOffElement;
        "rux-icon-history": HTMLRuxIconHistoryElement;
        "rux-icon-home": HTMLRuxIconHomeElement;
        "rux-icon-horizontal-split": HTMLRuxIconHorizontalSplitElement;
        "rux-icon-hot-tub": HTMLRuxIconHotTubElement;
        "rux-icon-hotel": HTMLRuxIconHotelElement;
        "rux-icon-hourglass-empty": HTMLRuxIconHourglassEmptyElement;
        "rux-icon-hourglass-full": HTMLRuxIconHourglassFullElement;
        "rux-icon-how-to-reg": HTMLRuxIconHowToRegElement;
        "rux-icon-how-to-vote": HTMLRuxIconHowToVoteElement;
        "rux-icon-http": HTMLRuxIconHttpElement;
        "rux-icon-https": HTMLRuxIconHttpsElement;
        "rux-icon-image": HTMLRuxIconImageElement;
        "rux-icon-image-aspect-ratio": HTMLRuxIconImageAspectRatioElement;
        "rux-icon-image-search": HTMLRuxIconImageSearchElement;
        "rux-icon-import-contacts": HTMLRuxIconImportContactsElement;
        "rux-icon-import-export": HTMLRuxIconImportExportElement;
        "rux-icon-important-devices": HTMLRuxIconImportantDevicesElement;
        "rux-icon-inbox": HTMLRuxIconInboxElement;
        "rux-icon-indeterminate-check-box": HTMLRuxIconIndeterminateCheckBoxElement;
        "rux-icon-info": HTMLRuxIconInfoElement;
        "rux-icon-input": HTMLRuxIconInputElement;
        "rux-icon-insert-chart": HTMLRuxIconInsertChartElement;
        "rux-icon-insert-chart-outlined": HTMLRuxIconInsertChartOutlinedElement;
        "rux-icon-insert-comment": HTMLRuxIconInsertCommentElement;
        "rux-icon-insert-drive-file": HTMLRuxIconInsertDriveFileElement;
        "rux-icon-insert-emoticon": HTMLRuxIconInsertEmoticonElement;
        "rux-icon-insert-invitation": HTMLRuxIconInsertInvitationElement;
        "rux-icon-insert-link": HTMLRuxIconInsertLinkElement;
        "rux-icon-insert-photo": HTMLRuxIconInsertPhotoElement;
        "rux-icon-invert-colors": HTMLRuxIconInvertColorsElement;
        "rux-icon-invert-colors-off": HTMLRuxIconInvertColorsOffElement;
        "rux-icon-iso": HTMLRuxIconIsoElement;
        "rux-icon-keyboard": HTMLRuxIconKeyboardElement;
        "rux-icon-keyboard-arrow-down": HTMLRuxIconKeyboardArrowDownElement;
        "rux-icon-keyboard-arrow-left": HTMLRuxIconKeyboardArrowLeftElement;
        "rux-icon-keyboard-arrow-right": HTMLRuxIconKeyboardArrowRightElement;
        "rux-icon-keyboard-arrow-up": HTMLRuxIconKeyboardArrowUpElement;
        "rux-icon-keyboard-backspace": HTMLRuxIconKeyboardBackspaceElement;
        "rux-icon-keyboard-capslock": HTMLRuxIconKeyboardCapslockElement;
        "rux-icon-keyboard-hide": HTMLRuxIconKeyboardHideElement;
        "rux-icon-keyboard-return": HTMLRuxIconKeyboardReturnElement;
        "rux-icon-keyboard-tab": HTMLRuxIconKeyboardTabElement;
        "rux-icon-keyboard-voice": HTMLRuxIconKeyboardVoiceElement;
        "rux-icon-kitchen": HTMLRuxIconKitchenElement;
        "rux-icon-label": HTMLRuxIconLabelElement;
        "rux-icon-label-important": HTMLRuxIconLabelImportantElement;
        "rux-icon-label-off": HTMLRuxIconLabelOffElement;
        "rux-icon-landscape": HTMLRuxIconLandscapeElement;
        "rux-icon-language": HTMLRuxIconLanguageElement;
        "rux-icon-laptop": HTMLRuxIconLaptopElement;
        "rux-icon-laptop-chromebook": HTMLRuxIconLaptopChromebookElement;
        "rux-icon-laptop-mac": HTMLRuxIconLaptopMacElement;
        "rux-icon-laptop-windows": HTMLRuxIconLaptopWindowsElement;
        "rux-icon-last-page": HTMLRuxIconLastPageElement;
        "rux-icon-launch": HTMLRuxIconLaunchElement;
        "rux-icon-layers": HTMLRuxIconLayersElement;
        "rux-icon-layers-clear": HTMLRuxIconLayersClearElement;
        "rux-icon-leak-add": HTMLRuxIconLeakAddElement;
        "rux-icon-leak-remove": HTMLRuxIconLeakRemoveElement;
        "rux-icon-lens": HTMLRuxIconLensElement;
        "rux-icon-library-add": HTMLRuxIconLibraryAddElement;
        "rux-icon-library-books": HTMLRuxIconLibraryBooksElement;
        "rux-icon-library-music": HTMLRuxIconLibraryMusicElement;
        "rux-icon-line-style": HTMLRuxIconLineStyleElement;
        "rux-icon-line-weight": HTMLRuxIconLineWeightElement;
        "rux-icon-linear-scale": HTMLRuxIconLinearScaleElement;
        "rux-icon-link": HTMLRuxIconLinkElement;
        "rux-icon-link-off": HTMLRuxIconLinkOffElement;
        "rux-icon-linked-camera": HTMLRuxIconLinkedCameraElement;
        "rux-icon-list": HTMLRuxIconListElement;
        "rux-icon-list-alt": HTMLRuxIconListAltElement;
        "rux-icon-live-help": HTMLRuxIconLiveHelpElement;
        "rux-icon-live-tv": HTMLRuxIconLiveTvElement;
        "rux-icon-local-activity": HTMLRuxIconLocalActivityElement;
        "rux-icon-local-airport": HTMLRuxIconLocalAirportElement;
        "rux-icon-local-atm": HTMLRuxIconLocalAtmElement;
        "rux-icon-local-bar": HTMLRuxIconLocalBarElement;
        "rux-icon-local-cafe": HTMLRuxIconLocalCafeElement;
        "rux-icon-local-convenience-store": HTMLRuxIconLocalConvenienceStoreElement;
        "rux-icon-local-dining": HTMLRuxIconLocalDiningElement;
        "rux-icon-local-drink": HTMLRuxIconLocalDrinkElement;
        "rux-icon-local-gas-station": HTMLRuxIconLocalGasStationElement;
        "rux-icon-local-grocery-store": HTMLRuxIconLocalGroceryStoreElement;
        "rux-icon-local-hospital": HTMLRuxIconLocalHospitalElement;
        "rux-icon-local-hotel": HTMLRuxIconLocalHotelElement;
        "rux-icon-local-laundry-service": HTMLRuxIconLocalLaundryServiceElement;
        "rux-icon-local-library": HTMLRuxIconLocalLibraryElement;
        "rux-icon-local-mall": HTMLRuxIconLocalMallElement;
        "rux-icon-local-movies": HTMLRuxIconLocalMoviesElement;
        "rux-icon-local-offer": HTMLRuxIconLocalOfferElement;
        "rux-icon-local-parking": HTMLRuxIconLocalParkingElement;
        "rux-icon-local-pharmacy": HTMLRuxIconLocalPharmacyElement;
        "rux-icon-local-phone": HTMLRuxIconLocalPhoneElement;
        "rux-icon-local-play": HTMLRuxIconLocalPlayElement;
        "rux-icon-local-post-office": HTMLRuxIconLocalPostOfficeElement;
        "rux-icon-local-printshop": HTMLRuxIconLocalPrintshopElement;
        "rux-icon-local-see": HTMLRuxIconLocalSeeElement;
        "rux-icon-local-shipping": HTMLRuxIconLocalShippingElement;
        "rux-icon-local-taxi": HTMLRuxIconLocalTaxiElement;
        "rux-icon-location-city": HTMLRuxIconLocationCityElement;
        "rux-icon-location-disabled": HTMLRuxIconLocationDisabledElement;
        "rux-icon-location-off": HTMLRuxIconLocationOffElement;
        "rux-icon-location-on": HTMLRuxIconLocationOnElement;
        "rux-icon-location-searching": HTMLRuxIconLocationSearchingElement;
        "rux-icon-lock": HTMLRuxIconLockElement;
        "rux-icon-lock-open": HTMLRuxIconLockOpenElement;
        "rux-icon-looks": HTMLRuxIconLooksElement;
        "rux-icon-looks-1": HTMLRuxIconLooks1Element;
        "rux-icon-looks-2": HTMLRuxIconLooks2Element;
        "rux-icon-looks-3": HTMLRuxIconLooks3Element;
        "rux-icon-looks-4": HTMLRuxIconLooks4Element;
        "rux-icon-looks-5": HTMLRuxIconLooks5Element;
        "rux-icon-looks-6": HTMLRuxIconLooks6Element;
        "rux-icon-loop": HTMLRuxIconLoopElement;
        "rux-icon-loupe": HTMLRuxIconLoupeElement;
        "rux-icon-low-priority": HTMLRuxIconLowPriorityElement;
        "rux-icon-loyalty": HTMLRuxIconLoyaltyElement;
        "rux-icon-mail": HTMLRuxIconMailElement;
        "rux-icon-mail-outline": HTMLRuxIconMailOutlineElement;
        "rux-icon-map": HTMLRuxIconMapElement;
        "rux-icon-markunread": HTMLRuxIconMarkunreadElement;
        "rux-icon-markunread-mailbox": HTMLRuxIconMarkunreadMailboxElement;
        "rux-icon-maximize": HTMLRuxIconMaximizeElement;
        "rux-icon-meeting-room": HTMLRuxIconMeetingRoomElement;
        "rux-icon-memory": HTMLRuxIconMemoryElement;
        "rux-icon-menu": HTMLRuxIconMenuElement;
        "rux-icon-merge-type": HTMLRuxIconMergeTypeElement;
        "rux-icon-message": HTMLRuxIconMessageElement;
        "rux-icon-mic": HTMLRuxIconMicElement;
        "rux-icon-mic-none": HTMLRuxIconMicNoneElement;
        "rux-icon-mic-off": HTMLRuxIconMicOffElement;
        "rux-icon-minimize": HTMLRuxIconMinimizeElement;
        "rux-icon-missed-video-call": HTMLRuxIconMissedVideoCallElement;
        "rux-icon-mission": HTMLRuxIconMissionElement;
        "rux-icon-mms": HTMLRuxIconMmsElement;
        "rux-icon-mobile-friendly": HTMLRuxIconMobileFriendlyElement;
        "rux-icon-mobile-off": HTMLRuxIconMobileOffElement;
        "rux-icon-mobile-screen-share": HTMLRuxIconMobileScreenShareElement;
        "rux-icon-mode-comment": HTMLRuxIconModeCommentElement;
        "rux-icon-monetization-on": HTMLRuxIconMonetizationOnElement;
        "rux-icon-money": HTMLRuxIconMoneyElement;
        "rux-icon-money-off": HTMLRuxIconMoneyOffElement;
        "rux-icon-monochrome-photos": HTMLRuxIconMonochromePhotosElement;
        "rux-icon-mood": HTMLRuxIconMoodElement;
        "rux-icon-mood-bad": HTMLRuxIconMoodBadElement;
        "rux-icon-more": HTMLRuxIconMoreElement;
        "rux-icon-more-horiz": HTMLRuxIconMoreHorizElement;
        "rux-icon-more-vert": HTMLRuxIconMoreVertElement;
        "rux-icon-motorcycle": HTMLRuxIconMotorcycleElement;
        "rux-icon-mouse": HTMLRuxIconMouseElement;
        "rux-icon-move-to-inbox": HTMLRuxIconMoveToInboxElement;
        "rux-icon-movie": HTMLRuxIconMovieElement;
        "rux-icon-movie-creation": HTMLRuxIconMovieCreationElement;
        "rux-icon-movie-filter": HTMLRuxIconMovieFilterElement;
        "rux-icon-multiline-chart": HTMLRuxIconMultilineChartElement;
        "rux-icon-music-note": HTMLRuxIconMusicNoteElement;
        "rux-icon-music-off": HTMLRuxIconMusicOffElement;
        "rux-icon-music-video": HTMLRuxIconMusicVideoElement;
        "rux-icon-my-location": HTMLRuxIconMyLocationElement;
        "rux-icon-nature": HTMLRuxIconNatureElement;
        "rux-icon-nature-people": HTMLRuxIconNaturePeopleElement;
        "rux-icon-navigate-before": HTMLRuxIconNavigateBeforeElement;
        "rux-icon-navigate-next": HTMLRuxIconNavigateNextElement;
        "rux-icon-navigation": HTMLRuxIconNavigationElement;
        "rux-icon-near-me": HTMLRuxIconNearMeElement;
        "rux-icon-netcom": HTMLRuxIconNetcomElement;
        "rux-icon-network-cell": HTMLRuxIconNetworkCellElement;
        "rux-icon-network-check": HTMLRuxIconNetworkCheckElement;
        "rux-icon-network-locked": HTMLRuxIconNetworkLockedElement;
        "rux-icon-network-wifi": HTMLRuxIconNetworkWifiElement;
        "rux-icon-new-releases": HTMLRuxIconNewReleasesElement;
        "rux-icon-next-week": HTMLRuxIconNextWeekElement;
        "rux-icon-nfc": HTMLRuxIconNfcElement;
        "rux-icon-no-encryption": HTMLRuxIconNoEncryptionElement;
        "rux-icon-no-meeting-room": HTMLRuxIconNoMeetingRoomElement;
        "rux-icon-no-sim": HTMLRuxIconNoSimElement;
        "rux-icon-not-interested": HTMLRuxIconNotInterestedElement;
        "rux-icon-not-listed-location": HTMLRuxIconNotListedLocationElement;
        "rux-icon-note": HTMLRuxIconNoteElement;
        "rux-icon-note-add": HTMLRuxIconNoteAddElement;
        "rux-icon-notes": HTMLRuxIconNotesElement;
        "rux-icon-notification-important": HTMLRuxIconNotificationImportantElement;
        "rux-icon-notifications": HTMLRuxIconNotificationsElement;
        "rux-icon-notifications-active": HTMLRuxIconNotificationsActiveElement;
        "rux-icon-notifications-none": HTMLRuxIconNotificationsNoneElement;
        "rux-icon-notifications-off": HTMLRuxIconNotificationsOffElement;
        "rux-icon-notifications-paused": HTMLRuxIconNotificationsPausedElement;
        "rux-icon-offline-bolt": HTMLRuxIconOfflineBoltElement;
        "rux-icon-offline-pin": HTMLRuxIconOfflinePinElement;
        "rux-icon-ondemand-video": HTMLRuxIconOndemandVideoElement;
        "rux-icon-opacity": HTMLRuxIconOpacityElement;
        "rux-icon-open-in-browser": HTMLRuxIconOpenInBrowserElement;
        "rux-icon-open-in-new": HTMLRuxIconOpenInNewElement;
        "rux-icon-open-with": HTMLRuxIconOpenWithElement;
        "rux-icon-outlined-flag": HTMLRuxIconOutlinedFlagElement;
        "rux-icon-pages": HTMLRuxIconPagesElement;
        "rux-icon-pageview": HTMLRuxIconPageviewElement;
        "rux-icon-palette": HTMLRuxIconPaletteElement;
        "rux-icon-pan-tool": HTMLRuxIconPanToolElement;
        "rux-icon-panorama": HTMLRuxIconPanoramaElement;
        "rux-icon-panorama-fish-eye": HTMLRuxIconPanoramaFishEyeElement;
        "rux-icon-panorama-horizontal": HTMLRuxIconPanoramaHorizontalElement;
        "rux-icon-panorama-vertical": HTMLRuxIconPanoramaVerticalElement;
        "rux-icon-panorama-wide-angle": HTMLRuxIconPanoramaWideAngleElement;
        "rux-icon-party-mode": HTMLRuxIconPartyModeElement;
        "rux-icon-pause": HTMLRuxIconPauseElement;
        "rux-icon-pause-circle-filled": HTMLRuxIconPauseCircleFilledElement;
        "rux-icon-pause-circle-outline": HTMLRuxIconPauseCircleOutlineElement;
        "rux-icon-pause-presentation": HTMLRuxIconPausePresentationElement;
        "rux-icon-payload": HTMLRuxIconPayloadElement;
        "rux-icon-payment": HTMLRuxIconPaymentElement;
        "rux-icon-people-outline": HTMLRuxIconPeopleOutlineElement;
        "rux-icon-perm-camera-mic": HTMLRuxIconPermCameraMicElement;
        "rux-icon-perm-contact-calendar": HTMLRuxIconPermContactCalendarElement;
        "rux-icon-perm-data-setting": HTMLRuxIconPermDataSettingElement;
        "rux-icon-perm-device-information": HTMLRuxIconPermDeviceInformationElement;
        "rux-icon-perm-identity": HTMLRuxIconPermIdentityElement;
        "rux-icon-perm-media": HTMLRuxIconPermMediaElement;
        "rux-icon-perm-phone-msg": HTMLRuxIconPermPhoneMsgElement;
        "rux-icon-perm-scan-wifi": HTMLRuxIconPermScanWifiElement;
        "rux-icon-person": HTMLRuxIconPersonElement;
        "rux-icon-person-add": HTMLRuxIconPersonAddElement;
        "rux-icon-person-add-disabled": HTMLRuxIconPersonAddDisabledElement;
        "rux-icon-person-outline": HTMLRuxIconPersonOutlineElement;
        "rux-icon-person-pin": HTMLRuxIconPersonPinElement;
        "rux-icon-person-pin-circle": HTMLRuxIconPersonPinCircleElement;
        "rux-icon-personal-video": HTMLRuxIconPersonalVideoElement;
        "rux-icon-pets": HTMLRuxIconPetsElement;
        "rux-icon-phone": HTMLRuxIconPhoneElement;
        "rux-icon-phone-android": HTMLRuxIconPhoneAndroidElement;
        "rux-icon-phone-bluetooth-speaker": HTMLRuxIconPhoneBluetoothSpeakerElement;
        "rux-icon-phone-callback": HTMLRuxIconPhoneCallbackElement;
        "rux-icon-phone-forwarded": HTMLRuxIconPhoneForwardedElement;
        "rux-icon-phone-in-talk": HTMLRuxIconPhoneInTalkElement;
        "rux-icon-phone-iphone": HTMLRuxIconPhoneIphoneElement;
        "rux-icon-phone-locked": HTMLRuxIconPhoneLockedElement;
        "rux-icon-phone-missed": HTMLRuxIconPhoneMissedElement;
        "rux-icon-phone-paused": HTMLRuxIconPhonePausedElement;
        "rux-icon-phonelink": HTMLRuxIconPhonelinkElement;
        "rux-icon-phonelink-erase": HTMLRuxIconPhonelinkEraseElement;
        "rux-icon-phonelink-lock": HTMLRuxIconPhonelinkLockElement;
        "rux-icon-phonelink-off": HTMLRuxIconPhonelinkOffElement;
        "rux-icon-phonelink-ring": HTMLRuxIconPhonelinkRingElement;
        "rux-icon-phonelink-setup": HTMLRuxIconPhonelinkSetupElement;
        "rux-icon-photo": HTMLRuxIconPhotoElement;
        "rux-icon-photo-album": HTMLRuxIconPhotoAlbumElement;
        "rux-icon-photo-camera": HTMLRuxIconPhotoCameraElement;
        "rux-icon-photo-filter": HTMLRuxIconPhotoFilterElement;
        "rux-icon-photo-library": HTMLRuxIconPhotoLibraryElement;
        "rux-icon-photo-size-select-actual": HTMLRuxIconPhotoSizeSelectActualElement;
        "rux-icon-photo-size-select-large": HTMLRuxIconPhotoSizeSelectLargeElement;
        "rux-icon-photo-size-select-small": HTMLRuxIconPhotoSizeSelectSmallElement;
        "rux-icon-picture-as-pdf": HTMLRuxIconPictureAsPdfElement;
        "rux-icon-picture-in-picture": HTMLRuxIconPictureInPictureElement;
        "rux-icon-picture-in-picture-alt": HTMLRuxIconPictureInPictureAltElement;
        "rux-icon-pie-chart": HTMLRuxIconPieChartElement;
        "rux-icon-pin-drop": HTMLRuxIconPinDropElement;
        "rux-icon-place": HTMLRuxIconPlaceElement;
        "rux-icon-play-arrow": HTMLRuxIconPlayArrowElement;
        "rux-icon-play-circle-filled": HTMLRuxIconPlayCircleFilledElement;
        "rux-icon-play-circle-filled-white": HTMLRuxIconPlayCircleFilledWhiteElement;
        "rux-icon-play-circle-outline": HTMLRuxIconPlayCircleOutlineElement;
        "rux-icon-play-for-work": HTMLRuxIconPlayForWorkElement;
        "rux-icon-playlist-add": HTMLRuxIconPlaylistAddElement;
        "rux-icon-playlist-add-check": HTMLRuxIconPlaylistAddCheckElement;
        "rux-icon-playlist-play": HTMLRuxIconPlaylistPlayElement;
        "rux-icon-plus-one": HTMLRuxIconPlusOneElement;
        "rux-icon-poll": HTMLRuxIconPollElement;
        "rux-icon-pool": HTMLRuxIconPoolElement;
        "rux-icon-portable-wifi-off": HTMLRuxIconPortableWifiOffElement;
        "rux-icon-portrait": HTMLRuxIconPortraitElement;
        "rux-icon-power": HTMLRuxIconPowerElement;
        "rux-icon-power-input": HTMLRuxIconPowerInputElement;
        "rux-icon-power-off": HTMLRuxIconPowerOffElement;
        "rux-icon-power-settings-new": HTMLRuxIconPowerSettingsNewElement;
        "rux-icon-pregnant-woman": HTMLRuxIconPregnantWomanElement;
        "rux-icon-present-to-all": HTMLRuxIconPresentToAllElement;
        "rux-icon-print": HTMLRuxIconPrintElement;
        "rux-icon-print-disabled": HTMLRuxIconPrintDisabledElement;
        "rux-icon-priority-high": HTMLRuxIconPriorityHighElement;
        "rux-icon-processor": HTMLRuxIconProcessorElement;
        "rux-icon-processor-alt": HTMLRuxIconProcessorAltElement;
        "rux-icon-propulsion-power": HTMLRuxIconPropulsionPowerElement;
        "rux-icon-public": HTMLRuxIconPublicElement;
        "rux-icon-publish": HTMLRuxIconPublishElement;
        "rux-icon-query-builder": HTMLRuxIconQueryBuilderElement;
        "rux-icon-question-answer": HTMLRuxIconQuestionAnswerElement;
        "rux-icon-queue": HTMLRuxIconQueueElement;
        "rux-icon-queue-music": HTMLRuxIconQueueMusicElement;
        "rux-icon-queue-play-next": HTMLRuxIconQueuePlayNextElement;
        "rux-icon-radio": HTMLRuxIconRadioElement;
        "rux-icon-radio-button-checked": HTMLRuxIconRadioButtonCheckedElement;
        "rux-icon-radio-button-unchecked": HTMLRuxIconRadioButtonUncheckedElement;
        "rux-icon-rate-review": HTMLRuxIconRateReviewElement;
        "rux-icon-receipt": HTMLRuxIconReceiptElement;
        "rux-icon-recent-actors": HTMLRuxIconRecentActorsElement;
        "rux-icon-record-voice-over": HTMLRuxIconRecordVoiceOverElement;
        "rux-icon-redeem": HTMLRuxIconRedeemElement;
        "rux-icon-redo": HTMLRuxIconRedoElement;
        "rux-icon-refresh": HTMLRuxIconRefreshElement;
        "rux-icon-remove": HTMLRuxIconRemoveElement;
        "rux-icon-remove-circle": HTMLRuxIconRemoveCircleElement;
        "rux-icon-remove-circle-outline": HTMLRuxIconRemoveCircleOutlineElement;
        "rux-icon-remove-from-queue": HTMLRuxIconRemoveFromQueueElement;
        "rux-icon-remove-red-eye": HTMLRuxIconRemoveRedEyeElement;
        "rux-icon-remove-shopping-cart": HTMLRuxIconRemoveShoppingCartElement;
        "rux-icon-reorder": HTMLRuxIconReorderElement;
        "rux-icon-repeat": HTMLRuxIconRepeatElement;
        "rux-icon-repeat-one": HTMLRuxIconRepeatOneElement;
        "rux-icon-replay": HTMLRuxIconReplayElement;
        "rux-icon-replay-10": HTMLRuxIconReplay10Element;
        "rux-icon-replay-30": HTMLRuxIconReplay30Element;
        "rux-icon-replay-5": HTMLRuxIconReplay5Element;
        "rux-icon-reply": HTMLRuxIconReplyElement;
        "rux-icon-reply-all": HTMLRuxIconReplyAllElement;
        "rux-icon-report": HTMLRuxIconReportElement;
        "rux-icon-report-off": HTMLRuxIconReportOffElement;
        "rux-icon-report-problem": HTMLRuxIconReportProblemElement;
        "rux-icon-restaurant": HTMLRuxIconRestaurantElement;
        "rux-icon-restaurant-menu": HTMLRuxIconRestaurantMenuElement;
        "rux-icon-restore": HTMLRuxIconRestoreElement;
        "rux-icon-restore-from-trash": HTMLRuxIconRestoreFromTrashElement;
        "rux-icon-restore-page": HTMLRuxIconRestorePageElement;
        "rux-icon-ring-volume": HTMLRuxIconRingVolumeElement;
        "rux-icon-room": HTMLRuxIconRoomElement;
        "rux-icon-room-service": HTMLRuxIconRoomServiceElement;
        "rux-icon-rotate-90-degrees-cc": HTMLRuxIconRotate90DegreesCcElement;
        "rux-icon-rotate-left": HTMLRuxIconRotateLeftElement;
        "rux-icon-rotate-right": HTMLRuxIconRotateRightElement;
        "rux-icon-rounded-corner": HTMLRuxIconRoundedCornerElement;
        "rux-icon-router": HTMLRuxIconRouterElement;
        "rux-icon-rowing": HTMLRuxIconRowingElement;
        "rux-icon-rss-feed": HTMLRuxIconRssFeedElement;
        "rux-icon-rv-hookup": HTMLRuxIconRvHookupElement;
        "rux-icon-satellite": HTMLRuxIconSatelliteElement;
        "rux-icon-satellite-off": HTMLRuxIconSatelliteOffElement;
        "rux-icon-satellite-receive": HTMLRuxIconSatelliteReceiveElement;
        "rux-icon-satellite-transmit": HTMLRuxIconSatelliteTransmitElement;
        "rux-icon-save": HTMLRuxIconSaveElement;
        "rux-icon-save-alt": HTMLRuxIconSaveAltElement;
        "rux-icon-scanner": HTMLRuxIconScannerElement;
        "rux-icon-scatter-plot": HTMLRuxIconScatterPlotElement;
        "rux-icon-schedule": HTMLRuxIconScheduleElement;
        "rux-icon-school": HTMLRuxIconSchoolElement;
        "rux-icon-score": HTMLRuxIconScoreElement;
        "rux-icon-screen-lock-landscape": HTMLRuxIconScreenLockLandscapeElement;
        "rux-icon-screen-lock-portrait": HTMLRuxIconScreenLockPortraitElement;
        "rux-icon-screen-lock-rotation": HTMLRuxIconScreenLockRotationElement;
        "rux-icon-screen-rotation": HTMLRuxIconScreenRotationElement;
        "rux-icon-screen-share": HTMLRuxIconScreenShareElement;
        "rux-icon-sd-card": HTMLRuxIconSdCardElement;
        "rux-icon-sd-storage": HTMLRuxIconSdStorageElement;
        "rux-icon-search": HTMLRuxIconSearchElement;
        "rux-icon-seat": HTMLRuxIconSeatElement;
        "rux-icon-security": HTMLRuxIconSecurityElement;
        "rux-icon-select-all": HTMLRuxIconSelectAllElement;
        "rux-icon-send": HTMLRuxIconSendElement;
        "rux-icon-sentiment-dissatisfied": HTMLRuxIconSentimentDissatisfiedElement;
        "rux-icon-sentiment-satisfied": HTMLRuxIconSentimentSatisfiedElement;
        "rux-icon-sentiment-satisfied-alt": HTMLRuxIconSentimentSatisfiedAltElement;
        "rux-icon-sentiment-very-dissatisfied": HTMLRuxIconSentimentVeryDissatisfiedElement;
        "rux-icon-sentiment-very-satisfied": HTMLRuxIconSentimentVerySatisfiedElement;
        "rux-icon-settings": HTMLRuxIconSettingsElement;
        "rux-icon-settings-applications": HTMLRuxIconSettingsApplicationsElement;
        "rux-icon-settings-backup-restore": HTMLRuxIconSettingsBackupRestoreElement;
        "rux-icon-settings-bluetooth": HTMLRuxIconSettingsBluetoothElement;
        "rux-icon-settings-brightness": HTMLRuxIconSettingsBrightnessElement;
        "rux-icon-settings-cell": HTMLRuxIconSettingsCellElement;
        "rux-icon-settings-ethernet": HTMLRuxIconSettingsEthernetElement;
        "rux-icon-settings-input-antenna": HTMLRuxIconSettingsInputAntennaElement;
        "rux-icon-settings-input-component": HTMLRuxIconSettingsInputComponentElement;
        "rux-icon-settings-input-composite": HTMLRuxIconSettingsInputCompositeElement;
        "rux-icon-settings-input-hdmi": HTMLRuxIconSettingsInputHdmiElement;
        "rux-icon-settings-input-svideo": HTMLRuxIconSettingsInputSvideoElement;
        "rux-icon-settings-overscan": HTMLRuxIconSettingsOverscanElement;
        "rux-icon-settings-phone": HTMLRuxIconSettingsPhoneElement;
        "rux-icon-settings-power": HTMLRuxIconSettingsPowerElement;
        "rux-icon-settings-remote": HTMLRuxIconSettingsRemoteElement;
        "rux-icon-settings-system-daydream": HTMLRuxIconSettingsSystemDaydreamElement;
        "rux-icon-settings-voice": HTMLRuxIconSettingsVoiceElement;
        "rux-icon-share": HTMLRuxIconShareElement;
        "rux-icon-shop": HTMLRuxIconShopElement;
        "rux-icon-shop-two": HTMLRuxIconShopTwoElement;
        "rux-icon-shopping-basket": HTMLRuxIconShoppingBasketElement;
        "rux-icon-shopping-cart": HTMLRuxIconShoppingCartElement;
        "rux-icon-short-text": HTMLRuxIconShortTextElement;
        "rux-icon-show-chart": HTMLRuxIconShowChartElement;
        "rux-icon-shuffle": HTMLRuxIconShuffleElement;
        "rux-icon-shutter-speed": HTMLRuxIconShutterSpeedElement;
        "rux-icon-signal-cellular-0-bar": HTMLRuxIconSignalCellular0BarElement;
        "rux-icon-signal-cellular-1-bar": HTMLRuxIconSignalCellular1BarElement;
        "rux-icon-signal-cellular-2-bar": HTMLRuxIconSignalCellular2BarElement;
        "rux-icon-signal-cellular-3-bar": HTMLRuxIconSignalCellular3BarElement;
        "rux-icon-signal-cellular-4-bar": HTMLRuxIconSignalCellular4BarElement;
        "rux-icon-signal-cellular-alt": HTMLRuxIconSignalCellularAltElement;
        "rux-icon-signal-cellular-connected-no-internet-0-bar": HTMLRuxIconSignalCellularConnectedNoInternet0BarElement;
        "rux-icon-signal-cellular-connected-no-internet-1-bar": HTMLRuxIconSignalCellularConnectedNoInternet1BarElement;
        "rux-icon-signal-cellular-connected-no-internet-2-bar": HTMLRuxIconSignalCellularConnectedNoInternet2BarElement;
        "rux-icon-signal-cellular-connected-no-internet-3-bar": HTMLRuxIconSignalCellularConnectedNoInternet3BarElement;
        "rux-icon-signal-cellular-connected-no-internet-4-bar": HTMLRuxIconSignalCellularConnectedNoInternet4BarElement;
        "rux-icon-signal-cellular-no-sim": HTMLRuxIconSignalCellularNoSimElement;
        "rux-icon-signal-cellular-null": HTMLRuxIconSignalCellularNullElement;
        "rux-icon-signal-cellular-off": HTMLRuxIconSignalCellularOffElement;
        "rux-icon-signal-wifi-0-bar": HTMLRuxIconSignalWifi0BarElement;
        "rux-icon-signal-wifi-1-bar": HTMLRuxIconSignalWifi1BarElement;
        "rux-icon-signal-wifi-1-bar-lock": HTMLRuxIconSignalWifi1BarLockElement;
        "rux-icon-signal-wifi-2-bar": HTMLRuxIconSignalWifi2BarElement;
        "rux-icon-signal-wifi-2-bar-lock": HTMLRuxIconSignalWifi2BarLockElement;
        "rux-icon-signal-wifi-3-bar": HTMLRuxIconSignalWifi3BarElement;
        "rux-icon-signal-wifi-3-bar-lock": HTMLRuxIconSignalWifi3BarLockElement;
        "rux-icon-signal-wifi-4-bar": HTMLRuxIconSignalWifi4BarElement;
        "rux-icon-signal-wifi-4-bar-lock": HTMLRuxIconSignalWifi4BarLockElement;
        "rux-icon-signal-wifi-off": HTMLRuxIconSignalWifiOffElement;
        "rux-icon-sim-card": HTMLRuxIconSimCardElement;
        "rux-icon-skip-next": HTMLRuxIconSkipNextElement;
        "rux-icon-skip-previous": HTMLRuxIconSkipPreviousElement;
        "rux-icon-slideshow": HTMLRuxIconSlideshowElement;
        "rux-icon-slow-motion-video": HTMLRuxIconSlowMotionVideoElement;
        "rux-icon-smartphone": HTMLRuxIconSmartphoneElement;
        "rux-icon-smoke-free": HTMLRuxIconSmokeFreeElement;
        "rux-icon-smoking-rooms": HTMLRuxIconSmokingRoomsElement;
        "rux-icon-sms": HTMLRuxIconSmsElement;
        "rux-icon-sms-failed": HTMLRuxIconSmsFailedElement;
        "rux-icon-snooze": HTMLRuxIconSnoozeElement;
        "rux-icon-solar": HTMLRuxIconSolarElement;
        "rux-icon-sort": HTMLRuxIconSortElement;
        "rux-icon-sort-by-alpha": HTMLRuxIconSortByAlphaElement;
        "rux-icon-spa": HTMLRuxIconSpaElement;
        "rux-icon-space-bar": HTMLRuxIconSpaceBarElement;
        "rux-icon-speaker": HTMLRuxIconSpeakerElement;
        "rux-icon-speaker-group": HTMLRuxIconSpeakerGroupElement;
        "rux-icon-speaker-notes": HTMLRuxIconSpeakerNotesElement;
        "rux-icon-speaker-notes-off": HTMLRuxIconSpeakerNotesOffElement;
        "rux-icon-speaker-phone": HTMLRuxIconSpeakerPhoneElement;
        "rux-icon-spellcheck": HTMLRuxIconSpellcheckElement;
        "rux-icon-star": HTMLRuxIconStarElement;
        "rux-icon-star-border": HTMLRuxIconStarBorderElement;
        "rux-icon-star-half": HTMLRuxIconStarHalfElement;
        "rux-icon-star-rate": HTMLRuxIconStarRateElement;
        "rux-icon-stars": HTMLRuxIconStarsElement;
        "rux-icon-stay-current-landscape": HTMLRuxIconStayCurrentLandscapeElement;
        "rux-icon-stay-current-portrait": HTMLRuxIconStayCurrentPortraitElement;
        "rux-icon-stay-primary-landscape": HTMLRuxIconStayPrimaryLandscapeElement;
        "rux-icon-stay-primary-portrait": HTMLRuxIconStayPrimaryPortraitElement;
        "rux-icon-stop": HTMLRuxIconStopElement;
        "rux-icon-stop-screen-share": HTMLRuxIconStopScreenShareElement;
        "rux-icon-storage": HTMLRuxIconStorageElement;
        "rux-icon-store": HTMLRuxIconStoreElement;
        "rux-icon-store-mall-directory": HTMLRuxIconStoreMallDirectoryElement;
        "rux-icon-straighten": HTMLRuxIconStraightenElement;
        "rux-icon-streetview": HTMLRuxIconStreetviewElement;
        "rux-icon-strikethrough-s": HTMLRuxIconStrikethroughSElement;
        "rux-icon-style": HTMLRuxIconStyleElement;
        "rux-icon-subdirectory-arrow-left": HTMLRuxIconSubdirectoryArrowLeftElement;
        "rux-icon-subdirectory-arrow-right": HTMLRuxIconSubdirectoryArrowRightElement;
        "rux-icon-subject": HTMLRuxIconSubjectElement;
        "rux-icon-subscriptions": HTMLRuxIconSubscriptionsElement;
        "rux-icon-subtitles": HTMLRuxIconSubtitlesElement;
        "rux-icon-subway": HTMLRuxIconSubwayElement;
        "rux-icon-supervised-user-circle": HTMLRuxIconSupervisedUserCircleElement;
        "rux-icon-supervisor-account": HTMLRuxIconSupervisorAccountElement;
        "rux-icon-surround-sound": HTMLRuxIconSurroundSoundElement;
        "rux-icon-swap-calls": HTMLRuxIconSwapCallsElement;
        "rux-icon-swap-horiz": HTMLRuxIconSwapHorizElement;
        "rux-icon-swap-horizontal-circle": HTMLRuxIconSwapHorizontalCircleElement;
        "rux-icon-swap-vert": HTMLRuxIconSwapVertElement;
        "rux-icon-swap-vertical-circle": HTMLRuxIconSwapVerticalCircleElement;
        "rux-icon-switch-camera": HTMLRuxIconSwitchCameraElement;
        "rux-icon-switch-video": HTMLRuxIconSwitchVideoElement;
        "rux-icon-sync": HTMLRuxIconSyncElement;
        "rux-icon-sync-disabled": HTMLRuxIconSyncDisabledElement;
        "rux-icon-sync-problem": HTMLRuxIconSyncProblemElement;
        "rux-icon-system-update": HTMLRuxIconSystemUpdateElement;
        "rux-icon-tab": HTMLRuxIconTabElement;
        "rux-icon-tab-unselected": HTMLRuxIconTabUnselectedElement;
        "rux-icon-table-chart": HTMLRuxIconTableChartElement;
        "rux-icon-tablet": HTMLRuxIconTabletElement;
        "rux-icon-tablet-android": HTMLRuxIconTabletAndroidElement;
        "rux-icon-tablet-mac": HTMLRuxIconTabletMacElement;
        "rux-icon-tag-faces": HTMLRuxIconTagFacesElement;
        "rux-icon-tap-and-play": HTMLRuxIconTapAndPlayElement;
        "rux-icon-terrain": HTMLRuxIconTerrainElement;
        "rux-icon-text-fields": HTMLRuxIconTextFieldsElement;
        "rux-icon-text-format": HTMLRuxIconTextFormatElement;
        "rux-icon-text-rotate-up": HTMLRuxIconTextRotateUpElement;
        "rux-icon-text-rotate-vertical": HTMLRuxIconTextRotateVerticalElement;
        "rux-icon-text-rotation-none": HTMLRuxIconTextRotationNoneElement;
        "rux-icon-textsms": HTMLRuxIconTextsmsElement;
        "rux-icon-texture": HTMLRuxIconTextureElement;
        "rux-icon-theaters": HTMLRuxIconTheatersElement;
        "rux-icon-thermal": HTMLRuxIconThermalElement;
        "rux-icon-thumb-down": HTMLRuxIconThumbDownElement;
        "rux-icon-thumb-down-alt": HTMLRuxIconThumbDownAltElement;
        "rux-icon-thumb-up": HTMLRuxIconThumbUpElement;
        "rux-icon-thumb-up-alt": HTMLRuxIconThumbUpAltElement;
        "rux-icon-thumbs-up-down": HTMLRuxIconThumbsUpDownElement;
        "rux-icon-time-to-leave": HTMLRuxIconTimeToLeaveElement;
        "rux-icon-timelapse": HTMLRuxIconTimelapseElement;
        "rux-icon-timeline": HTMLRuxIconTimelineElement;
        "rux-icon-timer": HTMLRuxIconTimerElement;
        "rux-icon-timer-10": HTMLRuxIconTimer10Element;
        "rux-icon-timer-3": HTMLRuxIconTimer3Element;
        "rux-icon-timer-off": HTMLRuxIconTimerOffElement;
        "rux-icon-title": HTMLRuxIconTitleElement;
        "rux-icon-toc": HTMLRuxIconTocElement;
        "rux-icon-today": HTMLRuxIconTodayElement;
        "rux-icon-toggle-off": HTMLRuxIconToggleOffElement;
        "rux-icon-toggle-on": HTMLRuxIconToggleOnElement;
        "rux-icon-toll": HTMLRuxIconTollElement;
        "rux-icon-tonality": HTMLRuxIconTonalityElement;
        "rux-icon-touch-app": HTMLRuxIconTouchAppElement;
        "rux-icon-toys": HTMLRuxIconToysElement;
        "rux-icon-track-changes": HTMLRuxIconTrackChangesElement;
        "rux-icon-traffic": HTMLRuxIconTrafficElement;
        "rux-icon-train": HTMLRuxIconTrainElement;
        "rux-icon-tram": HTMLRuxIconTramElement;
        "rux-icon-transfer-within-a-station": HTMLRuxIconTransferWithinAStationElement;
        "rux-icon-transform": HTMLRuxIconTransformElement;
        "rux-icon-transit-enterexit": HTMLRuxIconTransitEnterexitElement;
        "rux-icon-translate": HTMLRuxIconTranslateElement;
        "rux-icon-trending-down": HTMLRuxIconTrendingDownElement;
        "rux-icon-trending-flat": HTMLRuxIconTrendingFlatElement;
        "rux-icon-trending-up": HTMLRuxIconTrendingUpElement;
        "rux-icon-trip-origin": HTMLRuxIconTripOriginElement;
        "rux-icon-tune": HTMLRuxIconTuneElement;
        "rux-icon-turned-in": HTMLRuxIconTurnedInElement;
        "rux-icon-turned-in-not": HTMLRuxIconTurnedInNotElement;
        "rux-icon-tv": HTMLRuxIconTvElement;
        "rux-icon-tv-off": HTMLRuxIconTvOffElement;
        "rux-icon-unarchive": HTMLRuxIconUnarchiveElement;
        "rux-icon-undo": HTMLRuxIconUndoElement;
        "rux-icon-unfold-less": HTMLRuxIconUnfoldLessElement;
        "rux-icon-unfold-more": HTMLRuxIconUnfoldMoreElement;
        "rux-icon-unsubscribe": HTMLRuxIconUnsubscribeElement;
        "rux-icon-update": HTMLRuxIconUpdateElement;
        "rux-icon-usb": HTMLRuxIconUsbElement;
        "rux-icon-verified-user": HTMLRuxIconVerifiedUserElement;
        "rux-icon-vertical-align-bottom": HTMLRuxIconVerticalAlignBottomElement;
        "rux-icon-vertical-align-center": HTMLRuxIconVerticalAlignCenterElement;
        "rux-icon-vertical-align-top": HTMLRuxIconVerticalAlignTopElement;
        "rux-icon-vertical-split": HTMLRuxIconVerticalSplitElement;
        "rux-icon-vibration": HTMLRuxIconVibrationElement;
        "rux-icon-video-call": HTMLRuxIconVideoCallElement;
        "rux-icon-video-label": HTMLRuxIconVideoLabelElement;
        "rux-icon-video-library": HTMLRuxIconVideoLibraryElement;
        "rux-icon-videocam": HTMLRuxIconVideocamElement;
        "rux-icon-videocam-off": HTMLRuxIconVideocamOffElement;
        "rux-icon-videogame-asset": HTMLRuxIconVideogameAssetElement;
        "rux-icon-view-agenda": HTMLRuxIconViewAgendaElement;
        "rux-icon-view-array": HTMLRuxIconViewArrayElement;
        "rux-icon-view-carousel": HTMLRuxIconViewCarouselElement;
        "rux-icon-view-column": HTMLRuxIconViewColumnElement;
        "rux-icon-view-comfy": HTMLRuxIconViewComfyElement;
        "rux-icon-view-compact": HTMLRuxIconViewCompactElement;
        "rux-icon-view-day": HTMLRuxIconViewDayElement;
        "rux-icon-view-headline": HTMLRuxIconViewHeadlineElement;
        "rux-icon-view-list": HTMLRuxIconViewListElement;
        "rux-icon-view-module": HTMLRuxIconViewModuleElement;
        "rux-icon-view-quilt": HTMLRuxIconViewQuiltElement;
        "rux-icon-view-stream": HTMLRuxIconViewStreamElement;
        "rux-icon-view-week": HTMLRuxIconViewWeekElement;
        "rux-icon-vignette": HTMLRuxIconVignetteElement;
        "rux-icon-visibility": HTMLRuxIconVisibilityElement;
        "rux-icon-visibility-off": HTMLRuxIconVisibilityOffElement;
        "rux-icon-voice-chat": HTMLRuxIconVoiceChatElement;
        "rux-icon-voice-over-off": HTMLRuxIconVoiceOverOffElement;
        "rux-icon-voicemail": HTMLRuxIconVoicemailElement;
        "rux-icon-volume-down": HTMLRuxIconVolumeDownElement;
        "rux-icon-volume-mute": HTMLRuxIconVolumeMuteElement;
        "rux-icon-volume-off": HTMLRuxIconVolumeOffElement;
        "rux-icon-volume-up": HTMLRuxIconVolumeUpElement;
        "rux-icon-vpn-key": HTMLRuxIconVpnKeyElement;
        "rux-icon-vpn-lock": HTMLRuxIconVpnLockElement;
        "rux-icon-wallpaper": HTMLRuxIconWallpaperElement;
        "rux-icon-warning": HTMLRuxIconWarningElement;
        "rux-icon-watch": HTMLRuxIconWatchElement;
        "rux-icon-watch-later": HTMLRuxIconWatchLaterElement;
        "rux-icon-waves": HTMLRuxIconWavesElement;
        "rux-icon-wb-auto": HTMLRuxIconWbAutoElement;
        "rux-icon-wb-cloudy": HTMLRuxIconWbCloudyElement;
        "rux-icon-wb-incandescent": HTMLRuxIconWbIncandescentElement;
        "rux-icon-wb-iridescent": HTMLRuxIconWbIridescentElement;
        "rux-icon-wb-sunny": HTMLRuxIconWbSunnyElement;
        "rux-icon-wc": HTMLRuxIconWcElement;
        "rux-icon-web": HTMLRuxIconWebElement;
        "rux-icon-web-asset": HTMLRuxIconWebAssetElement;
        "rux-icon-weekend": HTMLRuxIconWeekendElement;
        "rux-icon-whatshot": HTMLRuxIconWhatshotElement;
        "rux-icon-where-to-vote": HTMLRuxIconWhereToVoteElement;
        "rux-icon-widgets": HTMLRuxIconWidgetsElement;
        "rux-icon-wifi": HTMLRuxIconWifiElement;
        "rux-icon-wifi-lock": HTMLRuxIconWifiLockElement;
        "rux-icon-wifi-off": HTMLRuxIconWifiOffElement;
        "rux-icon-wifi-tethering": HTMLRuxIconWifiTetheringElement;
        "rux-icon-work": HTMLRuxIconWorkElement;
        "rux-icon-work-off": HTMLRuxIconWorkOffElement;
        "rux-icon-work-outline": HTMLRuxIconWorkOutlineElement;
        "rux-icon-wrap-text": HTMLRuxIconWrapTextElement;
        "rux-icon-youtube-searched-for": HTMLRuxIconYoutubeSearchedForElement;
        "rux-icon-zoom-in": HTMLRuxIconZoomInElement;
        "rux-icon-zoom-in-map": HTMLRuxIconZoomInMapElement;
        "rux-icon-zoom-out": HTMLRuxIconZoomOutElement;
        "rux-icon-zoom-out-map": HTMLRuxIconZoomOutMapElement;
        "rux-log": HTMLRuxLogElement;
        "rux-menu-item": HTMLRuxMenuItemElement;
        "rux-menu-item-divider": HTMLRuxMenuItemDividerElement;
        "rux-modal": HTMLRuxModalElement;
        "rux-monitoring-icon": HTMLRuxMonitoringIconElement;
        "rux-monitoring-progress-icon": HTMLRuxMonitoringProgressIconElement;
        "rux-notification": HTMLRuxNotificationElement;
        "rux-pop-up-menu": HTMLRuxPopUpMenuElement;
        "rux-progress": HTMLRuxProgressElement;
        "rux-segmented-button": HTMLRuxSegmentedButtonElement;
        "rux-status": HTMLRuxStatusElement;
        "rux-switch": HTMLRuxSwitchElement;
        "rux-tab": HTMLRuxTabElement;
        "rux-tab-panel": HTMLRuxTabPanelElement;
        "rux-tab-panels": HTMLRuxTabPanelsElement;
        "rux-table": HTMLRuxTableElement;
        "rux-table-body": HTMLRuxTableBodyElement;
        "rux-table-cell": HTMLRuxTableCellElement;
        "rux-table-header": HTMLRuxTableHeaderElement;
        "rux-table-header-cell": HTMLRuxTableHeaderCellElement;
        "rux-table-header-row": HTMLRuxTableHeaderRowElement;
        "rux-table-row": HTMLRuxTableRowElement;
        "rux-tabs": HTMLRuxTabsElement;
        "rux-tree": HTMLRuxTreeElement;
        "rux-tree-node": HTMLRuxTreeNodeElement;
    }
}
declare namespace LocalJSX {
    interface RuxButton {
        /**
          * Toggles disabled attribute on the button
         */
        "disabled"?: boolean;
        /**
          * For a [button styleguid, see the Button section in Astro UXDS Guidelines](https://astrouxds.com/components/button) Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string | null;
        /**
          * Hides slotted text from the button by setting rux-button--icon-only class
         */
        "iconOnly"?: boolean;
        /**
          * Changes button style from solid to secondary by setting rux-button--secondary class
         */
        "secondary"?: boolean;
        /**
          * Changes size of a button from standard to small or large by setting sizing classes rux-button--small rux-button--large
         */
        "size"?: 'small' | 'large';
    }
    interface RuxButtonGroup {
        /**
          * The horizontal alignment of buttons within the group
         */
        "hAlign"?: 'left' | 'center' | 'right';
    }
    interface RuxCheckbox {
        /**
          * The checkbox name
         */
        "checked"?: boolean;
        /**
          * Disables the checkbox via HTML disabled attribute. Checkbox takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * Toggles indeterminate state of a checkbox
         */
        "indeterminate"?: boolean;
        /**
          * The checkbox name
         */
        "name"?: string;
        /**
          * Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRux-change"?: (event: CustomEvent<any>) => void;
        /**
          * Sets the input as required
         */
        "required"?: boolean;
        /**
          * The checkbox name
         */
        "value"?: string;
    }
    interface RuxClassificationMarking {
        /**
          * Defines which classification marking will be displayed.
         */
        "classification"?: Classification;
        /**
          * Allows additional text labels to be added to the a marking
         */
        "label"?: string;
        /**
          * Declares the marking as a `tag` rather than the default banner style
         */
        "tag"?: boolean;
    }
    interface RuxClock {
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax) displays a timestamp labeled "AOS" next to the standard clock.
         */
        "aos"?: number;
        /**
          * Hides the day of the year.
         */
        "hideDate"?: boolean;
        /**
          * Hides the timezone in the main 24-hour clock. Timezone does not display on AOS/LOS.
         */
        "hideTimezone"?: boolean;
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), displays a timestamp labeled "LOS" next to the standard clock.
         */
        "los"?: string;
        /**
          * Applies a smaller clock style.
         */
        "small"?: boolean;
        /**
          * Accepts the [IANA timezone string format](https://www.iana.org/time-zones) such as `'America/Los_Angeles'` or any single-character designation for a [military timezones](https://en.wikipedia.org/wiki/List_of_military_time_zones) (`'A'` through `'Z'`, excluding `'J'`), both case-insensitive. If no value for timezone is provided, the clock will use `'UTC'`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone"?: string;
    }
    interface RuxDatetime {
        /**
          * The date time to be formatted
         */
        "date"?: Date | string;
        /**
          * Format options for day
         */
        "day"?: 'numeric' | '2-digit';
        /**
          * Format options for hour
         */
        "hour"?: 'numeric' | '2-digit';
        /**
          * Display date in 12 hour time.
         */
        "hour12"?: boolean;
        /**
          * The locale
         */
        "locale"?: string;
        /**
          * Format options for minute
         */
        "minute"?: 'numeric' | '2-digit';
        /**
          * Format options for month
         */
        "month"?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';
        /**
          * Format options for second
         */
        "second"?: 'numeric' | '2-digit';
        /**
          * Format options for Timezone
         */
        "timeZone"?: string;
        /**
          * Format options for Timezone name
         */
        "timeZoneName"?: 'short' | 'long';
        /**
          * Format options for year
         */
        "year"?: 'numeric' | '2-digit';
    }
    interface RuxGlobalStatusBar {
        /**
          * Sets the domain of the application to be displayed in the app-meta element
         */
        "appDomain"?: string;
        /**
          * Sets the name of the application to be displayed in the app-meta element
         */
        "appName"?: string;
        /**
          * Sets the version of the application to be displayed in the app-meta element
         */
        "appVersion"?: string;
        /**
          * Declares whether the app-state component will be shown in the app-meta slot
         */
        "includeAppState"?: boolean;
        /**
          * Declares whether a rux-icon will be shown in the left-side slot
         */
        "includeIcon"?: boolean;
        /**
          * Declares whether the username component will be shown in the app-meta slot
         */
        "includeUsername"?: boolean;
        /**
          * Sets the icon to be displayed in the default rux-icon component
         */
        "menuIcon"?: string;
    }
    interface RuxIcon {
        /**
          * The icon color
         */
        "color"?: string;
        /**
          * The icon name
         */
        "icon": string;
        /**
          * The icon label
         */
        "label"?: string;
        /**
          * The size of the icon
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large';
    }
    interface RuxIcon360 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIcon3dRotation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIcon4k {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAcUnit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccessAlarms {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccessTime {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccessibility {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccessibilityNew {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccessible {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccessibleForward {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccountBalance {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccountBalanceWallet {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccountBox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAccountCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAdb {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddAPhoto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddAlarm {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddAlert {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddBox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddCircleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddComment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddLocation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddPhotoAlternate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddShoppingCart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddToHomeScreen {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddToPhotos {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAddToQueue {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAdjust {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatFlat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatFlatAngled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatIndividualSuite {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatLegroomExtra {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatLegroomNormal {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatLegroomReduced {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatReclineExtra {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirlineSeatReclineNormal {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirplanemodeActive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirplanemodeInactive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirplay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAirportShuttle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAlarm {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAlarmAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAlarmOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAlarmOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAlbum {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAllInbox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAllInclusive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAllOut {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAlternateEmail {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAltitude {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAndroid {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAnnouncement {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAntenna {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAntennaOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAntennaReceive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAntennaTransmit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconApps {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArchive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowBack {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowBackIos {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowDownward {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowDropDown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowDropDownCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowDropUp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowForward {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowForwardIos {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowRightAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArrowUpward {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconArtTrack {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAspectRatio {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssessment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssignment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssignmentFind {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssignmentLate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssignmentReturn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssignmentReturned {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssignmentTurnedIn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssistant {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAssistantPhoto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAttachFile {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAttachMoney {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAttachment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAudiotrack {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAutorenew {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconAvTimer {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBackspace {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBackup {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBallot {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBarChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBattery20 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBattery30 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBattery50 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBattery60 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBattery80 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBattery90 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryAlert {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryCharging20 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryCharging30 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryCharging50 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryCharging60 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryCharging80 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryCharging90 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryChargingFull {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryFull {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryStd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBatteryUnknown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBeachAccess {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBeenhere {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBlock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBluetooth {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBluetoothAudio {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBluetoothConnected {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBluetoothDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBluetoothSearching {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBlurCircular {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBlurLinear {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBlurOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBlurOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBook {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBookmark {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBookmarkBorder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBookmarks {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderAll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderBottom {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderClear {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderColor {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderHorizontal {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderInner {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderOuter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderStyle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderTop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBorderVertical {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrandingWatermark {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness1 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness2 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness3 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness4 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness5 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness6 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightness7 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightnessAuto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightnessHigh {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightnessLow {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrightnessMedium {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrokenImage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBrush {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBubbleChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBugReport {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBuild {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBurstMode {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBusiness {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconBusinessCenter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCached {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCake {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCalendarToday {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCalendarViewDay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCall {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallEnd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallMade {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallMerge {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallMissed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallMissedOutgoing {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallReceived {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallSplit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCallToAction {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCamera {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCameraAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCameraEnhance {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCameraFront {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCameraRear {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCameraRoll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCancel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCancelPresentation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCardGiftcard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCardMembership {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCardTravel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCasino {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCast {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCastConnected {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCastForEducation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCategory {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCellWifi {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCenterFocusStrong {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCenterFocusWeak {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChangeHistory {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChatBubble {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChatBubbleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCheck {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCheckBox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCheckBoxOutlineBlank {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCheckCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCheckCircleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChevronLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChevronRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChildCare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChildFriendly {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconChromeReaderMode {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconClass {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconClear {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconClearAll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconClose {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconClosedCaption {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloud {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloudCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloudDone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloudDownload {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloudOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloudQueue {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCloudUpload {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCode {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCollections {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCollectionsBookmark {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconColorLens {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconColorize {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconComment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCommute {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCompare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCompareArrows {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCompassCalibration {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconComputer {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconConfirmationNumber {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconContactMail {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconContactPhone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconContactSupport {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconContacts {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconControlCamera {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconControlPoint {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconControlPointDuplicate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCopyright {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCreate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCreateNewFolder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCreditCard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCrop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCrop169 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCrop32 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCrop54 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCrop75 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropDin {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropFree {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropLandscape {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropOriginal {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropPortrait {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropRotate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconCropSquare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDashboard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDataUsage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDateRange {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDehaze {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDelete {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeleteForever {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeleteOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeleteSweep {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDepartureBoard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDescription {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDesktopAccessDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDesktopMac {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDesktopWindows {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDetails {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeveloperBoard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeveloperMode {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeviceHub {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDeviceUnknown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDevices {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDevicesOther {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDialerSip {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDialpad {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirections {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsBike {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsBoat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsBus {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsCar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsRailway {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsRun {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsSubway {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsTransit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDirectionsWalk {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDiscFull {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDns {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDomain {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDomainDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDoneAll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDoneOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDonutLarge {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDonutSmall {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDrafts {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDragHandle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDragIndicator {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDriveEta {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDuo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconDvr {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEdit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEditAttributes {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEditLocation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEject {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEmail {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEnhancedEncryption {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEqualizer {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEquipment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconError {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconErrorOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEuroSymbol {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEvStation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEvent {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEventAvailable {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEventBusy {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconEventNote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExitToApp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExpandLess {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExpandMore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExplicit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExplore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExploreOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExposure {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExposureNeg1 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExposureNeg2 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExposurePlus1 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExposurePlus2 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExposureZero {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconExtension {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFace {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFastForward {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFastRewind {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFastfood {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFavorite {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFavoriteBorder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFeaturedPlayList {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFeaturedVideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFeedback {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFiberDvr {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFiberManualRecord {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFiberNew {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFiberPin {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFiberSmartRecord {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFileCopy {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter1 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter2 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter3 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter4 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter5 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter6 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter7 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter8 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter9 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilter9Plus {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterBAndW {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterCenterFocus {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterDrama {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterFrames {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterHdr {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterList {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterNone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterTiltShift {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFilterVintage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFindInPage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFindReplace {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFingerprint {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFirstPage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFitnessCenter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlag {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlashAuto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlashOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlashOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlightLand {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlightTakeoff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlip {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlipToBack {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFlipToFront {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFolder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFolderOpen {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFolderShared {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFolderSpecial {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFontDownload {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatAlignCenter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatAlignJustify {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatAlignLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatAlignRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatBold {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatClear {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatColorFill {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatColorReset {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatColorText {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatIndentDecrease {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatIndentIncrease {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatItalic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatLineSpacing {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatListBulleted {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatListNumbered {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatListNumberedRtl {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatPaint {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatQuote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatShapes {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatSize {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatStrikethrough {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatTextdirectionLToR {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatTextdirectionRToL {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFormatUnderlined {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconForum {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconForward {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconForward10 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconForward30 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconForward5 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFreeBreakfast {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFullscreen {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFullscreenExit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconFunctions {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGTranslate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGamepad {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGames {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGavel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGesture {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGetApp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGif {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGolfCourse {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGpsFixed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGpsNotFixed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGpsOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGrade {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGradient {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGrain {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGraphicEq {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGridOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGridOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGroup {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGroupAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconGroupWork {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHdrOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHdrOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHdrStrong {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHdrWeak {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHeadset {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHeadsetMic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHealing {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHearing {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHelp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHelpOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHighQuality {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHighlight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHighlightOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHistory {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHome {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHorizontalSplit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHotTub {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHotel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHourglassEmpty {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHourglassFull {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHowToReg {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHowToVote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHttp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconHttps {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconImage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconImageAspectRatio {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconImageSearch {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconImportContacts {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconImportExport {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconImportantDevices {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInbox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconIndeterminateCheckBox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInfo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInput {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertChartOutlined {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertComment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertDriveFile {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertEmoticon {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertInvitation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertLink {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInsertPhoto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInvertColors {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconInvertColorsOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconIso {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardArrowDown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardArrowLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardArrowRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardArrowUp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardBackspace {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardCapslock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardHide {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardReturn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardTab {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKeyboardVoice {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconKitchen {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLabel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLabelImportant {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLabelOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLandscape {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLanguage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLaptop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLaptopChromebook {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLaptopMac {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLaptopWindows {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLastPage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLaunch {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLayers {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLayersClear {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLeakAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLeakRemove {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLens {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLibraryAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLibraryBooks {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLibraryMusic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLineStyle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLineWeight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLinearScale {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLink {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLinkOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLinkedCamera {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconList {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconListAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLiveHelp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLiveTv {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalActivity {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalAirport {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalAtm {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalBar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalCafe {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalConvenienceStore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalDining {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalDrink {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalGasStation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalGroceryStore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalHospital {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalHotel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalLaundryService {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalLibrary {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalMall {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalMovies {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalOffer {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalParking {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalPharmacy {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalPhone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalPlay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalPostOffice {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalPrintshop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalSee {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalShipping {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocalTaxi {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocationCity {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocationDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocationOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocationOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLocationSearching {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLockOpen {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks1 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks2 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks3 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks4 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks5 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLooks6 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLoop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLoupe {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLowPriority {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconLoyalty {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMail {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMailOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMap {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMarkunread {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMarkunreadMailbox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMaximize {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMeetingRoom {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMemory {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMenu {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMergeType {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMessage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMicNone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMicOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMinimize {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMissedVideoCall {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMission {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMms {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMobileFriendly {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMobileOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMobileScreenShare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconModeComment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMonetizationOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMoney {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMoneyOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMonochromePhotos {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMood {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMoodBad {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMoreHoriz {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMoreVert {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMotorcycle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMouse {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMoveToInbox {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMovie {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMovieCreation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMovieFilter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMultilineChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMusicNote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMusicOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMusicVideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconMyLocation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNature {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNaturePeople {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNavigateBefore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNavigateNext {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNavigation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNearMe {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNetcom {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNetworkCell {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNetworkCheck {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNetworkLocked {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNetworkWifi {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNewReleases {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNextWeek {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNfc {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNoEncryption {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNoMeetingRoom {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNoSim {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotInterested {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotListedLocation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNoteAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotes {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotificationImportant {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotifications {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotificationsActive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotificationsNone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotificationsOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconNotificationsPaused {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOfflineBolt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOfflinePin {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOndemandVideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOpacity {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOpenInBrowser {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOpenInNew {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOpenWith {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconOutlinedFlag {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPages {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPageview {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPalette {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPanTool {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPanorama {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPanoramaFishEye {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPanoramaHorizontal {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPanoramaVertical {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPanoramaWideAngle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPartyMode {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPause {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPauseCircleFilled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPauseCircleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPausePresentation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPayload {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPayment {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPeopleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermCameraMic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermContactCalendar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermDataSetting {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermDeviceInformation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermIdentity {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermMedia {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermPhoneMsg {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPermScanWifi {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPerson {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPersonAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPersonAddDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPersonOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPersonPin {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPersonPinCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPersonalVideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPets {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneAndroid {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneBluetoothSpeaker {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneCallback {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneForwarded {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneInTalk {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneIphone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneLocked {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoneMissed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonePaused {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonelink {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonelinkErase {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonelinkLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonelinkOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonelinkRing {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhonelinkSetup {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhoto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoAlbum {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoCamera {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoFilter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoLibrary {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoSizeSelectActual {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoSizeSelectLarge {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPhotoSizeSelectSmall {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPictureAsPdf {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPictureInPicture {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPictureInPictureAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPieChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPinDrop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlace {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlayArrow {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlayCircleFilled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlayCircleFilledWhite {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlayCircleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlayForWork {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlaylistAdd {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlaylistAddCheck {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlaylistPlay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPlusOne {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPoll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPool {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPortableWifiOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPortrait {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPower {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPowerInput {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPowerOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPowerSettingsNew {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPregnantWoman {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPresentToAll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPrint {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPrintDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPriorityHigh {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconProcessor {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconProcessorAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPropulsionPower {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPublic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconPublish {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconQueryBuilder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconQuestionAnswer {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconQueue {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconQueueMusic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconQueuePlayNext {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRadio {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRadioButtonChecked {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRadioButtonUnchecked {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRateReview {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReceipt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRecentActors {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRecordVoiceOver {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRedeem {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRedo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRefresh {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRemove {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRemoveCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRemoveCircleOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRemoveFromQueue {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRemoveRedEye {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRemoveShoppingCart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReorder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRepeat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRepeatOne {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReplay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReplay10 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReplay30 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReplay5 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReply {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReplyAll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReport {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReportOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconReportProblem {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRestaurant {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRestaurantMenu {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRestore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRestoreFromTrash {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRestorePage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRingVolume {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRoom {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRoomService {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRotate90DegreesCc {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRotateLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRotateRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRoundedCorner {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRouter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRowing {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRssFeed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconRvHookup {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSatellite {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSatelliteOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSatelliteReceive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSatelliteTransmit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSave {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSaveAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScanner {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScatterPlot {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSchedule {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSchool {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScreenLockLandscape {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScreenLockPortrait {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScreenLockRotation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScreenRotation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconScreenShare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSdCard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSdStorage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSearch {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSeat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSecurity {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSelectAll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSend {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSentimentDissatisfied {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSentimentSatisfied {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSentimentSatisfiedAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSentimentVeryDissatisfied {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSentimentVerySatisfied {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettings {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsApplications {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsBackupRestore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsBluetooth {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsBrightness {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsCell {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsEthernet {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsInputAntenna {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsInputComponent {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsInputComposite {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsInputHdmi {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsInputSvideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsOverscan {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsPhone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsPower {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsRemote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsSystemDaydream {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSettingsVoice {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShopTwo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShoppingBasket {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShoppingCart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShortText {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShowChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShuffle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconShutterSpeed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellular0Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellular1Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellular2Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellular3Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellular4Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularConnectedNoInternet0Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularConnectedNoInternet1Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularConnectedNoInternet2Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularConnectedNoInternet3Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularConnectedNoInternet4Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularNoSim {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularNull {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalCellularOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi0Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi1Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi1BarLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi2Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi2BarLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi3Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi3BarLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi4Bar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifi4BarLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSignalWifiOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSimCard {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSkipNext {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSkipPrevious {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSlideshow {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSlowMotionVideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSmartphone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSmokeFree {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSmokingRooms {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSms {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSmsFailed {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSnooze {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSolar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSort {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSortByAlpha {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpa {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpaceBar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpeaker {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpeakerGroup {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpeakerNotes {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpeakerNotesOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpeakerPhone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSpellcheck {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStar {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStarBorder {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStarHalf {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStarRate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStars {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStayCurrentLandscape {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStayCurrentPortrait {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStayPrimaryLandscape {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStayPrimaryPortrait {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStopScreenShare {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStorage {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStoreMallDirectory {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStraighten {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStreetview {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStrikethroughS {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconStyle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSubdirectoryArrowLeft {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSubdirectoryArrowRight {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSubject {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSubscriptions {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSubtitles {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSubway {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSupervisedUserCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSupervisorAccount {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSurroundSound {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwapCalls {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwapHoriz {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwapHorizontalCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwapVert {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwapVerticalCircle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwitchCamera {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSwitchVideo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSync {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSyncDisabled {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSyncProblem {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconSystemUpdate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTab {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTabUnselected {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTableChart {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTablet {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTabletAndroid {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTabletMac {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTagFaces {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTapAndPlay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTerrain {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTextFields {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTextFormat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTextRotateUp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTextRotateVertical {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTextRotationNone {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTextsms {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTexture {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTheaters {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconThermal {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconThumbDown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconThumbDownAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconThumbUp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconThumbUpAlt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconThumbsUpDown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimeToLeave {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimelapse {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimeline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimer {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimer10 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimer3 {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTimerOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTitle {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconToc {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconToday {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconToggleOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconToggleOn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconToll {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTonality {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTouchApp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconToys {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTrackChanges {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTraffic {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTrain {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTram {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTransferWithinAStation {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTransform {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTransitEnterexit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTranslate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTrendingDown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTrendingFlat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTrendingUp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTripOrigin {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTune {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTurnedIn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTurnedInNot {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTv {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconTvOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUnarchive {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUndo {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUnfoldLess {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUnfoldMore {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUnsubscribe {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUpdate {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconUsb {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVerifiedUser {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVerticalAlignBottom {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVerticalAlignCenter {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVerticalAlignTop {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVerticalSplit {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVibration {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVideoCall {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVideoLabel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVideoLibrary {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVideocam {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVideocamOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVideogameAsset {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewAgenda {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewArray {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewCarousel {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewColumn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewComfy {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewCompact {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewDay {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewHeadline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewList {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewModule {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewQuilt {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewStream {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconViewWeek {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVignette {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVisibility {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVisibilityOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVoiceChat {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVoiceOverOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVoicemail {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVolumeDown {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVolumeMute {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVolumeOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVolumeUp {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVpnKey {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconVpnLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWallpaper {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWarning {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWatch {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWatchLater {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWaves {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWbAuto {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWbCloudy {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWbIncandescent {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWbIridescent {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWbSunny {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWc {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWeb {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWebAsset {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWeekend {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWhatshot {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWhereToVote {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWidgets {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWifi {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWifiLock {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWifiOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWifiTethering {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWork {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWorkOff {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWorkOutline {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconWrapText {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconYoutubeSearchedFor {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconZoomIn {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconZoomInMap {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconZoomOut {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxIconZoomOutMap {
        /**
          * The fill color for the icon
         */
        "color"?: string;
        /**
          * The size of the icon
         */
        "size"?: 'extra-small' | 'small' | 'normal' | 'large';
    }
    interface RuxLog {
        /**
          * An array of objects to display as log
         */
        "data"?: LogRow[];
        /**
          * A string to filter the array to return only the children whose `message` property contains a case-insensitive substring match.
         */
        "filter"?: string;
        /**
          * Accepts [IANA timezone string format](https://www.iana.org/time-zones) such as `America/Los_Angeles`. Default timezone is `UTC`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone"?: string;
    }
    interface RuxMenuItem {
        /**
          * Disables the item
         */
        "disabled"?: boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string | undefined;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * Emitted when item is clicked. Ex `{value : 10}`
         */
        "onRux-menu-item-selected"?: (event: CustomEvent<object>) => void;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * Value returned when item is selected. If no value is given, the text content will be used.
         */
        "value"?: any;
    }
    interface RuxMenuItemDivider {
    }
    interface RuxModal {
        /**
          * Text for confirmation button
         */
        "confirmText"?: string;
        /**
          * Text for close button
         */
        "denyText"?: string;
        /**
          * Modal body message
         */
        "modalMessage": string;
        /**
          * Modal header title
         */
        "modalTitle": string;
        /**
          * Event that is fired when modal closes
         */
        "onRux-modal-closed"?: (event: CustomEvent<boolean>) => void;
        /**
          * Shows and hides modal
         */
        "open": boolean;
    }
    interface RuxMonitoringIcon {
        /**
          * Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon": string;
        /**
          * Displays a label below the icon
         */
        "label": string;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and uses `'∞'` for one trillion or higher.
         */
        "notifications"?: number;
        /**
          * Styles the icon according to the Astro Status colors. Valid options are the Astro statuses `critical`, `serious`, `caution`, `normal`, `standby`, and `off`.
         */
        "status"?: Status;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxMonitoringProgressIcon {
        /**
          * Displays a label below the icon
         */
        "label"?: string;
        /**
          * Sets the maximum value for the progress range. When progress is this number, it reads 100%. When it is halfway between min and max, it will read 50%.
         */
        "max"?: number;
        /**
          * Sets the minimum value for the progress range. When progress is this number, it reads 0%. When it is halfway between min and max, it will read 50%.
         */
        "min"?: number;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and `'∞'` for one trillion or higher.
         */
        "notifications"?: number;
        /**
          * Displays this value as a percentage of where it lies between min and max in the center of the donut graph and styles a proportional segment of the graph. Progress can be positive or negative (the later useful for countdowns). The progress value must exist within the thresholds specified in the range property below, and must be an integer. If a non-integer value is passed in, progress will default to 0. If progress ever becomes less than min or greater than max, it will be set to equal min or max respectively.
         */
        "progress"?: number;
        /**
          * Items in this Array define thresholds for changing the status style of the progress icon. For each item in the Array, the icon will be styled with the given status while the progress value is less than or equal to the Array item’s threshold and greater than the next smallest item‘s threshold. Both progress and the Array items’ threshold values can be positive or negative. If no min is specified, the component assumes the Array's first status threshold begins at 0.
         */
        "range": Array<RangeItem>;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxNotification {
        /**
          * If provided, the banner will automatically close after this amount of time. Accepts value either in milliseconds or seconds (which will be converted to milliseconds internally), between `2000` and `10000`, or `2` and `10`, respectively. Any number provided outside of the `2000`-`10000` range will be ignored in favor of the default 2000ms delay. <br>If `closeAfter` is not passed or if it is given an undefined or `null` value, the banner will stay open until the user closes it.
         */
        "closeAfter"?: number;
        /**
          * Message for the notification banner.
         */
        "message"?: string;
        /**
          * Set to true to display the Banner and begin countdown to close (if a close-after Number value is provided).
         */
        "open"?: boolean;
        /**
          * The background color. Possible values include 'standby', 'normal', 'caution', and 'critical'. See [Astro UXDS Status System](https://astrouxds.com/patterns/status-system/).
         */
        "status"?: 'standby' | 'normal' | 'caution' | 'critical';
    }
    interface RuxPopUpMenu {
        /**
          * Element to anchor the menu to. If none is given the menu will anchor to the trigger element where aria-controls === menu id
         */
        "anchorEl"?: HTMLElement;
        /**
          * Emitted when the menu is closed.
         */
        "onRux-menu-did-close"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the menu is open.
         */
        "onRux-menu-did-open"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the menu is about to close
         */
        "onRux-menu-will-close"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the menu is about to open.
         */
        "onRux-menu-will-open"?: (event: CustomEvent<void>) => void;
        /**
          * Boolean which controls when to show the menu
         */
        "open"?: boolean;
        /**
          * Optional element to trigger opening and closing of the menu. If none is supplied the element where aria-controls === menu id will be assigned
         */
        "triggerEl"?: HTMLElement;
    }
    interface RuxProgress {
        /**
          * Displays text output of progress as a percentage. Note: when using a max value other than 100 output is displated as value/max (e.g., 1450/2000)
         */
        "hideLabel"?: boolean;
        /**
          * For progress bars where progress bars have a maximum value greater or less than 100
         */
        "max"?: number;
        /**
          * Current progress value between 0 and 100 (or the max, if defined below).
         */
        "value"?: number;
    }
    interface RuxSegmentedButton {
        /**
          * Items in this Array are the individual button segments.
         */
        "data"?: SegmentedButton[];
        /**
          * Emitted when the value property has changed.
         */
        "onRux-change"?: (event: CustomEvent<any>) => void;
        /**
          * When passed in on load, this selects the first button segment with a matching label. When the selected segment changes, this property updates with the currently selected value, which reflects back to the component attribute. If no button segment label matches this string, then no segment is selected. This value takes priority over setting selected boolean property on the items in the data array.
         */
        "selected"?: string;
    }
    interface RuxStatus {
        /**
          * Sets the status symbol, valid options are critical, serious, caution, normal, standby and off
         */
        "status"?: Status;
    }
    interface RuxSwitch {
        /**
          * Checks the button via HTML `checked` attribute. Button takes on a distinct "enabled" or "selected" visual state.
         */
        "checked"?: boolean;
        /**
          * Disables the button via HTML `disabled` attribute. Button takes on a distinct visual state. Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The name of the form input element
         */
        "name"?: string;
        /**
          * Emitted when the value property has changed.
         */
        "onRux-change"?: (event: CustomEvent<SwitchChangeEvent>) => void;
    }
    interface RuxTab {
        /**
          * If present, sets a disabled state on this tab item, indicating it cannot be selected by user action.
         */
        "disabled"?: boolean;
        /**
          * If present, overrides which tab is selected on load / mount. By default, the first <rux-tab> item is selected.
         */
        "selected"?: boolean;
    }
    interface RuxTabPanel {
    }
    interface RuxTabPanels {
        /**
          * Emits a list of the Tab Panels that have been passed in
         */
        "onRux-register-panels"?: (event: CustomEvent<HTMLRuxTabPanelsElement[]>) => void;
    }
    interface RuxTable {
    }
    interface RuxTableBody {
    }
    interface RuxTableCell {
    }
    interface RuxTableHeader {
    }
    interface RuxTableHeaderCell {
    }
    interface RuxTableHeaderRow {
    }
    interface RuxTableRow {
        /**
          * Changes the background color of the row. Can be applied to multiple rows at once.
         */
        "selected"?: boolean;
    }
    interface RuxTabs {
        /**
          * If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses.
         */
        "small"?: boolean;
    }
    interface RuxTree {
    }
    interface RuxTreeNode {
        /**
          * Sets the expanded state
         */
        "expanded"?: boolean;
        /**
          * Emit when user selects a tree node
         */
        "onRux-tree-node-selected"?: (event: CustomEvent<string>) => void;
        /**
          * Sets the selected state
         */
        "selected"?: boolean;
    }
    interface IntrinsicElements {
        "rux-button": RuxButton;
        "rux-button-group": RuxButtonGroup;
        "rux-checkbox": RuxCheckbox;
        "rux-classification-marking": RuxClassificationMarking;
        "rux-clock": RuxClock;
        "rux-datetime": RuxDatetime;
        "rux-global-status-bar": RuxGlobalStatusBar;
        "rux-icon": RuxIcon;
        "rux-icon-360": RuxIcon360;
        "rux-icon-3d-rotation": RuxIcon3dRotation;
        "rux-icon-4k": RuxIcon4k;
        "rux-icon-ac-unit": RuxIconAcUnit;
        "rux-icon-access-alarms": RuxIconAccessAlarms;
        "rux-icon-access-time": RuxIconAccessTime;
        "rux-icon-accessibility": RuxIconAccessibility;
        "rux-icon-accessibility-new": RuxIconAccessibilityNew;
        "rux-icon-accessible": RuxIconAccessible;
        "rux-icon-accessible-forward": RuxIconAccessibleForward;
        "rux-icon-account-balance": RuxIconAccountBalance;
        "rux-icon-account-balance-wallet": RuxIconAccountBalanceWallet;
        "rux-icon-account-box": RuxIconAccountBox;
        "rux-icon-account-circle": RuxIconAccountCircle;
        "rux-icon-adb": RuxIconAdb;
        "rux-icon-add": RuxIconAdd;
        "rux-icon-add-a-photo": RuxIconAddAPhoto;
        "rux-icon-add-alarm": RuxIconAddAlarm;
        "rux-icon-add-alert": RuxIconAddAlert;
        "rux-icon-add-box": RuxIconAddBox;
        "rux-icon-add-circle": RuxIconAddCircle;
        "rux-icon-add-circle-outline": RuxIconAddCircleOutline;
        "rux-icon-add-comment": RuxIconAddComment;
        "rux-icon-add-location": RuxIconAddLocation;
        "rux-icon-add-photo-alternate": RuxIconAddPhotoAlternate;
        "rux-icon-add-shopping-cart": RuxIconAddShoppingCart;
        "rux-icon-add-to-home-screen": RuxIconAddToHomeScreen;
        "rux-icon-add-to-photos": RuxIconAddToPhotos;
        "rux-icon-add-to-queue": RuxIconAddToQueue;
        "rux-icon-adjust": RuxIconAdjust;
        "rux-icon-airline-seat-flat": RuxIconAirlineSeatFlat;
        "rux-icon-airline-seat-flat-angled": RuxIconAirlineSeatFlatAngled;
        "rux-icon-airline-seat-individual-suite": RuxIconAirlineSeatIndividualSuite;
        "rux-icon-airline-seat-legroom-extra": RuxIconAirlineSeatLegroomExtra;
        "rux-icon-airline-seat-legroom-normal": RuxIconAirlineSeatLegroomNormal;
        "rux-icon-airline-seat-legroom-reduced": RuxIconAirlineSeatLegroomReduced;
        "rux-icon-airline-seat-recline-extra": RuxIconAirlineSeatReclineExtra;
        "rux-icon-airline-seat-recline-normal": RuxIconAirlineSeatReclineNormal;
        "rux-icon-airplanemode-active": RuxIconAirplanemodeActive;
        "rux-icon-airplanemode-inactive": RuxIconAirplanemodeInactive;
        "rux-icon-airplay": RuxIconAirplay;
        "rux-icon-airport-shuttle": RuxIconAirportShuttle;
        "rux-icon-alarm": RuxIconAlarm;
        "rux-icon-alarm-add": RuxIconAlarmAdd;
        "rux-icon-alarm-off": RuxIconAlarmOff;
        "rux-icon-alarm-on": RuxIconAlarmOn;
        "rux-icon-album": RuxIconAlbum;
        "rux-icon-all-inbox": RuxIconAllInbox;
        "rux-icon-all-inclusive": RuxIconAllInclusive;
        "rux-icon-all-out": RuxIconAllOut;
        "rux-icon-alternate-email": RuxIconAlternateEmail;
        "rux-icon-altitude": RuxIconAltitude;
        "rux-icon-android": RuxIconAndroid;
        "rux-icon-announcement": RuxIconAnnouncement;
        "rux-icon-antenna": RuxIconAntenna;
        "rux-icon-antenna-off": RuxIconAntennaOff;
        "rux-icon-antenna-receive": RuxIconAntennaReceive;
        "rux-icon-antenna-transmit": RuxIconAntennaTransmit;
        "rux-icon-apps": RuxIconApps;
        "rux-icon-archive": RuxIconArchive;
        "rux-icon-arrow-back": RuxIconArrowBack;
        "rux-icon-arrow-back-ios": RuxIconArrowBackIos;
        "rux-icon-arrow-downward": RuxIconArrowDownward;
        "rux-icon-arrow-drop-down": RuxIconArrowDropDown;
        "rux-icon-arrow-drop-down-circle": RuxIconArrowDropDownCircle;
        "rux-icon-arrow-drop-up": RuxIconArrowDropUp;
        "rux-icon-arrow-forward": RuxIconArrowForward;
        "rux-icon-arrow-forward-ios": RuxIconArrowForwardIos;
        "rux-icon-arrow-left": RuxIconArrowLeft;
        "rux-icon-arrow-right": RuxIconArrowRight;
        "rux-icon-arrow-right-alt": RuxIconArrowRightAlt;
        "rux-icon-arrow-upward": RuxIconArrowUpward;
        "rux-icon-art-track": RuxIconArtTrack;
        "rux-icon-aspect-ratio": RuxIconAspectRatio;
        "rux-icon-assessment": RuxIconAssessment;
        "rux-icon-assignment": RuxIconAssignment;
        "rux-icon-assignment-find": RuxIconAssignmentFind;
        "rux-icon-assignment-late": RuxIconAssignmentLate;
        "rux-icon-assignment-return": RuxIconAssignmentReturn;
        "rux-icon-assignment-returned": RuxIconAssignmentReturned;
        "rux-icon-assignment-turned-in": RuxIconAssignmentTurnedIn;
        "rux-icon-assistant": RuxIconAssistant;
        "rux-icon-assistant-photo": RuxIconAssistantPhoto;
        "rux-icon-attach-file": RuxIconAttachFile;
        "rux-icon-attach-money": RuxIconAttachMoney;
        "rux-icon-attachment": RuxIconAttachment;
        "rux-icon-audiotrack": RuxIconAudiotrack;
        "rux-icon-autorenew": RuxIconAutorenew;
        "rux-icon-av-timer": RuxIconAvTimer;
        "rux-icon-backspace": RuxIconBackspace;
        "rux-icon-backup": RuxIconBackup;
        "rux-icon-ballot": RuxIconBallot;
        "rux-icon-bar-chart": RuxIconBarChart;
        "rux-icon-battery-20": RuxIconBattery20;
        "rux-icon-battery-30": RuxIconBattery30;
        "rux-icon-battery-50": RuxIconBattery50;
        "rux-icon-battery-60": RuxIconBattery60;
        "rux-icon-battery-80": RuxIconBattery80;
        "rux-icon-battery-90": RuxIconBattery90;
        "rux-icon-battery-alert": RuxIconBatteryAlert;
        "rux-icon-battery-charging-20": RuxIconBatteryCharging20;
        "rux-icon-battery-charging-30": RuxIconBatteryCharging30;
        "rux-icon-battery-charging-50": RuxIconBatteryCharging50;
        "rux-icon-battery-charging-60": RuxIconBatteryCharging60;
        "rux-icon-battery-charging-80": RuxIconBatteryCharging80;
        "rux-icon-battery-charging-90": RuxIconBatteryCharging90;
        "rux-icon-battery-charging-full": RuxIconBatteryChargingFull;
        "rux-icon-battery-full": RuxIconBatteryFull;
        "rux-icon-battery-std": RuxIconBatteryStd;
        "rux-icon-battery-unknown": RuxIconBatteryUnknown;
        "rux-icon-beach-access": RuxIconBeachAccess;
        "rux-icon-beenhere": RuxIconBeenhere;
        "rux-icon-block": RuxIconBlock;
        "rux-icon-bluetooth": RuxIconBluetooth;
        "rux-icon-bluetooth-audio": RuxIconBluetoothAudio;
        "rux-icon-bluetooth-connected": RuxIconBluetoothConnected;
        "rux-icon-bluetooth-disabled": RuxIconBluetoothDisabled;
        "rux-icon-bluetooth-searching": RuxIconBluetoothSearching;
        "rux-icon-blur-circular": RuxIconBlurCircular;
        "rux-icon-blur-linear": RuxIconBlurLinear;
        "rux-icon-blur-off": RuxIconBlurOff;
        "rux-icon-blur-on": RuxIconBlurOn;
        "rux-icon-book": RuxIconBook;
        "rux-icon-bookmark": RuxIconBookmark;
        "rux-icon-bookmark-border": RuxIconBookmarkBorder;
        "rux-icon-bookmarks": RuxIconBookmarks;
        "rux-icon-border-all": RuxIconBorderAll;
        "rux-icon-border-bottom": RuxIconBorderBottom;
        "rux-icon-border-clear": RuxIconBorderClear;
        "rux-icon-border-color": RuxIconBorderColor;
        "rux-icon-border-horizontal": RuxIconBorderHorizontal;
        "rux-icon-border-inner": RuxIconBorderInner;
        "rux-icon-border-left": RuxIconBorderLeft;
        "rux-icon-border-outer": RuxIconBorderOuter;
        "rux-icon-border-right": RuxIconBorderRight;
        "rux-icon-border-style": RuxIconBorderStyle;
        "rux-icon-border-top": RuxIconBorderTop;
        "rux-icon-border-vertical": RuxIconBorderVertical;
        "rux-icon-branding-watermark": RuxIconBrandingWatermark;
        "rux-icon-brightness-1": RuxIconBrightness1;
        "rux-icon-brightness-2": RuxIconBrightness2;
        "rux-icon-brightness-3": RuxIconBrightness3;
        "rux-icon-brightness-4": RuxIconBrightness4;
        "rux-icon-brightness-5": RuxIconBrightness5;
        "rux-icon-brightness-6": RuxIconBrightness6;
        "rux-icon-brightness-7": RuxIconBrightness7;
        "rux-icon-brightness-auto": RuxIconBrightnessAuto;
        "rux-icon-brightness-high": RuxIconBrightnessHigh;
        "rux-icon-brightness-low": RuxIconBrightnessLow;
        "rux-icon-brightness-medium": RuxIconBrightnessMedium;
        "rux-icon-broken-image": RuxIconBrokenImage;
        "rux-icon-brush": RuxIconBrush;
        "rux-icon-bubble-chart": RuxIconBubbleChart;
        "rux-icon-bug-report": RuxIconBugReport;
        "rux-icon-build": RuxIconBuild;
        "rux-icon-burst-mode": RuxIconBurstMode;
        "rux-icon-business": RuxIconBusiness;
        "rux-icon-business-center": RuxIconBusinessCenter;
        "rux-icon-cached": RuxIconCached;
        "rux-icon-cake": RuxIconCake;
        "rux-icon-calendar-today": RuxIconCalendarToday;
        "rux-icon-calendar-view-day": RuxIconCalendarViewDay;
        "rux-icon-call": RuxIconCall;
        "rux-icon-call-end": RuxIconCallEnd;
        "rux-icon-call-made": RuxIconCallMade;
        "rux-icon-call-merge": RuxIconCallMerge;
        "rux-icon-call-missed": RuxIconCallMissed;
        "rux-icon-call-missed-outgoing": RuxIconCallMissedOutgoing;
        "rux-icon-call-received": RuxIconCallReceived;
        "rux-icon-call-split": RuxIconCallSplit;
        "rux-icon-call-to-action": RuxIconCallToAction;
        "rux-icon-camera": RuxIconCamera;
        "rux-icon-camera-alt": RuxIconCameraAlt;
        "rux-icon-camera-enhance": RuxIconCameraEnhance;
        "rux-icon-camera-front": RuxIconCameraFront;
        "rux-icon-camera-rear": RuxIconCameraRear;
        "rux-icon-camera-roll": RuxIconCameraRoll;
        "rux-icon-cancel": RuxIconCancel;
        "rux-icon-cancel-presentation": RuxIconCancelPresentation;
        "rux-icon-card-giftcard": RuxIconCardGiftcard;
        "rux-icon-card-membership": RuxIconCardMembership;
        "rux-icon-card-travel": RuxIconCardTravel;
        "rux-icon-casino": RuxIconCasino;
        "rux-icon-cast": RuxIconCast;
        "rux-icon-cast-connected": RuxIconCastConnected;
        "rux-icon-cast-for-education": RuxIconCastForEducation;
        "rux-icon-category": RuxIconCategory;
        "rux-icon-cell-wifi": RuxIconCellWifi;
        "rux-icon-center-focus-strong": RuxIconCenterFocusStrong;
        "rux-icon-center-focus-weak": RuxIconCenterFocusWeak;
        "rux-icon-change-history": RuxIconChangeHistory;
        "rux-icon-chat": RuxIconChat;
        "rux-icon-chat-bubble": RuxIconChatBubble;
        "rux-icon-chat-bubble-outline": RuxIconChatBubbleOutline;
        "rux-icon-check": RuxIconCheck;
        "rux-icon-check-box": RuxIconCheckBox;
        "rux-icon-check-box-outline-blank": RuxIconCheckBoxOutlineBlank;
        "rux-icon-check-circle": RuxIconCheckCircle;
        "rux-icon-check-circle-outline": RuxIconCheckCircleOutline;
        "rux-icon-chevron-left": RuxIconChevronLeft;
        "rux-icon-chevron-right": RuxIconChevronRight;
        "rux-icon-child-care": RuxIconChildCare;
        "rux-icon-child-friendly": RuxIconChildFriendly;
        "rux-icon-chrome-reader-mode": RuxIconChromeReaderMode;
        "rux-icon-class": RuxIconClass;
        "rux-icon-clear": RuxIconClear;
        "rux-icon-clear-all": RuxIconClearAll;
        "rux-icon-close": RuxIconClose;
        "rux-icon-closed-caption": RuxIconClosedCaption;
        "rux-icon-cloud": RuxIconCloud;
        "rux-icon-cloud-circle": RuxIconCloudCircle;
        "rux-icon-cloud-done": RuxIconCloudDone;
        "rux-icon-cloud-download": RuxIconCloudDownload;
        "rux-icon-cloud-off": RuxIconCloudOff;
        "rux-icon-cloud-queue": RuxIconCloudQueue;
        "rux-icon-cloud-upload": RuxIconCloudUpload;
        "rux-icon-code": RuxIconCode;
        "rux-icon-collections": RuxIconCollections;
        "rux-icon-collections-bookmark": RuxIconCollectionsBookmark;
        "rux-icon-color-lens": RuxIconColorLens;
        "rux-icon-colorize": RuxIconColorize;
        "rux-icon-comment": RuxIconComment;
        "rux-icon-commute": RuxIconCommute;
        "rux-icon-compare": RuxIconCompare;
        "rux-icon-compare-arrows": RuxIconCompareArrows;
        "rux-icon-compass-calibration": RuxIconCompassCalibration;
        "rux-icon-computer": RuxIconComputer;
        "rux-icon-confirmation-number": RuxIconConfirmationNumber;
        "rux-icon-contact-mail": RuxIconContactMail;
        "rux-icon-contact-phone": RuxIconContactPhone;
        "rux-icon-contact-support": RuxIconContactSupport;
        "rux-icon-contacts": RuxIconContacts;
        "rux-icon-control-camera": RuxIconControlCamera;
        "rux-icon-control-point": RuxIconControlPoint;
        "rux-icon-control-point-duplicate": RuxIconControlPointDuplicate;
        "rux-icon-copyright": RuxIconCopyright;
        "rux-icon-create": RuxIconCreate;
        "rux-icon-create-new-folder": RuxIconCreateNewFolder;
        "rux-icon-credit-card": RuxIconCreditCard;
        "rux-icon-crop": RuxIconCrop;
        "rux-icon-crop-16-9": RuxIconCrop169;
        "rux-icon-crop-3-2": RuxIconCrop32;
        "rux-icon-crop-5-4": RuxIconCrop54;
        "rux-icon-crop-7-5": RuxIconCrop75;
        "rux-icon-crop-din": RuxIconCropDin;
        "rux-icon-crop-free": RuxIconCropFree;
        "rux-icon-crop-landscape": RuxIconCropLandscape;
        "rux-icon-crop-original": RuxIconCropOriginal;
        "rux-icon-crop-portrait": RuxIconCropPortrait;
        "rux-icon-crop-rotate": RuxIconCropRotate;
        "rux-icon-crop-square": RuxIconCropSquare;
        "rux-icon-dashboard": RuxIconDashboard;
        "rux-icon-data-usage": RuxIconDataUsage;
        "rux-icon-date-range": RuxIconDateRange;
        "rux-icon-dehaze": RuxIconDehaze;
        "rux-icon-delete": RuxIconDelete;
        "rux-icon-delete-forever": RuxIconDeleteForever;
        "rux-icon-delete-outline": RuxIconDeleteOutline;
        "rux-icon-delete-sweep": RuxIconDeleteSweep;
        "rux-icon-departure-board": RuxIconDepartureBoard;
        "rux-icon-description": RuxIconDescription;
        "rux-icon-desktop-access-disabled": RuxIconDesktopAccessDisabled;
        "rux-icon-desktop-mac": RuxIconDesktopMac;
        "rux-icon-desktop-windows": RuxIconDesktopWindows;
        "rux-icon-details": RuxIconDetails;
        "rux-icon-developer-board": RuxIconDeveloperBoard;
        "rux-icon-developer-mode": RuxIconDeveloperMode;
        "rux-icon-device-hub": RuxIconDeviceHub;
        "rux-icon-device-unknown": RuxIconDeviceUnknown;
        "rux-icon-devices": RuxIconDevices;
        "rux-icon-devices-other": RuxIconDevicesOther;
        "rux-icon-dialer-sip": RuxIconDialerSip;
        "rux-icon-dialpad": RuxIconDialpad;
        "rux-icon-directions": RuxIconDirections;
        "rux-icon-directions-bike": RuxIconDirectionsBike;
        "rux-icon-directions-boat": RuxIconDirectionsBoat;
        "rux-icon-directions-bus": RuxIconDirectionsBus;
        "rux-icon-directions-car": RuxIconDirectionsCar;
        "rux-icon-directions-railway": RuxIconDirectionsRailway;
        "rux-icon-directions-run": RuxIconDirectionsRun;
        "rux-icon-directions-subway": RuxIconDirectionsSubway;
        "rux-icon-directions-transit": RuxIconDirectionsTransit;
        "rux-icon-directions-walk": RuxIconDirectionsWalk;
        "rux-icon-disc-full": RuxIconDiscFull;
        "rux-icon-dns": RuxIconDns;
        "rux-icon-dock": RuxIconDock;
        "rux-icon-domain": RuxIconDomain;
        "rux-icon-domain-disabled": RuxIconDomainDisabled;
        "rux-icon-done": RuxIconDone;
        "rux-icon-done-all": RuxIconDoneAll;
        "rux-icon-done-outline": RuxIconDoneOutline;
        "rux-icon-donut-large": RuxIconDonutLarge;
        "rux-icon-donut-small": RuxIconDonutSmall;
        "rux-icon-drafts": RuxIconDrafts;
        "rux-icon-drag-handle": RuxIconDragHandle;
        "rux-icon-drag-indicator": RuxIconDragIndicator;
        "rux-icon-drive-eta": RuxIconDriveEta;
        "rux-icon-duo": RuxIconDuo;
        "rux-icon-dvr": RuxIconDvr;
        "rux-icon-edit": RuxIconEdit;
        "rux-icon-edit-attributes": RuxIconEditAttributes;
        "rux-icon-edit-location": RuxIconEditLocation;
        "rux-icon-eject": RuxIconEject;
        "rux-icon-email": RuxIconEmail;
        "rux-icon-enhanced-encryption": RuxIconEnhancedEncryption;
        "rux-icon-equalizer": RuxIconEqualizer;
        "rux-icon-equipment": RuxIconEquipment;
        "rux-icon-error": RuxIconError;
        "rux-icon-error-outline": RuxIconErrorOutline;
        "rux-icon-euro-symbol": RuxIconEuroSymbol;
        "rux-icon-ev-station": RuxIconEvStation;
        "rux-icon-event": RuxIconEvent;
        "rux-icon-event-available": RuxIconEventAvailable;
        "rux-icon-event-busy": RuxIconEventBusy;
        "rux-icon-event-note": RuxIconEventNote;
        "rux-icon-exit-to-app": RuxIconExitToApp;
        "rux-icon-expand-less": RuxIconExpandLess;
        "rux-icon-expand-more": RuxIconExpandMore;
        "rux-icon-explicit": RuxIconExplicit;
        "rux-icon-explore": RuxIconExplore;
        "rux-icon-explore-off": RuxIconExploreOff;
        "rux-icon-exposure": RuxIconExposure;
        "rux-icon-exposure-neg-1": RuxIconExposureNeg1;
        "rux-icon-exposure-neg-2": RuxIconExposureNeg2;
        "rux-icon-exposure-plus-1": RuxIconExposurePlus1;
        "rux-icon-exposure-plus-2": RuxIconExposurePlus2;
        "rux-icon-exposure-zero": RuxIconExposureZero;
        "rux-icon-extension": RuxIconExtension;
        "rux-icon-face": RuxIconFace;
        "rux-icon-fast-forward": RuxIconFastForward;
        "rux-icon-fast-rewind": RuxIconFastRewind;
        "rux-icon-fastfood": RuxIconFastfood;
        "rux-icon-favorite": RuxIconFavorite;
        "rux-icon-favorite-border": RuxIconFavoriteBorder;
        "rux-icon-featured-play-list": RuxIconFeaturedPlayList;
        "rux-icon-featured-video": RuxIconFeaturedVideo;
        "rux-icon-feedback": RuxIconFeedback;
        "rux-icon-fiber-dvr": RuxIconFiberDvr;
        "rux-icon-fiber-manual-record": RuxIconFiberManualRecord;
        "rux-icon-fiber-new": RuxIconFiberNew;
        "rux-icon-fiber-pin": RuxIconFiberPin;
        "rux-icon-fiber-smart-record": RuxIconFiberSmartRecord;
        "rux-icon-file-copy": RuxIconFileCopy;
        "rux-icon-filter": RuxIconFilter;
        "rux-icon-filter-1": RuxIconFilter1;
        "rux-icon-filter-2": RuxIconFilter2;
        "rux-icon-filter-3": RuxIconFilter3;
        "rux-icon-filter-4": RuxIconFilter4;
        "rux-icon-filter-5": RuxIconFilter5;
        "rux-icon-filter-6": RuxIconFilter6;
        "rux-icon-filter-7": RuxIconFilter7;
        "rux-icon-filter-8": RuxIconFilter8;
        "rux-icon-filter-9": RuxIconFilter9;
        "rux-icon-filter-9-plus": RuxIconFilter9Plus;
        "rux-icon-filter-b-and-w": RuxIconFilterBAndW;
        "rux-icon-filter-center-focus": RuxIconFilterCenterFocus;
        "rux-icon-filter-drama": RuxIconFilterDrama;
        "rux-icon-filter-frames": RuxIconFilterFrames;
        "rux-icon-filter-hdr": RuxIconFilterHdr;
        "rux-icon-filter-list": RuxIconFilterList;
        "rux-icon-filter-none": RuxIconFilterNone;
        "rux-icon-filter-tilt-shift": RuxIconFilterTiltShift;
        "rux-icon-filter-vintage": RuxIconFilterVintage;
        "rux-icon-find-in-page": RuxIconFindInPage;
        "rux-icon-find-replace": RuxIconFindReplace;
        "rux-icon-fingerprint": RuxIconFingerprint;
        "rux-icon-first-page": RuxIconFirstPage;
        "rux-icon-fitness-center": RuxIconFitnessCenter;
        "rux-icon-flag": RuxIconFlag;
        "rux-icon-flare": RuxIconFlare;
        "rux-icon-flash-auto": RuxIconFlashAuto;
        "rux-icon-flash-off": RuxIconFlashOff;
        "rux-icon-flash-on": RuxIconFlashOn;
        "rux-icon-flight": RuxIconFlight;
        "rux-icon-flight-land": RuxIconFlightLand;
        "rux-icon-flight-takeoff": RuxIconFlightTakeoff;
        "rux-icon-flip": RuxIconFlip;
        "rux-icon-flip-to-back": RuxIconFlipToBack;
        "rux-icon-flip-to-front": RuxIconFlipToFront;
        "rux-icon-folder": RuxIconFolder;
        "rux-icon-folder-open": RuxIconFolderOpen;
        "rux-icon-folder-shared": RuxIconFolderShared;
        "rux-icon-folder-special": RuxIconFolderSpecial;
        "rux-icon-font-download": RuxIconFontDownload;
        "rux-icon-format-align-center": RuxIconFormatAlignCenter;
        "rux-icon-format-align-justify": RuxIconFormatAlignJustify;
        "rux-icon-format-align-left": RuxIconFormatAlignLeft;
        "rux-icon-format-align-right": RuxIconFormatAlignRight;
        "rux-icon-format-bold": RuxIconFormatBold;
        "rux-icon-format-clear": RuxIconFormatClear;
        "rux-icon-format-color-fill": RuxIconFormatColorFill;
        "rux-icon-format-color-reset": RuxIconFormatColorReset;
        "rux-icon-format-color-text": RuxIconFormatColorText;
        "rux-icon-format-indent-decrease": RuxIconFormatIndentDecrease;
        "rux-icon-format-indent-increase": RuxIconFormatIndentIncrease;
        "rux-icon-format-italic": RuxIconFormatItalic;
        "rux-icon-format-line-spacing": RuxIconFormatLineSpacing;
        "rux-icon-format-list-bulleted": RuxIconFormatListBulleted;
        "rux-icon-format-list-numbered": RuxIconFormatListNumbered;
        "rux-icon-format-list-numbered-rtl": RuxIconFormatListNumberedRtl;
        "rux-icon-format-paint": RuxIconFormatPaint;
        "rux-icon-format-quote": RuxIconFormatQuote;
        "rux-icon-format-shapes": RuxIconFormatShapes;
        "rux-icon-format-size": RuxIconFormatSize;
        "rux-icon-format-strikethrough": RuxIconFormatStrikethrough;
        "rux-icon-format-textdirection-l-to-r": RuxIconFormatTextdirectionLToR;
        "rux-icon-format-textdirection-r-to-l": RuxIconFormatTextdirectionRToL;
        "rux-icon-format-underlined": RuxIconFormatUnderlined;
        "rux-icon-forum": RuxIconForum;
        "rux-icon-forward": RuxIconForward;
        "rux-icon-forward-10": RuxIconForward10;
        "rux-icon-forward-30": RuxIconForward30;
        "rux-icon-forward-5": RuxIconForward5;
        "rux-icon-free-breakfast": RuxIconFreeBreakfast;
        "rux-icon-fullscreen": RuxIconFullscreen;
        "rux-icon-fullscreen-exit": RuxIconFullscreenExit;
        "rux-icon-functions": RuxIconFunctions;
        "rux-icon-g-translate": RuxIconGTranslate;
        "rux-icon-gamepad": RuxIconGamepad;
        "rux-icon-games": RuxIconGames;
        "rux-icon-gavel": RuxIconGavel;
        "rux-icon-gesture": RuxIconGesture;
        "rux-icon-get-app": RuxIconGetApp;
        "rux-icon-gif": RuxIconGif;
        "rux-icon-golf-course": RuxIconGolfCourse;
        "rux-icon-gps-fixed": RuxIconGpsFixed;
        "rux-icon-gps-not-fixed": RuxIconGpsNotFixed;
        "rux-icon-gps-off": RuxIconGpsOff;
        "rux-icon-grade": RuxIconGrade;
        "rux-icon-gradient": RuxIconGradient;
        "rux-icon-grain": RuxIconGrain;
        "rux-icon-graphic-eq": RuxIconGraphicEq;
        "rux-icon-grid-off": RuxIconGridOff;
        "rux-icon-grid-on": RuxIconGridOn;
        "rux-icon-group": RuxIconGroup;
        "rux-icon-group-add": RuxIconGroupAdd;
        "rux-icon-group-work": RuxIconGroupWork;
        "rux-icon-hd": RuxIconHd;
        "rux-icon-hdr-off": RuxIconHdrOff;
        "rux-icon-hdr-on": RuxIconHdrOn;
        "rux-icon-hdr-strong": RuxIconHdrStrong;
        "rux-icon-hdr-weak": RuxIconHdrWeak;
        "rux-icon-headset": RuxIconHeadset;
        "rux-icon-headset-mic": RuxIconHeadsetMic;
        "rux-icon-healing": RuxIconHealing;
        "rux-icon-hearing": RuxIconHearing;
        "rux-icon-help": RuxIconHelp;
        "rux-icon-help-outline": RuxIconHelpOutline;
        "rux-icon-high-quality": RuxIconHighQuality;
        "rux-icon-highlight": RuxIconHighlight;
        "rux-icon-highlight-off": RuxIconHighlightOff;
        "rux-icon-history": RuxIconHistory;
        "rux-icon-home": RuxIconHome;
        "rux-icon-horizontal-split": RuxIconHorizontalSplit;
        "rux-icon-hot-tub": RuxIconHotTub;
        "rux-icon-hotel": RuxIconHotel;
        "rux-icon-hourglass-empty": RuxIconHourglassEmpty;
        "rux-icon-hourglass-full": RuxIconHourglassFull;
        "rux-icon-how-to-reg": RuxIconHowToReg;
        "rux-icon-how-to-vote": RuxIconHowToVote;
        "rux-icon-http": RuxIconHttp;
        "rux-icon-https": RuxIconHttps;
        "rux-icon-image": RuxIconImage;
        "rux-icon-image-aspect-ratio": RuxIconImageAspectRatio;
        "rux-icon-image-search": RuxIconImageSearch;
        "rux-icon-import-contacts": RuxIconImportContacts;
        "rux-icon-import-export": RuxIconImportExport;
        "rux-icon-important-devices": RuxIconImportantDevices;
        "rux-icon-inbox": RuxIconInbox;
        "rux-icon-indeterminate-check-box": RuxIconIndeterminateCheckBox;
        "rux-icon-info": RuxIconInfo;
        "rux-icon-input": RuxIconInput;
        "rux-icon-insert-chart": RuxIconInsertChart;
        "rux-icon-insert-chart-outlined": RuxIconInsertChartOutlined;
        "rux-icon-insert-comment": RuxIconInsertComment;
        "rux-icon-insert-drive-file": RuxIconInsertDriveFile;
        "rux-icon-insert-emoticon": RuxIconInsertEmoticon;
        "rux-icon-insert-invitation": RuxIconInsertInvitation;
        "rux-icon-insert-link": RuxIconInsertLink;
        "rux-icon-insert-photo": RuxIconInsertPhoto;
        "rux-icon-invert-colors": RuxIconInvertColors;
        "rux-icon-invert-colors-off": RuxIconInvertColorsOff;
        "rux-icon-iso": RuxIconIso;
        "rux-icon-keyboard": RuxIconKeyboard;
        "rux-icon-keyboard-arrow-down": RuxIconKeyboardArrowDown;
        "rux-icon-keyboard-arrow-left": RuxIconKeyboardArrowLeft;
        "rux-icon-keyboard-arrow-right": RuxIconKeyboardArrowRight;
        "rux-icon-keyboard-arrow-up": RuxIconKeyboardArrowUp;
        "rux-icon-keyboard-backspace": RuxIconKeyboardBackspace;
        "rux-icon-keyboard-capslock": RuxIconKeyboardCapslock;
        "rux-icon-keyboard-hide": RuxIconKeyboardHide;
        "rux-icon-keyboard-return": RuxIconKeyboardReturn;
        "rux-icon-keyboard-tab": RuxIconKeyboardTab;
        "rux-icon-keyboard-voice": RuxIconKeyboardVoice;
        "rux-icon-kitchen": RuxIconKitchen;
        "rux-icon-label": RuxIconLabel;
        "rux-icon-label-important": RuxIconLabelImportant;
        "rux-icon-label-off": RuxIconLabelOff;
        "rux-icon-landscape": RuxIconLandscape;
        "rux-icon-language": RuxIconLanguage;
        "rux-icon-laptop": RuxIconLaptop;
        "rux-icon-laptop-chromebook": RuxIconLaptopChromebook;
        "rux-icon-laptop-mac": RuxIconLaptopMac;
        "rux-icon-laptop-windows": RuxIconLaptopWindows;
        "rux-icon-last-page": RuxIconLastPage;
        "rux-icon-launch": RuxIconLaunch;
        "rux-icon-layers": RuxIconLayers;
        "rux-icon-layers-clear": RuxIconLayersClear;
        "rux-icon-leak-add": RuxIconLeakAdd;
        "rux-icon-leak-remove": RuxIconLeakRemove;
        "rux-icon-lens": RuxIconLens;
        "rux-icon-library-add": RuxIconLibraryAdd;
        "rux-icon-library-books": RuxIconLibraryBooks;
        "rux-icon-library-music": RuxIconLibraryMusic;
        "rux-icon-line-style": RuxIconLineStyle;
        "rux-icon-line-weight": RuxIconLineWeight;
        "rux-icon-linear-scale": RuxIconLinearScale;
        "rux-icon-link": RuxIconLink;
        "rux-icon-link-off": RuxIconLinkOff;
        "rux-icon-linked-camera": RuxIconLinkedCamera;
        "rux-icon-list": RuxIconList;
        "rux-icon-list-alt": RuxIconListAlt;
        "rux-icon-live-help": RuxIconLiveHelp;
        "rux-icon-live-tv": RuxIconLiveTv;
        "rux-icon-local-activity": RuxIconLocalActivity;
        "rux-icon-local-airport": RuxIconLocalAirport;
        "rux-icon-local-atm": RuxIconLocalAtm;
        "rux-icon-local-bar": RuxIconLocalBar;
        "rux-icon-local-cafe": RuxIconLocalCafe;
        "rux-icon-local-convenience-store": RuxIconLocalConvenienceStore;
        "rux-icon-local-dining": RuxIconLocalDining;
        "rux-icon-local-drink": RuxIconLocalDrink;
        "rux-icon-local-gas-station": RuxIconLocalGasStation;
        "rux-icon-local-grocery-store": RuxIconLocalGroceryStore;
        "rux-icon-local-hospital": RuxIconLocalHospital;
        "rux-icon-local-hotel": RuxIconLocalHotel;
        "rux-icon-local-laundry-service": RuxIconLocalLaundryService;
        "rux-icon-local-library": RuxIconLocalLibrary;
        "rux-icon-local-mall": RuxIconLocalMall;
        "rux-icon-local-movies": RuxIconLocalMovies;
        "rux-icon-local-offer": RuxIconLocalOffer;
        "rux-icon-local-parking": RuxIconLocalParking;
        "rux-icon-local-pharmacy": RuxIconLocalPharmacy;
        "rux-icon-local-phone": RuxIconLocalPhone;
        "rux-icon-local-play": RuxIconLocalPlay;
        "rux-icon-local-post-office": RuxIconLocalPostOffice;
        "rux-icon-local-printshop": RuxIconLocalPrintshop;
        "rux-icon-local-see": RuxIconLocalSee;
        "rux-icon-local-shipping": RuxIconLocalShipping;
        "rux-icon-local-taxi": RuxIconLocalTaxi;
        "rux-icon-location-city": RuxIconLocationCity;
        "rux-icon-location-disabled": RuxIconLocationDisabled;
        "rux-icon-location-off": RuxIconLocationOff;
        "rux-icon-location-on": RuxIconLocationOn;
        "rux-icon-location-searching": RuxIconLocationSearching;
        "rux-icon-lock": RuxIconLock;
        "rux-icon-lock-open": RuxIconLockOpen;
        "rux-icon-looks": RuxIconLooks;
        "rux-icon-looks-1": RuxIconLooks1;
        "rux-icon-looks-2": RuxIconLooks2;
        "rux-icon-looks-3": RuxIconLooks3;
        "rux-icon-looks-4": RuxIconLooks4;
        "rux-icon-looks-5": RuxIconLooks5;
        "rux-icon-looks-6": RuxIconLooks6;
        "rux-icon-loop": RuxIconLoop;
        "rux-icon-loupe": RuxIconLoupe;
        "rux-icon-low-priority": RuxIconLowPriority;
        "rux-icon-loyalty": RuxIconLoyalty;
        "rux-icon-mail": RuxIconMail;
        "rux-icon-mail-outline": RuxIconMailOutline;
        "rux-icon-map": RuxIconMap;
        "rux-icon-markunread": RuxIconMarkunread;
        "rux-icon-markunread-mailbox": RuxIconMarkunreadMailbox;
        "rux-icon-maximize": RuxIconMaximize;
        "rux-icon-meeting-room": RuxIconMeetingRoom;
        "rux-icon-memory": RuxIconMemory;
        "rux-icon-menu": RuxIconMenu;
        "rux-icon-merge-type": RuxIconMergeType;
        "rux-icon-message": RuxIconMessage;
        "rux-icon-mic": RuxIconMic;
        "rux-icon-mic-none": RuxIconMicNone;
        "rux-icon-mic-off": RuxIconMicOff;
        "rux-icon-minimize": RuxIconMinimize;
        "rux-icon-missed-video-call": RuxIconMissedVideoCall;
        "rux-icon-mission": RuxIconMission;
        "rux-icon-mms": RuxIconMms;
        "rux-icon-mobile-friendly": RuxIconMobileFriendly;
        "rux-icon-mobile-off": RuxIconMobileOff;
        "rux-icon-mobile-screen-share": RuxIconMobileScreenShare;
        "rux-icon-mode-comment": RuxIconModeComment;
        "rux-icon-monetization-on": RuxIconMonetizationOn;
        "rux-icon-money": RuxIconMoney;
        "rux-icon-money-off": RuxIconMoneyOff;
        "rux-icon-monochrome-photos": RuxIconMonochromePhotos;
        "rux-icon-mood": RuxIconMood;
        "rux-icon-mood-bad": RuxIconMoodBad;
        "rux-icon-more": RuxIconMore;
        "rux-icon-more-horiz": RuxIconMoreHoriz;
        "rux-icon-more-vert": RuxIconMoreVert;
        "rux-icon-motorcycle": RuxIconMotorcycle;
        "rux-icon-mouse": RuxIconMouse;
        "rux-icon-move-to-inbox": RuxIconMoveToInbox;
        "rux-icon-movie": RuxIconMovie;
        "rux-icon-movie-creation": RuxIconMovieCreation;
        "rux-icon-movie-filter": RuxIconMovieFilter;
        "rux-icon-multiline-chart": RuxIconMultilineChart;
        "rux-icon-music-note": RuxIconMusicNote;
        "rux-icon-music-off": RuxIconMusicOff;
        "rux-icon-music-video": RuxIconMusicVideo;
        "rux-icon-my-location": RuxIconMyLocation;
        "rux-icon-nature": RuxIconNature;
        "rux-icon-nature-people": RuxIconNaturePeople;
        "rux-icon-navigate-before": RuxIconNavigateBefore;
        "rux-icon-navigate-next": RuxIconNavigateNext;
        "rux-icon-navigation": RuxIconNavigation;
        "rux-icon-near-me": RuxIconNearMe;
        "rux-icon-netcom": RuxIconNetcom;
        "rux-icon-network-cell": RuxIconNetworkCell;
        "rux-icon-network-check": RuxIconNetworkCheck;
        "rux-icon-network-locked": RuxIconNetworkLocked;
        "rux-icon-network-wifi": RuxIconNetworkWifi;
        "rux-icon-new-releases": RuxIconNewReleases;
        "rux-icon-next-week": RuxIconNextWeek;
        "rux-icon-nfc": RuxIconNfc;
        "rux-icon-no-encryption": RuxIconNoEncryption;
        "rux-icon-no-meeting-room": RuxIconNoMeetingRoom;
        "rux-icon-no-sim": RuxIconNoSim;
        "rux-icon-not-interested": RuxIconNotInterested;
        "rux-icon-not-listed-location": RuxIconNotListedLocation;
        "rux-icon-note": RuxIconNote;
        "rux-icon-note-add": RuxIconNoteAdd;
        "rux-icon-notes": RuxIconNotes;
        "rux-icon-notification-important": RuxIconNotificationImportant;
        "rux-icon-notifications": RuxIconNotifications;
        "rux-icon-notifications-active": RuxIconNotificationsActive;
        "rux-icon-notifications-none": RuxIconNotificationsNone;
        "rux-icon-notifications-off": RuxIconNotificationsOff;
        "rux-icon-notifications-paused": RuxIconNotificationsPaused;
        "rux-icon-offline-bolt": RuxIconOfflineBolt;
        "rux-icon-offline-pin": RuxIconOfflinePin;
        "rux-icon-ondemand-video": RuxIconOndemandVideo;
        "rux-icon-opacity": RuxIconOpacity;
        "rux-icon-open-in-browser": RuxIconOpenInBrowser;
        "rux-icon-open-in-new": RuxIconOpenInNew;
        "rux-icon-open-with": RuxIconOpenWith;
        "rux-icon-outlined-flag": RuxIconOutlinedFlag;
        "rux-icon-pages": RuxIconPages;
        "rux-icon-pageview": RuxIconPageview;
        "rux-icon-palette": RuxIconPalette;
        "rux-icon-pan-tool": RuxIconPanTool;
        "rux-icon-panorama": RuxIconPanorama;
        "rux-icon-panorama-fish-eye": RuxIconPanoramaFishEye;
        "rux-icon-panorama-horizontal": RuxIconPanoramaHorizontal;
        "rux-icon-panorama-vertical": RuxIconPanoramaVertical;
        "rux-icon-panorama-wide-angle": RuxIconPanoramaWideAngle;
        "rux-icon-party-mode": RuxIconPartyMode;
        "rux-icon-pause": RuxIconPause;
        "rux-icon-pause-circle-filled": RuxIconPauseCircleFilled;
        "rux-icon-pause-circle-outline": RuxIconPauseCircleOutline;
        "rux-icon-pause-presentation": RuxIconPausePresentation;
        "rux-icon-payload": RuxIconPayload;
        "rux-icon-payment": RuxIconPayment;
        "rux-icon-people-outline": RuxIconPeopleOutline;
        "rux-icon-perm-camera-mic": RuxIconPermCameraMic;
        "rux-icon-perm-contact-calendar": RuxIconPermContactCalendar;
        "rux-icon-perm-data-setting": RuxIconPermDataSetting;
        "rux-icon-perm-device-information": RuxIconPermDeviceInformation;
        "rux-icon-perm-identity": RuxIconPermIdentity;
        "rux-icon-perm-media": RuxIconPermMedia;
        "rux-icon-perm-phone-msg": RuxIconPermPhoneMsg;
        "rux-icon-perm-scan-wifi": RuxIconPermScanWifi;
        "rux-icon-person": RuxIconPerson;
        "rux-icon-person-add": RuxIconPersonAdd;
        "rux-icon-person-add-disabled": RuxIconPersonAddDisabled;
        "rux-icon-person-outline": RuxIconPersonOutline;
        "rux-icon-person-pin": RuxIconPersonPin;
        "rux-icon-person-pin-circle": RuxIconPersonPinCircle;
        "rux-icon-personal-video": RuxIconPersonalVideo;
        "rux-icon-pets": RuxIconPets;
        "rux-icon-phone": RuxIconPhone;
        "rux-icon-phone-android": RuxIconPhoneAndroid;
        "rux-icon-phone-bluetooth-speaker": RuxIconPhoneBluetoothSpeaker;
        "rux-icon-phone-callback": RuxIconPhoneCallback;
        "rux-icon-phone-forwarded": RuxIconPhoneForwarded;
        "rux-icon-phone-in-talk": RuxIconPhoneInTalk;
        "rux-icon-phone-iphone": RuxIconPhoneIphone;
        "rux-icon-phone-locked": RuxIconPhoneLocked;
        "rux-icon-phone-missed": RuxIconPhoneMissed;
        "rux-icon-phone-paused": RuxIconPhonePaused;
        "rux-icon-phonelink": RuxIconPhonelink;
        "rux-icon-phonelink-erase": RuxIconPhonelinkErase;
        "rux-icon-phonelink-lock": RuxIconPhonelinkLock;
        "rux-icon-phonelink-off": RuxIconPhonelinkOff;
        "rux-icon-phonelink-ring": RuxIconPhonelinkRing;
        "rux-icon-phonelink-setup": RuxIconPhonelinkSetup;
        "rux-icon-photo": RuxIconPhoto;
        "rux-icon-photo-album": RuxIconPhotoAlbum;
        "rux-icon-photo-camera": RuxIconPhotoCamera;
        "rux-icon-photo-filter": RuxIconPhotoFilter;
        "rux-icon-photo-library": RuxIconPhotoLibrary;
        "rux-icon-photo-size-select-actual": RuxIconPhotoSizeSelectActual;
        "rux-icon-photo-size-select-large": RuxIconPhotoSizeSelectLarge;
        "rux-icon-photo-size-select-small": RuxIconPhotoSizeSelectSmall;
        "rux-icon-picture-as-pdf": RuxIconPictureAsPdf;
        "rux-icon-picture-in-picture": RuxIconPictureInPicture;
        "rux-icon-picture-in-picture-alt": RuxIconPictureInPictureAlt;
        "rux-icon-pie-chart": RuxIconPieChart;
        "rux-icon-pin-drop": RuxIconPinDrop;
        "rux-icon-place": RuxIconPlace;
        "rux-icon-play-arrow": RuxIconPlayArrow;
        "rux-icon-play-circle-filled": RuxIconPlayCircleFilled;
        "rux-icon-play-circle-filled-white": RuxIconPlayCircleFilledWhite;
        "rux-icon-play-circle-outline": RuxIconPlayCircleOutline;
        "rux-icon-play-for-work": RuxIconPlayForWork;
        "rux-icon-playlist-add": RuxIconPlaylistAdd;
        "rux-icon-playlist-add-check": RuxIconPlaylistAddCheck;
        "rux-icon-playlist-play": RuxIconPlaylistPlay;
        "rux-icon-plus-one": RuxIconPlusOne;
        "rux-icon-poll": RuxIconPoll;
        "rux-icon-pool": RuxIconPool;
        "rux-icon-portable-wifi-off": RuxIconPortableWifiOff;
        "rux-icon-portrait": RuxIconPortrait;
        "rux-icon-power": RuxIconPower;
        "rux-icon-power-input": RuxIconPowerInput;
        "rux-icon-power-off": RuxIconPowerOff;
        "rux-icon-power-settings-new": RuxIconPowerSettingsNew;
        "rux-icon-pregnant-woman": RuxIconPregnantWoman;
        "rux-icon-present-to-all": RuxIconPresentToAll;
        "rux-icon-print": RuxIconPrint;
        "rux-icon-print-disabled": RuxIconPrintDisabled;
        "rux-icon-priority-high": RuxIconPriorityHigh;
        "rux-icon-processor": RuxIconProcessor;
        "rux-icon-processor-alt": RuxIconProcessorAlt;
        "rux-icon-propulsion-power": RuxIconPropulsionPower;
        "rux-icon-public": RuxIconPublic;
        "rux-icon-publish": RuxIconPublish;
        "rux-icon-query-builder": RuxIconQueryBuilder;
        "rux-icon-question-answer": RuxIconQuestionAnswer;
        "rux-icon-queue": RuxIconQueue;
        "rux-icon-queue-music": RuxIconQueueMusic;
        "rux-icon-queue-play-next": RuxIconQueuePlayNext;
        "rux-icon-radio": RuxIconRadio;
        "rux-icon-radio-button-checked": RuxIconRadioButtonChecked;
        "rux-icon-radio-button-unchecked": RuxIconRadioButtonUnchecked;
        "rux-icon-rate-review": RuxIconRateReview;
        "rux-icon-receipt": RuxIconReceipt;
        "rux-icon-recent-actors": RuxIconRecentActors;
        "rux-icon-record-voice-over": RuxIconRecordVoiceOver;
        "rux-icon-redeem": RuxIconRedeem;
        "rux-icon-redo": RuxIconRedo;
        "rux-icon-refresh": RuxIconRefresh;
        "rux-icon-remove": RuxIconRemove;
        "rux-icon-remove-circle": RuxIconRemoveCircle;
        "rux-icon-remove-circle-outline": RuxIconRemoveCircleOutline;
        "rux-icon-remove-from-queue": RuxIconRemoveFromQueue;
        "rux-icon-remove-red-eye": RuxIconRemoveRedEye;
        "rux-icon-remove-shopping-cart": RuxIconRemoveShoppingCart;
        "rux-icon-reorder": RuxIconReorder;
        "rux-icon-repeat": RuxIconRepeat;
        "rux-icon-repeat-one": RuxIconRepeatOne;
        "rux-icon-replay": RuxIconReplay;
        "rux-icon-replay-10": RuxIconReplay10;
        "rux-icon-replay-30": RuxIconReplay30;
        "rux-icon-replay-5": RuxIconReplay5;
        "rux-icon-reply": RuxIconReply;
        "rux-icon-reply-all": RuxIconReplyAll;
        "rux-icon-report": RuxIconReport;
        "rux-icon-report-off": RuxIconReportOff;
        "rux-icon-report-problem": RuxIconReportProblem;
        "rux-icon-restaurant": RuxIconRestaurant;
        "rux-icon-restaurant-menu": RuxIconRestaurantMenu;
        "rux-icon-restore": RuxIconRestore;
        "rux-icon-restore-from-trash": RuxIconRestoreFromTrash;
        "rux-icon-restore-page": RuxIconRestorePage;
        "rux-icon-ring-volume": RuxIconRingVolume;
        "rux-icon-room": RuxIconRoom;
        "rux-icon-room-service": RuxIconRoomService;
        "rux-icon-rotate-90-degrees-cc": RuxIconRotate90DegreesCc;
        "rux-icon-rotate-left": RuxIconRotateLeft;
        "rux-icon-rotate-right": RuxIconRotateRight;
        "rux-icon-rounded-corner": RuxIconRoundedCorner;
        "rux-icon-router": RuxIconRouter;
        "rux-icon-rowing": RuxIconRowing;
        "rux-icon-rss-feed": RuxIconRssFeed;
        "rux-icon-rv-hookup": RuxIconRvHookup;
        "rux-icon-satellite": RuxIconSatellite;
        "rux-icon-satellite-off": RuxIconSatelliteOff;
        "rux-icon-satellite-receive": RuxIconSatelliteReceive;
        "rux-icon-satellite-transmit": RuxIconSatelliteTransmit;
        "rux-icon-save": RuxIconSave;
        "rux-icon-save-alt": RuxIconSaveAlt;
        "rux-icon-scanner": RuxIconScanner;
        "rux-icon-scatter-plot": RuxIconScatterPlot;
        "rux-icon-schedule": RuxIconSchedule;
        "rux-icon-school": RuxIconSchool;
        "rux-icon-score": RuxIconScore;
        "rux-icon-screen-lock-landscape": RuxIconScreenLockLandscape;
        "rux-icon-screen-lock-portrait": RuxIconScreenLockPortrait;
        "rux-icon-screen-lock-rotation": RuxIconScreenLockRotation;
        "rux-icon-screen-rotation": RuxIconScreenRotation;
        "rux-icon-screen-share": RuxIconScreenShare;
        "rux-icon-sd-card": RuxIconSdCard;
        "rux-icon-sd-storage": RuxIconSdStorage;
        "rux-icon-search": RuxIconSearch;
        "rux-icon-seat": RuxIconSeat;
        "rux-icon-security": RuxIconSecurity;
        "rux-icon-select-all": RuxIconSelectAll;
        "rux-icon-send": RuxIconSend;
        "rux-icon-sentiment-dissatisfied": RuxIconSentimentDissatisfied;
        "rux-icon-sentiment-satisfied": RuxIconSentimentSatisfied;
        "rux-icon-sentiment-satisfied-alt": RuxIconSentimentSatisfiedAlt;
        "rux-icon-sentiment-very-dissatisfied": RuxIconSentimentVeryDissatisfied;
        "rux-icon-sentiment-very-satisfied": RuxIconSentimentVerySatisfied;
        "rux-icon-settings": RuxIconSettings;
        "rux-icon-settings-applications": RuxIconSettingsApplications;
        "rux-icon-settings-backup-restore": RuxIconSettingsBackupRestore;
        "rux-icon-settings-bluetooth": RuxIconSettingsBluetooth;
        "rux-icon-settings-brightness": RuxIconSettingsBrightness;
        "rux-icon-settings-cell": RuxIconSettingsCell;
        "rux-icon-settings-ethernet": RuxIconSettingsEthernet;
        "rux-icon-settings-input-antenna": RuxIconSettingsInputAntenna;
        "rux-icon-settings-input-component": RuxIconSettingsInputComponent;
        "rux-icon-settings-input-composite": RuxIconSettingsInputComposite;
        "rux-icon-settings-input-hdmi": RuxIconSettingsInputHdmi;
        "rux-icon-settings-input-svideo": RuxIconSettingsInputSvideo;
        "rux-icon-settings-overscan": RuxIconSettingsOverscan;
        "rux-icon-settings-phone": RuxIconSettingsPhone;
        "rux-icon-settings-power": RuxIconSettingsPower;
        "rux-icon-settings-remote": RuxIconSettingsRemote;
        "rux-icon-settings-system-daydream": RuxIconSettingsSystemDaydream;
        "rux-icon-settings-voice": RuxIconSettingsVoice;
        "rux-icon-share": RuxIconShare;
        "rux-icon-shop": RuxIconShop;
        "rux-icon-shop-two": RuxIconShopTwo;
        "rux-icon-shopping-basket": RuxIconShoppingBasket;
        "rux-icon-shopping-cart": RuxIconShoppingCart;
        "rux-icon-short-text": RuxIconShortText;
        "rux-icon-show-chart": RuxIconShowChart;
        "rux-icon-shuffle": RuxIconShuffle;
        "rux-icon-shutter-speed": RuxIconShutterSpeed;
        "rux-icon-signal-cellular-0-bar": RuxIconSignalCellular0Bar;
        "rux-icon-signal-cellular-1-bar": RuxIconSignalCellular1Bar;
        "rux-icon-signal-cellular-2-bar": RuxIconSignalCellular2Bar;
        "rux-icon-signal-cellular-3-bar": RuxIconSignalCellular3Bar;
        "rux-icon-signal-cellular-4-bar": RuxIconSignalCellular4Bar;
        "rux-icon-signal-cellular-alt": RuxIconSignalCellularAlt;
        "rux-icon-signal-cellular-connected-no-internet-0-bar": RuxIconSignalCellularConnectedNoInternet0Bar;
        "rux-icon-signal-cellular-connected-no-internet-1-bar": RuxIconSignalCellularConnectedNoInternet1Bar;
        "rux-icon-signal-cellular-connected-no-internet-2-bar": RuxIconSignalCellularConnectedNoInternet2Bar;
        "rux-icon-signal-cellular-connected-no-internet-3-bar": RuxIconSignalCellularConnectedNoInternet3Bar;
        "rux-icon-signal-cellular-connected-no-internet-4-bar": RuxIconSignalCellularConnectedNoInternet4Bar;
        "rux-icon-signal-cellular-no-sim": RuxIconSignalCellularNoSim;
        "rux-icon-signal-cellular-null": RuxIconSignalCellularNull;
        "rux-icon-signal-cellular-off": RuxIconSignalCellularOff;
        "rux-icon-signal-wifi-0-bar": RuxIconSignalWifi0Bar;
        "rux-icon-signal-wifi-1-bar": RuxIconSignalWifi1Bar;
        "rux-icon-signal-wifi-1-bar-lock": RuxIconSignalWifi1BarLock;
        "rux-icon-signal-wifi-2-bar": RuxIconSignalWifi2Bar;
        "rux-icon-signal-wifi-2-bar-lock": RuxIconSignalWifi2BarLock;
        "rux-icon-signal-wifi-3-bar": RuxIconSignalWifi3Bar;
        "rux-icon-signal-wifi-3-bar-lock": RuxIconSignalWifi3BarLock;
        "rux-icon-signal-wifi-4-bar": RuxIconSignalWifi4Bar;
        "rux-icon-signal-wifi-4-bar-lock": RuxIconSignalWifi4BarLock;
        "rux-icon-signal-wifi-off": RuxIconSignalWifiOff;
        "rux-icon-sim-card": RuxIconSimCard;
        "rux-icon-skip-next": RuxIconSkipNext;
        "rux-icon-skip-previous": RuxIconSkipPrevious;
        "rux-icon-slideshow": RuxIconSlideshow;
        "rux-icon-slow-motion-video": RuxIconSlowMotionVideo;
        "rux-icon-smartphone": RuxIconSmartphone;
        "rux-icon-smoke-free": RuxIconSmokeFree;
        "rux-icon-smoking-rooms": RuxIconSmokingRooms;
        "rux-icon-sms": RuxIconSms;
        "rux-icon-sms-failed": RuxIconSmsFailed;
        "rux-icon-snooze": RuxIconSnooze;
        "rux-icon-solar": RuxIconSolar;
        "rux-icon-sort": RuxIconSort;
        "rux-icon-sort-by-alpha": RuxIconSortByAlpha;
        "rux-icon-spa": RuxIconSpa;
        "rux-icon-space-bar": RuxIconSpaceBar;
        "rux-icon-speaker": RuxIconSpeaker;
        "rux-icon-speaker-group": RuxIconSpeakerGroup;
        "rux-icon-speaker-notes": RuxIconSpeakerNotes;
        "rux-icon-speaker-notes-off": RuxIconSpeakerNotesOff;
        "rux-icon-speaker-phone": RuxIconSpeakerPhone;
        "rux-icon-spellcheck": RuxIconSpellcheck;
        "rux-icon-star": RuxIconStar;
        "rux-icon-star-border": RuxIconStarBorder;
        "rux-icon-star-half": RuxIconStarHalf;
        "rux-icon-star-rate": RuxIconStarRate;
        "rux-icon-stars": RuxIconStars;
        "rux-icon-stay-current-landscape": RuxIconStayCurrentLandscape;
        "rux-icon-stay-current-portrait": RuxIconStayCurrentPortrait;
        "rux-icon-stay-primary-landscape": RuxIconStayPrimaryLandscape;
        "rux-icon-stay-primary-portrait": RuxIconStayPrimaryPortrait;
        "rux-icon-stop": RuxIconStop;
        "rux-icon-stop-screen-share": RuxIconStopScreenShare;
        "rux-icon-storage": RuxIconStorage;
        "rux-icon-store": RuxIconStore;
        "rux-icon-store-mall-directory": RuxIconStoreMallDirectory;
        "rux-icon-straighten": RuxIconStraighten;
        "rux-icon-streetview": RuxIconStreetview;
        "rux-icon-strikethrough-s": RuxIconStrikethroughS;
        "rux-icon-style": RuxIconStyle;
        "rux-icon-subdirectory-arrow-left": RuxIconSubdirectoryArrowLeft;
        "rux-icon-subdirectory-arrow-right": RuxIconSubdirectoryArrowRight;
        "rux-icon-subject": RuxIconSubject;
        "rux-icon-subscriptions": RuxIconSubscriptions;
        "rux-icon-subtitles": RuxIconSubtitles;
        "rux-icon-subway": RuxIconSubway;
        "rux-icon-supervised-user-circle": RuxIconSupervisedUserCircle;
        "rux-icon-supervisor-account": RuxIconSupervisorAccount;
        "rux-icon-surround-sound": RuxIconSurroundSound;
        "rux-icon-swap-calls": RuxIconSwapCalls;
        "rux-icon-swap-horiz": RuxIconSwapHoriz;
        "rux-icon-swap-horizontal-circle": RuxIconSwapHorizontalCircle;
        "rux-icon-swap-vert": RuxIconSwapVert;
        "rux-icon-swap-vertical-circle": RuxIconSwapVerticalCircle;
        "rux-icon-switch-camera": RuxIconSwitchCamera;
        "rux-icon-switch-video": RuxIconSwitchVideo;
        "rux-icon-sync": RuxIconSync;
        "rux-icon-sync-disabled": RuxIconSyncDisabled;
        "rux-icon-sync-problem": RuxIconSyncProblem;
        "rux-icon-system-update": RuxIconSystemUpdate;
        "rux-icon-tab": RuxIconTab;
        "rux-icon-tab-unselected": RuxIconTabUnselected;
        "rux-icon-table-chart": RuxIconTableChart;
        "rux-icon-tablet": RuxIconTablet;
        "rux-icon-tablet-android": RuxIconTabletAndroid;
        "rux-icon-tablet-mac": RuxIconTabletMac;
        "rux-icon-tag-faces": RuxIconTagFaces;
        "rux-icon-tap-and-play": RuxIconTapAndPlay;
        "rux-icon-terrain": RuxIconTerrain;
        "rux-icon-text-fields": RuxIconTextFields;
        "rux-icon-text-format": RuxIconTextFormat;
        "rux-icon-text-rotate-up": RuxIconTextRotateUp;
        "rux-icon-text-rotate-vertical": RuxIconTextRotateVertical;
        "rux-icon-text-rotation-none": RuxIconTextRotationNone;
        "rux-icon-textsms": RuxIconTextsms;
        "rux-icon-texture": RuxIconTexture;
        "rux-icon-theaters": RuxIconTheaters;
        "rux-icon-thermal": RuxIconThermal;
        "rux-icon-thumb-down": RuxIconThumbDown;
        "rux-icon-thumb-down-alt": RuxIconThumbDownAlt;
        "rux-icon-thumb-up": RuxIconThumbUp;
        "rux-icon-thumb-up-alt": RuxIconThumbUpAlt;
        "rux-icon-thumbs-up-down": RuxIconThumbsUpDown;
        "rux-icon-time-to-leave": RuxIconTimeToLeave;
        "rux-icon-timelapse": RuxIconTimelapse;
        "rux-icon-timeline": RuxIconTimeline;
        "rux-icon-timer": RuxIconTimer;
        "rux-icon-timer-10": RuxIconTimer10;
        "rux-icon-timer-3": RuxIconTimer3;
        "rux-icon-timer-off": RuxIconTimerOff;
        "rux-icon-title": RuxIconTitle;
        "rux-icon-toc": RuxIconToc;
        "rux-icon-today": RuxIconToday;
        "rux-icon-toggle-off": RuxIconToggleOff;
        "rux-icon-toggle-on": RuxIconToggleOn;
        "rux-icon-toll": RuxIconToll;
        "rux-icon-tonality": RuxIconTonality;
        "rux-icon-touch-app": RuxIconTouchApp;
        "rux-icon-toys": RuxIconToys;
        "rux-icon-track-changes": RuxIconTrackChanges;
        "rux-icon-traffic": RuxIconTraffic;
        "rux-icon-train": RuxIconTrain;
        "rux-icon-tram": RuxIconTram;
        "rux-icon-transfer-within-a-station": RuxIconTransferWithinAStation;
        "rux-icon-transform": RuxIconTransform;
        "rux-icon-transit-enterexit": RuxIconTransitEnterexit;
        "rux-icon-translate": RuxIconTranslate;
        "rux-icon-trending-down": RuxIconTrendingDown;
        "rux-icon-trending-flat": RuxIconTrendingFlat;
        "rux-icon-trending-up": RuxIconTrendingUp;
        "rux-icon-trip-origin": RuxIconTripOrigin;
        "rux-icon-tune": RuxIconTune;
        "rux-icon-turned-in": RuxIconTurnedIn;
        "rux-icon-turned-in-not": RuxIconTurnedInNot;
        "rux-icon-tv": RuxIconTv;
        "rux-icon-tv-off": RuxIconTvOff;
        "rux-icon-unarchive": RuxIconUnarchive;
        "rux-icon-undo": RuxIconUndo;
        "rux-icon-unfold-less": RuxIconUnfoldLess;
        "rux-icon-unfold-more": RuxIconUnfoldMore;
        "rux-icon-unsubscribe": RuxIconUnsubscribe;
        "rux-icon-update": RuxIconUpdate;
        "rux-icon-usb": RuxIconUsb;
        "rux-icon-verified-user": RuxIconVerifiedUser;
        "rux-icon-vertical-align-bottom": RuxIconVerticalAlignBottom;
        "rux-icon-vertical-align-center": RuxIconVerticalAlignCenter;
        "rux-icon-vertical-align-top": RuxIconVerticalAlignTop;
        "rux-icon-vertical-split": RuxIconVerticalSplit;
        "rux-icon-vibration": RuxIconVibration;
        "rux-icon-video-call": RuxIconVideoCall;
        "rux-icon-video-label": RuxIconVideoLabel;
        "rux-icon-video-library": RuxIconVideoLibrary;
        "rux-icon-videocam": RuxIconVideocam;
        "rux-icon-videocam-off": RuxIconVideocamOff;
        "rux-icon-videogame-asset": RuxIconVideogameAsset;
        "rux-icon-view-agenda": RuxIconViewAgenda;
        "rux-icon-view-array": RuxIconViewArray;
        "rux-icon-view-carousel": RuxIconViewCarousel;
        "rux-icon-view-column": RuxIconViewColumn;
        "rux-icon-view-comfy": RuxIconViewComfy;
        "rux-icon-view-compact": RuxIconViewCompact;
        "rux-icon-view-day": RuxIconViewDay;
        "rux-icon-view-headline": RuxIconViewHeadline;
        "rux-icon-view-list": RuxIconViewList;
        "rux-icon-view-module": RuxIconViewModule;
        "rux-icon-view-quilt": RuxIconViewQuilt;
        "rux-icon-view-stream": RuxIconViewStream;
        "rux-icon-view-week": RuxIconViewWeek;
        "rux-icon-vignette": RuxIconVignette;
        "rux-icon-visibility": RuxIconVisibility;
        "rux-icon-visibility-off": RuxIconVisibilityOff;
        "rux-icon-voice-chat": RuxIconVoiceChat;
        "rux-icon-voice-over-off": RuxIconVoiceOverOff;
        "rux-icon-voicemail": RuxIconVoicemail;
        "rux-icon-volume-down": RuxIconVolumeDown;
        "rux-icon-volume-mute": RuxIconVolumeMute;
        "rux-icon-volume-off": RuxIconVolumeOff;
        "rux-icon-volume-up": RuxIconVolumeUp;
        "rux-icon-vpn-key": RuxIconVpnKey;
        "rux-icon-vpn-lock": RuxIconVpnLock;
        "rux-icon-wallpaper": RuxIconWallpaper;
        "rux-icon-warning": RuxIconWarning;
        "rux-icon-watch": RuxIconWatch;
        "rux-icon-watch-later": RuxIconWatchLater;
        "rux-icon-waves": RuxIconWaves;
        "rux-icon-wb-auto": RuxIconWbAuto;
        "rux-icon-wb-cloudy": RuxIconWbCloudy;
        "rux-icon-wb-incandescent": RuxIconWbIncandescent;
        "rux-icon-wb-iridescent": RuxIconWbIridescent;
        "rux-icon-wb-sunny": RuxIconWbSunny;
        "rux-icon-wc": RuxIconWc;
        "rux-icon-web": RuxIconWeb;
        "rux-icon-web-asset": RuxIconWebAsset;
        "rux-icon-weekend": RuxIconWeekend;
        "rux-icon-whatshot": RuxIconWhatshot;
        "rux-icon-where-to-vote": RuxIconWhereToVote;
        "rux-icon-widgets": RuxIconWidgets;
        "rux-icon-wifi": RuxIconWifi;
        "rux-icon-wifi-lock": RuxIconWifiLock;
        "rux-icon-wifi-off": RuxIconWifiOff;
        "rux-icon-wifi-tethering": RuxIconWifiTethering;
        "rux-icon-work": RuxIconWork;
        "rux-icon-work-off": RuxIconWorkOff;
        "rux-icon-work-outline": RuxIconWorkOutline;
        "rux-icon-wrap-text": RuxIconWrapText;
        "rux-icon-youtube-searched-for": RuxIconYoutubeSearchedFor;
        "rux-icon-zoom-in": RuxIconZoomIn;
        "rux-icon-zoom-in-map": RuxIconZoomInMap;
        "rux-icon-zoom-out": RuxIconZoomOut;
        "rux-icon-zoom-out-map": RuxIconZoomOutMap;
        "rux-log": RuxLog;
        "rux-menu-item": RuxMenuItem;
        "rux-menu-item-divider": RuxMenuItemDivider;
        "rux-modal": RuxModal;
        "rux-monitoring-icon": RuxMonitoringIcon;
        "rux-monitoring-progress-icon": RuxMonitoringProgressIcon;
        "rux-notification": RuxNotification;
        "rux-pop-up-menu": RuxPopUpMenu;
        "rux-progress": RuxProgress;
        "rux-segmented-button": RuxSegmentedButton;
        "rux-status": RuxStatus;
        "rux-switch": RuxSwitch;
        "rux-tab": RuxTab;
        "rux-tab-panel": RuxTabPanel;
        "rux-tab-panels": RuxTabPanels;
        "rux-table": RuxTable;
        "rux-table-body": RuxTableBody;
        "rux-table-cell": RuxTableCell;
        "rux-table-header": RuxTableHeader;
        "rux-table-header-cell": RuxTableHeaderCell;
        "rux-table-header-row": RuxTableHeaderRow;
        "rux-table-row": RuxTableRow;
        "rux-tabs": RuxTabs;
        "rux-tree": RuxTree;
        "rux-tree-node": RuxTreeNode;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rux-button": LocalJSX.RuxButton & JSXBase.HTMLAttributes<HTMLRuxButtonElement>;
            "rux-button-group": LocalJSX.RuxButtonGroup & JSXBase.HTMLAttributes<HTMLRuxButtonGroupElement>;
            "rux-checkbox": LocalJSX.RuxCheckbox & JSXBase.HTMLAttributes<HTMLRuxCheckboxElement>;
            "rux-classification-marking": LocalJSX.RuxClassificationMarking & JSXBase.HTMLAttributes<HTMLRuxClassificationMarkingElement>;
            "rux-clock": LocalJSX.RuxClock & JSXBase.HTMLAttributes<HTMLRuxClockElement>;
            "rux-datetime": LocalJSX.RuxDatetime & JSXBase.HTMLAttributes<HTMLRuxDatetimeElement>;
            "rux-global-status-bar": LocalJSX.RuxGlobalStatusBar & JSXBase.HTMLAttributes<HTMLRuxGlobalStatusBarElement>;
            "rux-icon": LocalJSX.RuxIcon & JSXBase.HTMLAttributes<HTMLRuxIconElement>;
            "rux-icon-360": LocalJSX.RuxIcon360 & JSXBase.HTMLAttributes<HTMLRuxIcon360Element>;
            "rux-icon-3d-rotation": LocalJSX.RuxIcon3dRotation & JSXBase.HTMLAttributes<HTMLRuxIcon3dRotationElement>;
            "rux-icon-4k": LocalJSX.RuxIcon4k & JSXBase.HTMLAttributes<HTMLRuxIcon4kElement>;
            "rux-icon-ac-unit": LocalJSX.RuxIconAcUnit & JSXBase.HTMLAttributes<HTMLRuxIconAcUnitElement>;
            "rux-icon-access-alarms": LocalJSX.RuxIconAccessAlarms & JSXBase.HTMLAttributes<HTMLRuxIconAccessAlarmsElement>;
            "rux-icon-access-time": LocalJSX.RuxIconAccessTime & JSXBase.HTMLAttributes<HTMLRuxIconAccessTimeElement>;
            "rux-icon-accessibility": LocalJSX.RuxIconAccessibility & JSXBase.HTMLAttributes<HTMLRuxIconAccessibilityElement>;
            "rux-icon-accessibility-new": LocalJSX.RuxIconAccessibilityNew & JSXBase.HTMLAttributes<HTMLRuxIconAccessibilityNewElement>;
            "rux-icon-accessible": LocalJSX.RuxIconAccessible & JSXBase.HTMLAttributes<HTMLRuxIconAccessibleElement>;
            "rux-icon-accessible-forward": LocalJSX.RuxIconAccessibleForward & JSXBase.HTMLAttributes<HTMLRuxIconAccessibleForwardElement>;
            "rux-icon-account-balance": LocalJSX.RuxIconAccountBalance & JSXBase.HTMLAttributes<HTMLRuxIconAccountBalanceElement>;
            "rux-icon-account-balance-wallet": LocalJSX.RuxIconAccountBalanceWallet & JSXBase.HTMLAttributes<HTMLRuxIconAccountBalanceWalletElement>;
            "rux-icon-account-box": LocalJSX.RuxIconAccountBox & JSXBase.HTMLAttributes<HTMLRuxIconAccountBoxElement>;
            "rux-icon-account-circle": LocalJSX.RuxIconAccountCircle & JSXBase.HTMLAttributes<HTMLRuxIconAccountCircleElement>;
            "rux-icon-adb": LocalJSX.RuxIconAdb & JSXBase.HTMLAttributes<HTMLRuxIconAdbElement>;
            "rux-icon-add": LocalJSX.RuxIconAdd & JSXBase.HTMLAttributes<HTMLRuxIconAddElement>;
            "rux-icon-add-a-photo": LocalJSX.RuxIconAddAPhoto & JSXBase.HTMLAttributes<HTMLRuxIconAddAPhotoElement>;
            "rux-icon-add-alarm": LocalJSX.RuxIconAddAlarm & JSXBase.HTMLAttributes<HTMLRuxIconAddAlarmElement>;
            "rux-icon-add-alert": LocalJSX.RuxIconAddAlert & JSXBase.HTMLAttributes<HTMLRuxIconAddAlertElement>;
            "rux-icon-add-box": LocalJSX.RuxIconAddBox & JSXBase.HTMLAttributes<HTMLRuxIconAddBoxElement>;
            "rux-icon-add-circle": LocalJSX.RuxIconAddCircle & JSXBase.HTMLAttributes<HTMLRuxIconAddCircleElement>;
            "rux-icon-add-circle-outline": LocalJSX.RuxIconAddCircleOutline & JSXBase.HTMLAttributes<HTMLRuxIconAddCircleOutlineElement>;
            "rux-icon-add-comment": LocalJSX.RuxIconAddComment & JSXBase.HTMLAttributes<HTMLRuxIconAddCommentElement>;
            "rux-icon-add-location": LocalJSX.RuxIconAddLocation & JSXBase.HTMLAttributes<HTMLRuxIconAddLocationElement>;
            "rux-icon-add-photo-alternate": LocalJSX.RuxIconAddPhotoAlternate & JSXBase.HTMLAttributes<HTMLRuxIconAddPhotoAlternateElement>;
            "rux-icon-add-shopping-cart": LocalJSX.RuxIconAddShoppingCart & JSXBase.HTMLAttributes<HTMLRuxIconAddShoppingCartElement>;
            "rux-icon-add-to-home-screen": LocalJSX.RuxIconAddToHomeScreen & JSXBase.HTMLAttributes<HTMLRuxIconAddToHomeScreenElement>;
            "rux-icon-add-to-photos": LocalJSX.RuxIconAddToPhotos & JSXBase.HTMLAttributes<HTMLRuxIconAddToPhotosElement>;
            "rux-icon-add-to-queue": LocalJSX.RuxIconAddToQueue & JSXBase.HTMLAttributes<HTMLRuxIconAddToQueueElement>;
            "rux-icon-adjust": LocalJSX.RuxIconAdjust & JSXBase.HTMLAttributes<HTMLRuxIconAdjustElement>;
            "rux-icon-airline-seat-flat": LocalJSX.RuxIconAirlineSeatFlat & JSXBase.HTMLAttributes<HTMLRuxIconAirlineSeatFlatElement>;
            "rux-icon-airline-seat-flat-angled": LocalJSX.RuxIconAirlineSeatFlatAngled & JSXBase.HTMLAttributes<HTMLRuxIconAirlineSeatFlatAngledElement>;
            "rux-icon-airline-seat-individual-suite": LocalJSX.RuxIconAirlineSeatIndividualSuite & JSXBase.HTMLAttributes<HTMLRuxIconAirlineSeatIndividualSuiteElement>;
            "rux-icon-airline-seat-legroom-extra": LocalJSX.RuxIconAirlineSeatLegroomExtra & JSXBase.HTMLAttributes<HTMLRuxIconAirlineSeatLegroomExtraElement>;
            "rux-icon-airline-seat-legroom-normal": LocalJSX.RuxIconAirlineSeatLegroomNormal & JSXBase.HTMLAttributes<HTMLRuxIconAirlineSeatLegroomNormalElement>;
            "rux-icon-airline-seat-legroom-reduced": LocalJSX.RuxIconAirlineSeatLegroomReduced & JSXBase.HTMLAttributes<HTMLRuxIconAirlineSeatLegroomReducedElement>;
            "rux-icon-airline-seat-recline-extra": LocalJSX.RuxIconAirlineSeatReclineExtra & JSXBase.HTMLAttributes<HTMLRuxIconAirlineSeatReclineExtraElement>;
            "rux-icon-airline-seat-recline-normal": LocalJSX.RuxIconAirlineSeatReclineNormal & JSXBase.HTMLAttributes<HTMLRuxIconAirlineSeatReclineNormalElement>;
            "rux-icon-airplanemode-active": LocalJSX.RuxIconAirplanemodeActive & JSXBase.HTMLAttributes<HTMLRuxIconAirplanemodeActiveElement>;
            "rux-icon-airplanemode-inactive": LocalJSX.RuxIconAirplanemodeInactive & JSXBase.HTMLAttributes<HTMLRuxIconAirplanemodeInactiveElement>;
            "rux-icon-airplay": LocalJSX.RuxIconAirplay & JSXBase.HTMLAttributes<HTMLRuxIconAirplayElement>;
            "rux-icon-airport-shuttle": LocalJSX.RuxIconAirportShuttle & JSXBase.HTMLAttributes<HTMLRuxIconAirportShuttleElement>;
            "rux-icon-alarm": LocalJSX.RuxIconAlarm & JSXBase.HTMLAttributes<HTMLRuxIconAlarmElement>;
            "rux-icon-alarm-add": LocalJSX.RuxIconAlarmAdd & JSXBase.HTMLAttributes<HTMLRuxIconAlarmAddElement>;
            "rux-icon-alarm-off": LocalJSX.RuxIconAlarmOff & JSXBase.HTMLAttributes<HTMLRuxIconAlarmOffElement>;
            "rux-icon-alarm-on": LocalJSX.RuxIconAlarmOn & JSXBase.HTMLAttributes<HTMLRuxIconAlarmOnElement>;
            "rux-icon-album": LocalJSX.RuxIconAlbum & JSXBase.HTMLAttributes<HTMLRuxIconAlbumElement>;
            "rux-icon-all-inbox": LocalJSX.RuxIconAllInbox & JSXBase.HTMLAttributes<HTMLRuxIconAllInboxElement>;
            "rux-icon-all-inclusive": LocalJSX.RuxIconAllInclusive & JSXBase.HTMLAttributes<HTMLRuxIconAllInclusiveElement>;
            "rux-icon-all-out": LocalJSX.RuxIconAllOut & JSXBase.HTMLAttributes<HTMLRuxIconAllOutElement>;
            "rux-icon-alternate-email": LocalJSX.RuxIconAlternateEmail & JSXBase.HTMLAttributes<HTMLRuxIconAlternateEmailElement>;
            "rux-icon-altitude": LocalJSX.RuxIconAltitude & JSXBase.HTMLAttributes<HTMLRuxIconAltitudeElement>;
            "rux-icon-android": LocalJSX.RuxIconAndroid & JSXBase.HTMLAttributes<HTMLRuxIconAndroidElement>;
            "rux-icon-announcement": LocalJSX.RuxIconAnnouncement & JSXBase.HTMLAttributes<HTMLRuxIconAnnouncementElement>;
            "rux-icon-antenna": LocalJSX.RuxIconAntenna & JSXBase.HTMLAttributes<HTMLRuxIconAntennaElement>;
            "rux-icon-antenna-off": LocalJSX.RuxIconAntennaOff & JSXBase.HTMLAttributes<HTMLRuxIconAntennaOffElement>;
            "rux-icon-antenna-receive": LocalJSX.RuxIconAntennaReceive & JSXBase.HTMLAttributes<HTMLRuxIconAntennaReceiveElement>;
            "rux-icon-antenna-transmit": LocalJSX.RuxIconAntennaTransmit & JSXBase.HTMLAttributes<HTMLRuxIconAntennaTransmitElement>;
            "rux-icon-apps": LocalJSX.RuxIconApps & JSXBase.HTMLAttributes<HTMLRuxIconAppsElement>;
            "rux-icon-archive": LocalJSX.RuxIconArchive & JSXBase.HTMLAttributes<HTMLRuxIconArchiveElement>;
            "rux-icon-arrow-back": LocalJSX.RuxIconArrowBack & JSXBase.HTMLAttributes<HTMLRuxIconArrowBackElement>;
            "rux-icon-arrow-back-ios": LocalJSX.RuxIconArrowBackIos & JSXBase.HTMLAttributes<HTMLRuxIconArrowBackIosElement>;
            "rux-icon-arrow-downward": LocalJSX.RuxIconArrowDownward & JSXBase.HTMLAttributes<HTMLRuxIconArrowDownwardElement>;
            "rux-icon-arrow-drop-down": LocalJSX.RuxIconArrowDropDown & JSXBase.HTMLAttributes<HTMLRuxIconArrowDropDownElement>;
            "rux-icon-arrow-drop-down-circle": LocalJSX.RuxIconArrowDropDownCircle & JSXBase.HTMLAttributes<HTMLRuxIconArrowDropDownCircleElement>;
            "rux-icon-arrow-drop-up": LocalJSX.RuxIconArrowDropUp & JSXBase.HTMLAttributes<HTMLRuxIconArrowDropUpElement>;
            "rux-icon-arrow-forward": LocalJSX.RuxIconArrowForward & JSXBase.HTMLAttributes<HTMLRuxIconArrowForwardElement>;
            "rux-icon-arrow-forward-ios": LocalJSX.RuxIconArrowForwardIos & JSXBase.HTMLAttributes<HTMLRuxIconArrowForwardIosElement>;
            "rux-icon-arrow-left": LocalJSX.RuxIconArrowLeft & JSXBase.HTMLAttributes<HTMLRuxIconArrowLeftElement>;
            "rux-icon-arrow-right": LocalJSX.RuxIconArrowRight & JSXBase.HTMLAttributes<HTMLRuxIconArrowRightElement>;
            "rux-icon-arrow-right-alt": LocalJSX.RuxIconArrowRightAlt & JSXBase.HTMLAttributes<HTMLRuxIconArrowRightAltElement>;
            "rux-icon-arrow-upward": LocalJSX.RuxIconArrowUpward & JSXBase.HTMLAttributes<HTMLRuxIconArrowUpwardElement>;
            "rux-icon-art-track": LocalJSX.RuxIconArtTrack & JSXBase.HTMLAttributes<HTMLRuxIconArtTrackElement>;
            "rux-icon-aspect-ratio": LocalJSX.RuxIconAspectRatio & JSXBase.HTMLAttributes<HTMLRuxIconAspectRatioElement>;
            "rux-icon-assessment": LocalJSX.RuxIconAssessment & JSXBase.HTMLAttributes<HTMLRuxIconAssessmentElement>;
            "rux-icon-assignment": LocalJSX.RuxIconAssignment & JSXBase.HTMLAttributes<HTMLRuxIconAssignmentElement>;
            "rux-icon-assignment-find": LocalJSX.RuxIconAssignmentFind & JSXBase.HTMLAttributes<HTMLRuxIconAssignmentFindElement>;
            "rux-icon-assignment-late": LocalJSX.RuxIconAssignmentLate & JSXBase.HTMLAttributes<HTMLRuxIconAssignmentLateElement>;
            "rux-icon-assignment-return": LocalJSX.RuxIconAssignmentReturn & JSXBase.HTMLAttributes<HTMLRuxIconAssignmentReturnElement>;
            "rux-icon-assignment-returned": LocalJSX.RuxIconAssignmentReturned & JSXBase.HTMLAttributes<HTMLRuxIconAssignmentReturnedElement>;
            "rux-icon-assignment-turned-in": LocalJSX.RuxIconAssignmentTurnedIn & JSXBase.HTMLAttributes<HTMLRuxIconAssignmentTurnedInElement>;
            "rux-icon-assistant": LocalJSX.RuxIconAssistant & JSXBase.HTMLAttributes<HTMLRuxIconAssistantElement>;
            "rux-icon-assistant-photo": LocalJSX.RuxIconAssistantPhoto & JSXBase.HTMLAttributes<HTMLRuxIconAssistantPhotoElement>;
            "rux-icon-attach-file": LocalJSX.RuxIconAttachFile & JSXBase.HTMLAttributes<HTMLRuxIconAttachFileElement>;
            "rux-icon-attach-money": LocalJSX.RuxIconAttachMoney & JSXBase.HTMLAttributes<HTMLRuxIconAttachMoneyElement>;
            "rux-icon-attachment": LocalJSX.RuxIconAttachment & JSXBase.HTMLAttributes<HTMLRuxIconAttachmentElement>;
            "rux-icon-audiotrack": LocalJSX.RuxIconAudiotrack & JSXBase.HTMLAttributes<HTMLRuxIconAudiotrackElement>;
            "rux-icon-autorenew": LocalJSX.RuxIconAutorenew & JSXBase.HTMLAttributes<HTMLRuxIconAutorenewElement>;
            "rux-icon-av-timer": LocalJSX.RuxIconAvTimer & JSXBase.HTMLAttributes<HTMLRuxIconAvTimerElement>;
            "rux-icon-backspace": LocalJSX.RuxIconBackspace & JSXBase.HTMLAttributes<HTMLRuxIconBackspaceElement>;
            "rux-icon-backup": LocalJSX.RuxIconBackup & JSXBase.HTMLAttributes<HTMLRuxIconBackupElement>;
            "rux-icon-ballot": LocalJSX.RuxIconBallot & JSXBase.HTMLAttributes<HTMLRuxIconBallotElement>;
            "rux-icon-bar-chart": LocalJSX.RuxIconBarChart & JSXBase.HTMLAttributes<HTMLRuxIconBarChartElement>;
            "rux-icon-battery-20": LocalJSX.RuxIconBattery20 & JSXBase.HTMLAttributes<HTMLRuxIconBattery20Element>;
            "rux-icon-battery-30": LocalJSX.RuxIconBattery30 & JSXBase.HTMLAttributes<HTMLRuxIconBattery30Element>;
            "rux-icon-battery-50": LocalJSX.RuxIconBattery50 & JSXBase.HTMLAttributes<HTMLRuxIconBattery50Element>;
            "rux-icon-battery-60": LocalJSX.RuxIconBattery60 & JSXBase.HTMLAttributes<HTMLRuxIconBattery60Element>;
            "rux-icon-battery-80": LocalJSX.RuxIconBattery80 & JSXBase.HTMLAttributes<HTMLRuxIconBattery80Element>;
            "rux-icon-battery-90": LocalJSX.RuxIconBattery90 & JSXBase.HTMLAttributes<HTMLRuxIconBattery90Element>;
            "rux-icon-battery-alert": LocalJSX.RuxIconBatteryAlert & JSXBase.HTMLAttributes<HTMLRuxIconBatteryAlertElement>;
            "rux-icon-battery-charging-20": LocalJSX.RuxIconBatteryCharging20 & JSXBase.HTMLAttributes<HTMLRuxIconBatteryCharging20Element>;
            "rux-icon-battery-charging-30": LocalJSX.RuxIconBatteryCharging30 & JSXBase.HTMLAttributes<HTMLRuxIconBatteryCharging30Element>;
            "rux-icon-battery-charging-50": LocalJSX.RuxIconBatteryCharging50 & JSXBase.HTMLAttributes<HTMLRuxIconBatteryCharging50Element>;
            "rux-icon-battery-charging-60": LocalJSX.RuxIconBatteryCharging60 & JSXBase.HTMLAttributes<HTMLRuxIconBatteryCharging60Element>;
            "rux-icon-battery-charging-80": LocalJSX.RuxIconBatteryCharging80 & JSXBase.HTMLAttributes<HTMLRuxIconBatteryCharging80Element>;
            "rux-icon-battery-charging-90": LocalJSX.RuxIconBatteryCharging90 & JSXBase.HTMLAttributes<HTMLRuxIconBatteryCharging90Element>;
            "rux-icon-battery-charging-full": LocalJSX.RuxIconBatteryChargingFull & JSXBase.HTMLAttributes<HTMLRuxIconBatteryChargingFullElement>;
            "rux-icon-battery-full": LocalJSX.RuxIconBatteryFull & JSXBase.HTMLAttributes<HTMLRuxIconBatteryFullElement>;
            "rux-icon-battery-std": LocalJSX.RuxIconBatteryStd & JSXBase.HTMLAttributes<HTMLRuxIconBatteryStdElement>;
            "rux-icon-battery-unknown": LocalJSX.RuxIconBatteryUnknown & JSXBase.HTMLAttributes<HTMLRuxIconBatteryUnknownElement>;
            "rux-icon-beach-access": LocalJSX.RuxIconBeachAccess & JSXBase.HTMLAttributes<HTMLRuxIconBeachAccessElement>;
            "rux-icon-beenhere": LocalJSX.RuxIconBeenhere & JSXBase.HTMLAttributes<HTMLRuxIconBeenhereElement>;
            "rux-icon-block": LocalJSX.RuxIconBlock & JSXBase.HTMLAttributes<HTMLRuxIconBlockElement>;
            "rux-icon-bluetooth": LocalJSX.RuxIconBluetooth & JSXBase.HTMLAttributes<HTMLRuxIconBluetoothElement>;
            "rux-icon-bluetooth-audio": LocalJSX.RuxIconBluetoothAudio & JSXBase.HTMLAttributes<HTMLRuxIconBluetoothAudioElement>;
            "rux-icon-bluetooth-connected": LocalJSX.RuxIconBluetoothConnected & JSXBase.HTMLAttributes<HTMLRuxIconBluetoothConnectedElement>;
            "rux-icon-bluetooth-disabled": LocalJSX.RuxIconBluetoothDisabled & JSXBase.HTMLAttributes<HTMLRuxIconBluetoothDisabledElement>;
            "rux-icon-bluetooth-searching": LocalJSX.RuxIconBluetoothSearching & JSXBase.HTMLAttributes<HTMLRuxIconBluetoothSearchingElement>;
            "rux-icon-blur-circular": LocalJSX.RuxIconBlurCircular & JSXBase.HTMLAttributes<HTMLRuxIconBlurCircularElement>;
            "rux-icon-blur-linear": LocalJSX.RuxIconBlurLinear & JSXBase.HTMLAttributes<HTMLRuxIconBlurLinearElement>;
            "rux-icon-blur-off": LocalJSX.RuxIconBlurOff & JSXBase.HTMLAttributes<HTMLRuxIconBlurOffElement>;
            "rux-icon-blur-on": LocalJSX.RuxIconBlurOn & JSXBase.HTMLAttributes<HTMLRuxIconBlurOnElement>;
            "rux-icon-book": LocalJSX.RuxIconBook & JSXBase.HTMLAttributes<HTMLRuxIconBookElement>;
            "rux-icon-bookmark": LocalJSX.RuxIconBookmark & JSXBase.HTMLAttributes<HTMLRuxIconBookmarkElement>;
            "rux-icon-bookmark-border": LocalJSX.RuxIconBookmarkBorder & JSXBase.HTMLAttributes<HTMLRuxIconBookmarkBorderElement>;
            "rux-icon-bookmarks": LocalJSX.RuxIconBookmarks & JSXBase.HTMLAttributes<HTMLRuxIconBookmarksElement>;
            "rux-icon-border-all": LocalJSX.RuxIconBorderAll & JSXBase.HTMLAttributes<HTMLRuxIconBorderAllElement>;
            "rux-icon-border-bottom": LocalJSX.RuxIconBorderBottom & JSXBase.HTMLAttributes<HTMLRuxIconBorderBottomElement>;
            "rux-icon-border-clear": LocalJSX.RuxIconBorderClear & JSXBase.HTMLAttributes<HTMLRuxIconBorderClearElement>;
            "rux-icon-border-color": LocalJSX.RuxIconBorderColor & JSXBase.HTMLAttributes<HTMLRuxIconBorderColorElement>;
            "rux-icon-border-horizontal": LocalJSX.RuxIconBorderHorizontal & JSXBase.HTMLAttributes<HTMLRuxIconBorderHorizontalElement>;
            "rux-icon-border-inner": LocalJSX.RuxIconBorderInner & JSXBase.HTMLAttributes<HTMLRuxIconBorderInnerElement>;
            "rux-icon-border-left": LocalJSX.RuxIconBorderLeft & JSXBase.HTMLAttributes<HTMLRuxIconBorderLeftElement>;
            "rux-icon-border-outer": LocalJSX.RuxIconBorderOuter & JSXBase.HTMLAttributes<HTMLRuxIconBorderOuterElement>;
            "rux-icon-border-right": LocalJSX.RuxIconBorderRight & JSXBase.HTMLAttributes<HTMLRuxIconBorderRightElement>;
            "rux-icon-border-style": LocalJSX.RuxIconBorderStyle & JSXBase.HTMLAttributes<HTMLRuxIconBorderStyleElement>;
            "rux-icon-border-top": LocalJSX.RuxIconBorderTop & JSXBase.HTMLAttributes<HTMLRuxIconBorderTopElement>;
            "rux-icon-border-vertical": LocalJSX.RuxIconBorderVertical & JSXBase.HTMLAttributes<HTMLRuxIconBorderVerticalElement>;
            "rux-icon-branding-watermark": LocalJSX.RuxIconBrandingWatermark & JSXBase.HTMLAttributes<HTMLRuxIconBrandingWatermarkElement>;
            "rux-icon-brightness-1": LocalJSX.RuxIconBrightness1 & JSXBase.HTMLAttributes<HTMLRuxIconBrightness1Element>;
            "rux-icon-brightness-2": LocalJSX.RuxIconBrightness2 & JSXBase.HTMLAttributes<HTMLRuxIconBrightness2Element>;
            "rux-icon-brightness-3": LocalJSX.RuxIconBrightness3 & JSXBase.HTMLAttributes<HTMLRuxIconBrightness3Element>;
            "rux-icon-brightness-4": LocalJSX.RuxIconBrightness4 & JSXBase.HTMLAttributes<HTMLRuxIconBrightness4Element>;
            "rux-icon-brightness-5": LocalJSX.RuxIconBrightness5 & JSXBase.HTMLAttributes<HTMLRuxIconBrightness5Element>;
            "rux-icon-brightness-6": LocalJSX.RuxIconBrightness6 & JSXBase.HTMLAttributes<HTMLRuxIconBrightness6Element>;
            "rux-icon-brightness-7": LocalJSX.RuxIconBrightness7 & JSXBase.HTMLAttributes<HTMLRuxIconBrightness7Element>;
            "rux-icon-brightness-auto": LocalJSX.RuxIconBrightnessAuto & JSXBase.HTMLAttributes<HTMLRuxIconBrightnessAutoElement>;
            "rux-icon-brightness-high": LocalJSX.RuxIconBrightnessHigh & JSXBase.HTMLAttributes<HTMLRuxIconBrightnessHighElement>;
            "rux-icon-brightness-low": LocalJSX.RuxIconBrightnessLow & JSXBase.HTMLAttributes<HTMLRuxIconBrightnessLowElement>;
            "rux-icon-brightness-medium": LocalJSX.RuxIconBrightnessMedium & JSXBase.HTMLAttributes<HTMLRuxIconBrightnessMediumElement>;
            "rux-icon-broken-image": LocalJSX.RuxIconBrokenImage & JSXBase.HTMLAttributes<HTMLRuxIconBrokenImageElement>;
            "rux-icon-brush": LocalJSX.RuxIconBrush & JSXBase.HTMLAttributes<HTMLRuxIconBrushElement>;
            "rux-icon-bubble-chart": LocalJSX.RuxIconBubbleChart & JSXBase.HTMLAttributes<HTMLRuxIconBubbleChartElement>;
            "rux-icon-bug-report": LocalJSX.RuxIconBugReport & JSXBase.HTMLAttributes<HTMLRuxIconBugReportElement>;
            "rux-icon-build": LocalJSX.RuxIconBuild & JSXBase.HTMLAttributes<HTMLRuxIconBuildElement>;
            "rux-icon-burst-mode": LocalJSX.RuxIconBurstMode & JSXBase.HTMLAttributes<HTMLRuxIconBurstModeElement>;
            "rux-icon-business": LocalJSX.RuxIconBusiness & JSXBase.HTMLAttributes<HTMLRuxIconBusinessElement>;
            "rux-icon-business-center": LocalJSX.RuxIconBusinessCenter & JSXBase.HTMLAttributes<HTMLRuxIconBusinessCenterElement>;
            "rux-icon-cached": LocalJSX.RuxIconCached & JSXBase.HTMLAttributes<HTMLRuxIconCachedElement>;
            "rux-icon-cake": LocalJSX.RuxIconCake & JSXBase.HTMLAttributes<HTMLRuxIconCakeElement>;
            "rux-icon-calendar-today": LocalJSX.RuxIconCalendarToday & JSXBase.HTMLAttributes<HTMLRuxIconCalendarTodayElement>;
            "rux-icon-calendar-view-day": LocalJSX.RuxIconCalendarViewDay & JSXBase.HTMLAttributes<HTMLRuxIconCalendarViewDayElement>;
            "rux-icon-call": LocalJSX.RuxIconCall & JSXBase.HTMLAttributes<HTMLRuxIconCallElement>;
            "rux-icon-call-end": LocalJSX.RuxIconCallEnd & JSXBase.HTMLAttributes<HTMLRuxIconCallEndElement>;
            "rux-icon-call-made": LocalJSX.RuxIconCallMade & JSXBase.HTMLAttributes<HTMLRuxIconCallMadeElement>;
            "rux-icon-call-merge": LocalJSX.RuxIconCallMerge & JSXBase.HTMLAttributes<HTMLRuxIconCallMergeElement>;
            "rux-icon-call-missed": LocalJSX.RuxIconCallMissed & JSXBase.HTMLAttributes<HTMLRuxIconCallMissedElement>;
            "rux-icon-call-missed-outgoing": LocalJSX.RuxIconCallMissedOutgoing & JSXBase.HTMLAttributes<HTMLRuxIconCallMissedOutgoingElement>;
            "rux-icon-call-received": LocalJSX.RuxIconCallReceived & JSXBase.HTMLAttributes<HTMLRuxIconCallReceivedElement>;
            "rux-icon-call-split": LocalJSX.RuxIconCallSplit & JSXBase.HTMLAttributes<HTMLRuxIconCallSplitElement>;
            "rux-icon-call-to-action": LocalJSX.RuxIconCallToAction & JSXBase.HTMLAttributes<HTMLRuxIconCallToActionElement>;
            "rux-icon-camera": LocalJSX.RuxIconCamera & JSXBase.HTMLAttributes<HTMLRuxIconCameraElement>;
            "rux-icon-camera-alt": LocalJSX.RuxIconCameraAlt & JSXBase.HTMLAttributes<HTMLRuxIconCameraAltElement>;
            "rux-icon-camera-enhance": LocalJSX.RuxIconCameraEnhance & JSXBase.HTMLAttributes<HTMLRuxIconCameraEnhanceElement>;
            "rux-icon-camera-front": LocalJSX.RuxIconCameraFront & JSXBase.HTMLAttributes<HTMLRuxIconCameraFrontElement>;
            "rux-icon-camera-rear": LocalJSX.RuxIconCameraRear & JSXBase.HTMLAttributes<HTMLRuxIconCameraRearElement>;
            "rux-icon-camera-roll": LocalJSX.RuxIconCameraRoll & JSXBase.HTMLAttributes<HTMLRuxIconCameraRollElement>;
            "rux-icon-cancel": LocalJSX.RuxIconCancel & JSXBase.HTMLAttributes<HTMLRuxIconCancelElement>;
            "rux-icon-cancel-presentation": LocalJSX.RuxIconCancelPresentation & JSXBase.HTMLAttributes<HTMLRuxIconCancelPresentationElement>;
            "rux-icon-card-giftcard": LocalJSX.RuxIconCardGiftcard & JSXBase.HTMLAttributes<HTMLRuxIconCardGiftcardElement>;
            "rux-icon-card-membership": LocalJSX.RuxIconCardMembership & JSXBase.HTMLAttributes<HTMLRuxIconCardMembershipElement>;
            "rux-icon-card-travel": LocalJSX.RuxIconCardTravel & JSXBase.HTMLAttributes<HTMLRuxIconCardTravelElement>;
            "rux-icon-casino": LocalJSX.RuxIconCasino & JSXBase.HTMLAttributes<HTMLRuxIconCasinoElement>;
            "rux-icon-cast": LocalJSX.RuxIconCast & JSXBase.HTMLAttributes<HTMLRuxIconCastElement>;
            "rux-icon-cast-connected": LocalJSX.RuxIconCastConnected & JSXBase.HTMLAttributes<HTMLRuxIconCastConnectedElement>;
            "rux-icon-cast-for-education": LocalJSX.RuxIconCastForEducation & JSXBase.HTMLAttributes<HTMLRuxIconCastForEducationElement>;
            "rux-icon-category": LocalJSX.RuxIconCategory & JSXBase.HTMLAttributes<HTMLRuxIconCategoryElement>;
            "rux-icon-cell-wifi": LocalJSX.RuxIconCellWifi & JSXBase.HTMLAttributes<HTMLRuxIconCellWifiElement>;
            "rux-icon-center-focus-strong": LocalJSX.RuxIconCenterFocusStrong & JSXBase.HTMLAttributes<HTMLRuxIconCenterFocusStrongElement>;
            "rux-icon-center-focus-weak": LocalJSX.RuxIconCenterFocusWeak & JSXBase.HTMLAttributes<HTMLRuxIconCenterFocusWeakElement>;
            "rux-icon-change-history": LocalJSX.RuxIconChangeHistory & JSXBase.HTMLAttributes<HTMLRuxIconChangeHistoryElement>;
            "rux-icon-chat": LocalJSX.RuxIconChat & JSXBase.HTMLAttributes<HTMLRuxIconChatElement>;
            "rux-icon-chat-bubble": LocalJSX.RuxIconChatBubble & JSXBase.HTMLAttributes<HTMLRuxIconChatBubbleElement>;
            "rux-icon-chat-bubble-outline": LocalJSX.RuxIconChatBubbleOutline & JSXBase.HTMLAttributes<HTMLRuxIconChatBubbleOutlineElement>;
            "rux-icon-check": LocalJSX.RuxIconCheck & JSXBase.HTMLAttributes<HTMLRuxIconCheckElement>;
            "rux-icon-check-box": LocalJSX.RuxIconCheckBox & JSXBase.HTMLAttributes<HTMLRuxIconCheckBoxElement>;
            "rux-icon-check-box-outline-blank": LocalJSX.RuxIconCheckBoxOutlineBlank & JSXBase.HTMLAttributes<HTMLRuxIconCheckBoxOutlineBlankElement>;
            "rux-icon-check-circle": LocalJSX.RuxIconCheckCircle & JSXBase.HTMLAttributes<HTMLRuxIconCheckCircleElement>;
            "rux-icon-check-circle-outline": LocalJSX.RuxIconCheckCircleOutline & JSXBase.HTMLAttributes<HTMLRuxIconCheckCircleOutlineElement>;
            "rux-icon-chevron-left": LocalJSX.RuxIconChevronLeft & JSXBase.HTMLAttributes<HTMLRuxIconChevronLeftElement>;
            "rux-icon-chevron-right": LocalJSX.RuxIconChevronRight & JSXBase.HTMLAttributes<HTMLRuxIconChevronRightElement>;
            "rux-icon-child-care": LocalJSX.RuxIconChildCare & JSXBase.HTMLAttributes<HTMLRuxIconChildCareElement>;
            "rux-icon-child-friendly": LocalJSX.RuxIconChildFriendly & JSXBase.HTMLAttributes<HTMLRuxIconChildFriendlyElement>;
            "rux-icon-chrome-reader-mode": LocalJSX.RuxIconChromeReaderMode & JSXBase.HTMLAttributes<HTMLRuxIconChromeReaderModeElement>;
            "rux-icon-class": LocalJSX.RuxIconClass & JSXBase.HTMLAttributes<HTMLRuxIconClassElement>;
            "rux-icon-clear": LocalJSX.RuxIconClear & JSXBase.HTMLAttributes<HTMLRuxIconClearElement>;
            "rux-icon-clear-all": LocalJSX.RuxIconClearAll & JSXBase.HTMLAttributes<HTMLRuxIconClearAllElement>;
            "rux-icon-close": LocalJSX.RuxIconClose & JSXBase.HTMLAttributes<HTMLRuxIconCloseElement>;
            "rux-icon-closed-caption": LocalJSX.RuxIconClosedCaption & JSXBase.HTMLAttributes<HTMLRuxIconClosedCaptionElement>;
            "rux-icon-cloud": LocalJSX.RuxIconCloud & JSXBase.HTMLAttributes<HTMLRuxIconCloudElement>;
            "rux-icon-cloud-circle": LocalJSX.RuxIconCloudCircle & JSXBase.HTMLAttributes<HTMLRuxIconCloudCircleElement>;
            "rux-icon-cloud-done": LocalJSX.RuxIconCloudDone & JSXBase.HTMLAttributes<HTMLRuxIconCloudDoneElement>;
            "rux-icon-cloud-download": LocalJSX.RuxIconCloudDownload & JSXBase.HTMLAttributes<HTMLRuxIconCloudDownloadElement>;
            "rux-icon-cloud-off": LocalJSX.RuxIconCloudOff & JSXBase.HTMLAttributes<HTMLRuxIconCloudOffElement>;
            "rux-icon-cloud-queue": LocalJSX.RuxIconCloudQueue & JSXBase.HTMLAttributes<HTMLRuxIconCloudQueueElement>;
            "rux-icon-cloud-upload": LocalJSX.RuxIconCloudUpload & JSXBase.HTMLAttributes<HTMLRuxIconCloudUploadElement>;
            "rux-icon-code": LocalJSX.RuxIconCode & JSXBase.HTMLAttributes<HTMLRuxIconCodeElement>;
            "rux-icon-collections": LocalJSX.RuxIconCollections & JSXBase.HTMLAttributes<HTMLRuxIconCollectionsElement>;
            "rux-icon-collections-bookmark": LocalJSX.RuxIconCollectionsBookmark & JSXBase.HTMLAttributes<HTMLRuxIconCollectionsBookmarkElement>;
            "rux-icon-color-lens": LocalJSX.RuxIconColorLens & JSXBase.HTMLAttributes<HTMLRuxIconColorLensElement>;
            "rux-icon-colorize": LocalJSX.RuxIconColorize & JSXBase.HTMLAttributes<HTMLRuxIconColorizeElement>;
            "rux-icon-comment": LocalJSX.RuxIconComment & JSXBase.HTMLAttributes<HTMLRuxIconCommentElement>;
            "rux-icon-commute": LocalJSX.RuxIconCommute & JSXBase.HTMLAttributes<HTMLRuxIconCommuteElement>;
            "rux-icon-compare": LocalJSX.RuxIconCompare & JSXBase.HTMLAttributes<HTMLRuxIconCompareElement>;
            "rux-icon-compare-arrows": LocalJSX.RuxIconCompareArrows & JSXBase.HTMLAttributes<HTMLRuxIconCompareArrowsElement>;
            "rux-icon-compass-calibration": LocalJSX.RuxIconCompassCalibration & JSXBase.HTMLAttributes<HTMLRuxIconCompassCalibrationElement>;
            "rux-icon-computer": LocalJSX.RuxIconComputer & JSXBase.HTMLAttributes<HTMLRuxIconComputerElement>;
            "rux-icon-confirmation-number": LocalJSX.RuxIconConfirmationNumber & JSXBase.HTMLAttributes<HTMLRuxIconConfirmationNumberElement>;
            "rux-icon-contact-mail": LocalJSX.RuxIconContactMail & JSXBase.HTMLAttributes<HTMLRuxIconContactMailElement>;
            "rux-icon-contact-phone": LocalJSX.RuxIconContactPhone & JSXBase.HTMLAttributes<HTMLRuxIconContactPhoneElement>;
            "rux-icon-contact-support": LocalJSX.RuxIconContactSupport & JSXBase.HTMLAttributes<HTMLRuxIconContactSupportElement>;
            "rux-icon-contacts": LocalJSX.RuxIconContacts & JSXBase.HTMLAttributes<HTMLRuxIconContactsElement>;
            "rux-icon-control-camera": LocalJSX.RuxIconControlCamera & JSXBase.HTMLAttributes<HTMLRuxIconControlCameraElement>;
            "rux-icon-control-point": LocalJSX.RuxIconControlPoint & JSXBase.HTMLAttributes<HTMLRuxIconControlPointElement>;
            "rux-icon-control-point-duplicate": LocalJSX.RuxIconControlPointDuplicate & JSXBase.HTMLAttributes<HTMLRuxIconControlPointDuplicateElement>;
            "rux-icon-copyright": LocalJSX.RuxIconCopyright & JSXBase.HTMLAttributes<HTMLRuxIconCopyrightElement>;
            "rux-icon-create": LocalJSX.RuxIconCreate & JSXBase.HTMLAttributes<HTMLRuxIconCreateElement>;
            "rux-icon-create-new-folder": LocalJSX.RuxIconCreateNewFolder & JSXBase.HTMLAttributes<HTMLRuxIconCreateNewFolderElement>;
            "rux-icon-credit-card": LocalJSX.RuxIconCreditCard & JSXBase.HTMLAttributes<HTMLRuxIconCreditCardElement>;
            "rux-icon-crop": LocalJSX.RuxIconCrop & JSXBase.HTMLAttributes<HTMLRuxIconCropElement>;
            "rux-icon-crop-16-9": LocalJSX.RuxIconCrop169 & JSXBase.HTMLAttributes<HTMLRuxIconCrop169Element>;
            "rux-icon-crop-3-2": LocalJSX.RuxIconCrop32 & JSXBase.HTMLAttributes<HTMLRuxIconCrop32Element>;
            "rux-icon-crop-5-4": LocalJSX.RuxIconCrop54 & JSXBase.HTMLAttributes<HTMLRuxIconCrop54Element>;
            "rux-icon-crop-7-5": LocalJSX.RuxIconCrop75 & JSXBase.HTMLAttributes<HTMLRuxIconCrop75Element>;
            "rux-icon-crop-din": LocalJSX.RuxIconCropDin & JSXBase.HTMLAttributes<HTMLRuxIconCropDinElement>;
            "rux-icon-crop-free": LocalJSX.RuxIconCropFree & JSXBase.HTMLAttributes<HTMLRuxIconCropFreeElement>;
            "rux-icon-crop-landscape": LocalJSX.RuxIconCropLandscape & JSXBase.HTMLAttributes<HTMLRuxIconCropLandscapeElement>;
            "rux-icon-crop-original": LocalJSX.RuxIconCropOriginal & JSXBase.HTMLAttributes<HTMLRuxIconCropOriginalElement>;
            "rux-icon-crop-portrait": LocalJSX.RuxIconCropPortrait & JSXBase.HTMLAttributes<HTMLRuxIconCropPortraitElement>;
            "rux-icon-crop-rotate": LocalJSX.RuxIconCropRotate & JSXBase.HTMLAttributes<HTMLRuxIconCropRotateElement>;
            "rux-icon-crop-square": LocalJSX.RuxIconCropSquare & JSXBase.HTMLAttributes<HTMLRuxIconCropSquareElement>;
            "rux-icon-dashboard": LocalJSX.RuxIconDashboard & JSXBase.HTMLAttributes<HTMLRuxIconDashboardElement>;
            "rux-icon-data-usage": LocalJSX.RuxIconDataUsage & JSXBase.HTMLAttributes<HTMLRuxIconDataUsageElement>;
            "rux-icon-date-range": LocalJSX.RuxIconDateRange & JSXBase.HTMLAttributes<HTMLRuxIconDateRangeElement>;
            "rux-icon-dehaze": LocalJSX.RuxIconDehaze & JSXBase.HTMLAttributes<HTMLRuxIconDehazeElement>;
            "rux-icon-delete": LocalJSX.RuxIconDelete & JSXBase.HTMLAttributes<HTMLRuxIconDeleteElement>;
            "rux-icon-delete-forever": LocalJSX.RuxIconDeleteForever & JSXBase.HTMLAttributes<HTMLRuxIconDeleteForeverElement>;
            "rux-icon-delete-outline": LocalJSX.RuxIconDeleteOutline & JSXBase.HTMLAttributes<HTMLRuxIconDeleteOutlineElement>;
            "rux-icon-delete-sweep": LocalJSX.RuxIconDeleteSweep & JSXBase.HTMLAttributes<HTMLRuxIconDeleteSweepElement>;
            "rux-icon-departure-board": LocalJSX.RuxIconDepartureBoard & JSXBase.HTMLAttributes<HTMLRuxIconDepartureBoardElement>;
            "rux-icon-description": LocalJSX.RuxIconDescription & JSXBase.HTMLAttributes<HTMLRuxIconDescriptionElement>;
            "rux-icon-desktop-access-disabled": LocalJSX.RuxIconDesktopAccessDisabled & JSXBase.HTMLAttributes<HTMLRuxIconDesktopAccessDisabledElement>;
            "rux-icon-desktop-mac": LocalJSX.RuxIconDesktopMac & JSXBase.HTMLAttributes<HTMLRuxIconDesktopMacElement>;
            "rux-icon-desktop-windows": LocalJSX.RuxIconDesktopWindows & JSXBase.HTMLAttributes<HTMLRuxIconDesktopWindowsElement>;
            "rux-icon-details": LocalJSX.RuxIconDetails & JSXBase.HTMLAttributes<HTMLRuxIconDetailsElement>;
            "rux-icon-developer-board": LocalJSX.RuxIconDeveloperBoard & JSXBase.HTMLAttributes<HTMLRuxIconDeveloperBoardElement>;
            "rux-icon-developer-mode": LocalJSX.RuxIconDeveloperMode & JSXBase.HTMLAttributes<HTMLRuxIconDeveloperModeElement>;
            "rux-icon-device-hub": LocalJSX.RuxIconDeviceHub & JSXBase.HTMLAttributes<HTMLRuxIconDeviceHubElement>;
            "rux-icon-device-unknown": LocalJSX.RuxIconDeviceUnknown & JSXBase.HTMLAttributes<HTMLRuxIconDeviceUnknownElement>;
            "rux-icon-devices": LocalJSX.RuxIconDevices & JSXBase.HTMLAttributes<HTMLRuxIconDevicesElement>;
            "rux-icon-devices-other": LocalJSX.RuxIconDevicesOther & JSXBase.HTMLAttributes<HTMLRuxIconDevicesOtherElement>;
            "rux-icon-dialer-sip": LocalJSX.RuxIconDialerSip & JSXBase.HTMLAttributes<HTMLRuxIconDialerSipElement>;
            "rux-icon-dialpad": LocalJSX.RuxIconDialpad & JSXBase.HTMLAttributes<HTMLRuxIconDialpadElement>;
            "rux-icon-directions": LocalJSX.RuxIconDirections & JSXBase.HTMLAttributes<HTMLRuxIconDirectionsElement>;
            "rux-icon-directions-bike": LocalJSX.RuxIconDirectionsBike & JSXBase.HTMLAttributes<HTMLRuxIconDirectionsBikeElement>;
            "rux-icon-directions-boat": LocalJSX.RuxIconDirectionsBoat & JSXBase.HTMLAttributes<HTMLRuxIconDirectionsBoatElement>;
            "rux-icon-directions-bus": LocalJSX.RuxIconDirectionsBus & JSXBase.HTMLAttributes<HTMLRuxIconDirectionsBusElement>;
            "rux-icon-directions-car": LocalJSX.RuxIconDirectionsCar & JSXBase.HTMLAttributes<HTMLRuxIconDirectionsCarElement>;
            "rux-icon-directions-railway": LocalJSX.RuxIconDirectionsRailway & JSXBase.HTMLAttributes<HTMLRuxIconDirectionsRailwayElement>;
            "rux-icon-directions-run": LocalJSX.RuxIconDirectionsRun & JSXBase.HTMLAttributes<HTMLRuxIconDirectionsRunElement>;
            "rux-icon-directions-subway": LocalJSX.RuxIconDirectionsSubway & JSXBase.HTMLAttributes<HTMLRuxIconDirectionsSubwayElement>;
            "rux-icon-directions-transit": LocalJSX.RuxIconDirectionsTransit & JSXBase.HTMLAttributes<HTMLRuxIconDirectionsTransitElement>;
            "rux-icon-directions-walk": LocalJSX.RuxIconDirectionsWalk & JSXBase.HTMLAttributes<HTMLRuxIconDirectionsWalkElement>;
            "rux-icon-disc-full": LocalJSX.RuxIconDiscFull & JSXBase.HTMLAttributes<HTMLRuxIconDiscFullElement>;
            "rux-icon-dns": LocalJSX.RuxIconDns & JSXBase.HTMLAttributes<HTMLRuxIconDnsElement>;
            "rux-icon-dock": LocalJSX.RuxIconDock & JSXBase.HTMLAttributes<HTMLRuxIconDockElement>;
            "rux-icon-domain": LocalJSX.RuxIconDomain & JSXBase.HTMLAttributes<HTMLRuxIconDomainElement>;
            "rux-icon-domain-disabled": LocalJSX.RuxIconDomainDisabled & JSXBase.HTMLAttributes<HTMLRuxIconDomainDisabledElement>;
            "rux-icon-done": LocalJSX.RuxIconDone & JSXBase.HTMLAttributes<HTMLRuxIconDoneElement>;
            "rux-icon-done-all": LocalJSX.RuxIconDoneAll & JSXBase.HTMLAttributes<HTMLRuxIconDoneAllElement>;
            "rux-icon-done-outline": LocalJSX.RuxIconDoneOutline & JSXBase.HTMLAttributes<HTMLRuxIconDoneOutlineElement>;
            "rux-icon-donut-large": LocalJSX.RuxIconDonutLarge & JSXBase.HTMLAttributes<HTMLRuxIconDonutLargeElement>;
            "rux-icon-donut-small": LocalJSX.RuxIconDonutSmall & JSXBase.HTMLAttributes<HTMLRuxIconDonutSmallElement>;
            "rux-icon-drafts": LocalJSX.RuxIconDrafts & JSXBase.HTMLAttributes<HTMLRuxIconDraftsElement>;
            "rux-icon-drag-handle": LocalJSX.RuxIconDragHandle & JSXBase.HTMLAttributes<HTMLRuxIconDragHandleElement>;
            "rux-icon-drag-indicator": LocalJSX.RuxIconDragIndicator & JSXBase.HTMLAttributes<HTMLRuxIconDragIndicatorElement>;
            "rux-icon-drive-eta": LocalJSX.RuxIconDriveEta & JSXBase.HTMLAttributes<HTMLRuxIconDriveEtaElement>;
            "rux-icon-duo": LocalJSX.RuxIconDuo & JSXBase.HTMLAttributes<HTMLRuxIconDuoElement>;
            "rux-icon-dvr": LocalJSX.RuxIconDvr & JSXBase.HTMLAttributes<HTMLRuxIconDvrElement>;
            "rux-icon-edit": LocalJSX.RuxIconEdit & JSXBase.HTMLAttributes<HTMLRuxIconEditElement>;
            "rux-icon-edit-attributes": LocalJSX.RuxIconEditAttributes & JSXBase.HTMLAttributes<HTMLRuxIconEditAttributesElement>;
            "rux-icon-edit-location": LocalJSX.RuxIconEditLocation & JSXBase.HTMLAttributes<HTMLRuxIconEditLocationElement>;
            "rux-icon-eject": LocalJSX.RuxIconEject & JSXBase.HTMLAttributes<HTMLRuxIconEjectElement>;
            "rux-icon-email": LocalJSX.RuxIconEmail & JSXBase.HTMLAttributes<HTMLRuxIconEmailElement>;
            "rux-icon-enhanced-encryption": LocalJSX.RuxIconEnhancedEncryption & JSXBase.HTMLAttributes<HTMLRuxIconEnhancedEncryptionElement>;
            "rux-icon-equalizer": LocalJSX.RuxIconEqualizer & JSXBase.HTMLAttributes<HTMLRuxIconEqualizerElement>;
            "rux-icon-equipment": LocalJSX.RuxIconEquipment & JSXBase.HTMLAttributes<HTMLRuxIconEquipmentElement>;
            "rux-icon-error": LocalJSX.RuxIconError & JSXBase.HTMLAttributes<HTMLRuxIconErrorElement>;
            "rux-icon-error-outline": LocalJSX.RuxIconErrorOutline & JSXBase.HTMLAttributes<HTMLRuxIconErrorOutlineElement>;
            "rux-icon-euro-symbol": LocalJSX.RuxIconEuroSymbol & JSXBase.HTMLAttributes<HTMLRuxIconEuroSymbolElement>;
            "rux-icon-ev-station": LocalJSX.RuxIconEvStation & JSXBase.HTMLAttributes<HTMLRuxIconEvStationElement>;
            "rux-icon-event": LocalJSX.RuxIconEvent & JSXBase.HTMLAttributes<HTMLRuxIconEventElement>;
            "rux-icon-event-available": LocalJSX.RuxIconEventAvailable & JSXBase.HTMLAttributes<HTMLRuxIconEventAvailableElement>;
            "rux-icon-event-busy": LocalJSX.RuxIconEventBusy & JSXBase.HTMLAttributes<HTMLRuxIconEventBusyElement>;
            "rux-icon-event-note": LocalJSX.RuxIconEventNote & JSXBase.HTMLAttributes<HTMLRuxIconEventNoteElement>;
            "rux-icon-exit-to-app": LocalJSX.RuxIconExitToApp & JSXBase.HTMLAttributes<HTMLRuxIconExitToAppElement>;
            "rux-icon-expand-less": LocalJSX.RuxIconExpandLess & JSXBase.HTMLAttributes<HTMLRuxIconExpandLessElement>;
            "rux-icon-expand-more": LocalJSX.RuxIconExpandMore & JSXBase.HTMLAttributes<HTMLRuxIconExpandMoreElement>;
            "rux-icon-explicit": LocalJSX.RuxIconExplicit & JSXBase.HTMLAttributes<HTMLRuxIconExplicitElement>;
            "rux-icon-explore": LocalJSX.RuxIconExplore & JSXBase.HTMLAttributes<HTMLRuxIconExploreElement>;
            "rux-icon-explore-off": LocalJSX.RuxIconExploreOff & JSXBase.HTMLAttributes<HTMLRuxIconExploreOffElement>;
            "rux-icon-exposure": LocalJSX.RuxIconExposure & JSXBase.HTMLAttributes<HTMLRuxIconExposureElement>;
            "rux-icon-exposure-neg-1": LocalJSX.RuxIconExposureNeg1 & JSXBase.HTMLAttributes<HTMLRuxIconExposureNeg1Element>;
            "rux-icon-exposure-neg-2": LocalJSX.RuxIconExposureNeg2 & JSXBase.HTMLAttributes<HTMLRuxIconExposureNeg2Element>;
            "rux-icon-exposure-plus-1": LocalJSX.RuxIconExposurePlus1 & JSXBase.HTMLAttributes<HTMLRuxIconExposurePlus1Element>;
            "rux-icon-exposure-plus-2": LocalJSX.RuxIconExposurePlus2 & JSXBase.HTMLAttributes<HTMLRuxIconExposurePlus2Element>;
            "rux-icon-exposure-zero": LocalJSX.RuxIconExposureZero & JSXBase.HTMLAttributes<HTMLRuxIconExposureZeroElement>;
            "rux-icon-extension": LocalJSX.RuxIconExtension & JSXBase.HTMLAttributes<HTMLRuxIconExtensionElement>;
            "rux-icon-face": LocalJSX.RuxIconFace & JSXBase.HTMLAttributes<HTMLRuxIconFaceElement>;
            "rux-icon-fast-forward": LocalJSX.RuxIconFastForward & JSXBase.HTMLAttributes<HTMLRuxIconFastForwardElement>;
            "rux-icon-fast-rewind": LocalJSX.RuxIconFastRewind & JSXBase.HTMLAttributes<HTMLRuxIconFastRewindElement>;
            "rux-icon-fastfood": LocalJSX.RuxIconFastfood & JSXBase.HTMLAttributes<HTMLRuxIconFastfoodElement>;
            "rux-icon-favorite": LocalJSX.RuxIconFavorite & JSXBase.HTMLAttributes<HTMLRuxIconFavoriteElement>;
            "rux-icon-favorite-border": LocalJSX.RuxIconFavoriteBorder & JSXBase.HTMLAttributes<HTMLRuxIconFavoriteBorderElement>;
            "rux-icon-featured-play-list": LocalJSX.RuxIconFeaturedPlayList & JSXBase.HTMLAttributes<HTMLRuxIconFeaturedPlayListElement>;
            "rux-icon-featured-video": LocalJSX.RuxIconFeaturedVideo & JSXBase.HTMLAttributes<HTMLRuxIconFeaturedVideoElement>;
            "rux-icon-feedback": LocalJSX.RuxIconFeedback & JSXBase.HTMLAttributes<HTMLRuxIconFeedbackElement>;
            "rux-icon-fiber-dvr": LocalJSX.RuxIconFiberDvr & JSXBase.HTMLAttributes<HTMLRuxIconFiberDvrElement>;
            "rux-icon-fiber-manual-record": LocalJSX.RuxIconFiberManualRecord & JSXBase.HTMLAttributes<HTMLRuxIconFiberManualRecordElement>;
            "rux-icon-fiber-new": LocalJSX.RuxIconFiberNew & JSXBase.HTMLAttributes<HTMLRuxIconFiberNewElement>;
            "rux-icon-fiber-pin": LocalJSX.RuxIconFiberPin & JSXBase.HTMLAttributes<HTMLRuxIconFiberPinElement>;
            "rux-icon-fiber-smart-record": LocalJSX.RuxIconFiberSmartRecord & JSXBase.HTMLAttributes<HTMLRuxIconFiberSmartRecordElement>;
            "rux-icon-file-copy": LocalJSX.RuxIconFileCopy & JSXBase.HTMLAttributes<HTMLRuxIconFileCopyElement>;
            "rux-icon-filter": LocalJSX.RuxIconFilter & JSXBase.HTMLAttributes<HTMLRuxIconFilterElement>;
            "rux-icon-filter-1": LocalJSX.RuxIconFilter1 & JSXBase.HTMLAttributes<HTMLRuxIconFilter1Element>;
            "rux-icon-filter-2": LocalJSX.RuxIconFilter2 & JSXBase.HTMLAttributes<HTMLRuxIconFilter2Element>;
            "rux-icon-filter-3": LocalJSX.RuxIconFilter3 & JSXBase.HTMLAttributes<HTMLRuxIconFilter3Element>;
            "rux-icon-filter-4": LocalJSX.RuxIconFilter4 & JSXBase.HTMLAttributes<HTMLRuxIconFilter4Element>;
            "rux-icon-filter-5": LocalJSX.RuxIconFilter5 & JSXBase.HTMLAttributes<HTMLRuxIconFilter5Element>;
            "rux-icon-filter-6": LocalJSX.RuxIconFilter6 & JSXBase.HTMLAttributes<HTMLRuxIconFilter6Element>;
            "rux-icon-filter-7": LocalJSX.RuxIconFilter7 & JSXBase.HTMLAttributes<HTMLRuxIconFilter7Element>;
            "rux-icon-filter-8": LocalJSX.RuxIconFilter8 & JSXBase.HTMLAttributes<HTMLRuxIconFilter8Element>;
            "rux-icon-filter-9": LocalJSX.RuxIconFilter9 & JSXBase.HTMLAttributes<HTMLRuxIconFilter9Element>;
            "rux-icon-filter-9-plus": LocalJSX.RuxIconFilter9Plus & JSXBase.HTMLAttributes<HTMLRuxIconFilter9PlusElement>;
            "rux-icon-filter-b-and-w": LocalJSX.RuxIconFilterBAndW & JSXBase.HTMLAttributes<HTMLRuxIconFilterBAndWElement>;
            "rux-icon-filter-center-focus": LocalJSX.RuxIconFilterCenterFocus & JSXBase.HTMLAttributes<HTMLRuxIconFilterCenterFocusElement>;
            "rux-icon-filter-drama": LocalJSX.RuxIconFilterDrama & JSXBase.HTMLAttributes<HTMLRuxIconFilterDramaElement>;
            "rux-icon-filter-frames": LocalJSX.RuxIconFilterFrames & JSXBase.HTMLAttributes<HTMLRuxIconFilterFramesElement>;
            "rux-icon-filter-hdr": LocalJSX.RuxIconFilterHdr & JSXBase.HTMLAttributes<HTMLRuxIconFilterHdrElement>;
            "rux-icon-filter-list": LocalJSX.RuxIconFilterList & JSXBase.HTMLAttributes<HTMLRuxIconFilterListElement>;
            "rux-icon-filter-none": LocalJSX.RuxIconFilterNone & JSXBase.HTMLAttributes<HTMLRuxIconFilterNoneElement>;
            "rux-icon-filter-tilt-shift": LocalJSX.RuxIconFilterTiltShift & JSXBase.HTMLAttributes<HTMLRuxIconFilterTiltShiftElement>;
            "rux-icon-filter-vintage": LocalJSX.RuxIconFilterVintage & JSXBase.HTMLAttributes<HTMLRuxIconFilterVintageElement>;
            "rux-icon-find-in-page": LocalJSX.RuxIconFindInPage & JSXBase.HTMLAttributes<HTMLRuxIconFindInPageElement>;
            "rux-icon-find-replace": LocalJSX.RuxIconFindReplace & JSXBase.HTMLAttributes<HTMLRuxIconFindReplaceElement>;
            "rux-icon-fingerprint": LocalJSX.RuxIconFingerprint & JSXBase.HTMLAttributes<HTMLRuxIconFingerprintElement>;
            "rux-icon-first-page": LocalJSX.RuxIconFirstPage & JSXBase.HTMLAttributes<HTMLRuxIconFirstPageElement>;
            "rux-icon-fitness-center": LocalJSX.RuxIconFitnessCenter & JSXBase.HTMLAttributes<HTMLRuxIconFitnessCenterElement>;
            "rux-icon-flag": LocalJSX.RuxIconFlag & JSXBase.HTMLAttributes<HTMLRuxIconFlagElement>;
            "rux-icon-flare": LocalJSX.RuxIconFlare & JSXBase.HTMLAttributes<HTMLRuxIconFlareElement>;
            "rux-icon-flash-auto": LocalJSX.RuxIconFlashAuto & JSXBase.HTMLAttributes<HTMLRuxIconFlashAutoElement>;
            "rux-icon-flash-off": LocalJSX.RuxIconFlashOff & JSXBase.HTMLAttributes<HTMLRuxIconFlashOffElement>;
            "rux-icon-flash-on": LocalJSX.RuxIconFlashOn & JSXBase.HTMLAttributes<HTMLRuxIconFlashOnElement>;
            "rux-icon-flight": LocalJSX.RuxIconFlight & JSXBase.HTMLAttributes<HTMLRuxIconFlightElement>;
            "rux-icon-flight-land": LocalJSX.RuxIconFlightLand & JSXBase.HTMLAttributes<HTMLRuxIconFlightLandElement>;
            "rux-icon-flight-takeoff": LocalJSX.RuxIconFlightTakeoff & JSXBase.HTMLAttributes<HTMLRuxIconFlightTakeoffElement>;
            "rux-icon-flip": LocalJSX.RuxIconFlip & JSXBase.HTMLAttributes<HTMLRuxIconFlipElement>;
            "rux-icon-flip-to-back": LocalJSX.RuxIconFlipToBack & JSXBase.HTMLAttributes<HTMLRuxIconFlipToBackElement>;
            "rux-icon-flip-to-front": LocalJSX.RuxIconFlipToFront & JSXBase.HTMLAttributes<HTMLRuxIconFlipToFrontElement>;
            "rux-icon-folder": LocalJSX.RuxIconFolder & JSXBase.HTMLAttributes<HTMLRuxIconFolderElement>;
            "rux-icon-folder-open": LocalJSX.RuxIconFolderOpen & JSXBase.HTMLAttributes<HTMLRuxIconFolderOpenElement>;
            "rux-icon-folder-shared": LocalJSX.RuxIconFolderShared & JSXBase.HTMLAttributes<HTMLRuxIconFolderSharedElement>;
            "rux-icon-folder-special": LocalJSX.RuxIconFolderSpecial & JSXBase.HTMLAttributes<HTMLRuxIconFolderSpecialElement>;
            "rux-icon-font-download": LocalJSX.RuxIconFontDownload & JSXBase.HTMLAttributes<HTMLRuxIconFontDownloadElement>;
            "rux-icon-format-align-center": LocalJSX.RuxIconFormatAlignCenter & JSXBase.HTMLAttributes<HTMLRuxIconFormatAlignCenterElement>;
            "rux-icon-format-align-justify": LocalJSX.RuxIconFormatAlignJustify & JSXBase.HTMLAttributes<HTMLRuxIconFormatAlignJustifyElement>;
            "rux-icon-format-align-left": LocalJSX.RuxIconFormatAlignLeft & JSXBase.HTMLAttributes<HTMLRuxIconFormatAlignLeftElement>;
            "rux-icon-format-align-right": LocalJSX.RuxIconFormatAlignRight & JSXBase.HTMLAttributes<HTMLRuxIconFormatAlignRightElement>;
            "rux-icon-format-bold": LocalJSX.RuxIconFormatBold & JSXBase.HTMLAttributes<HTMLRuxIconFormatBoldElement>;
            "rux-icon-format-clear": LocalJSX.RuxIconFormatClear & JSXBase.HTMLAttributes<HTMLRuxIconFormatClearElement>;
            "rux-icon-format-color-fill": LocalJSX.RuxIconFormatColorFill & JSXBase.HTMLAttributes<HTMLRuxIconFormatColorFillElement>;
            "rux-icon-format-color-reset": LocalJSX.RuxIconFormatColorReset & JSXBase.HTMLAttributes<HTMLRuxIconFormatColorResetElement>;
            "rux-icon-format-color-text": LocalJSX.RuxIconFormatColorText & JSXBase.HTMLAttributes<HTMLRuxIconFormatColorTextElement>;
            "rux-icon-format-indent-decrease": LocalJSX.RuxIconFormatIndentDecrease & JSXBase.HTMLAttributes<HTMLRuxIconFormatIndentDecreaseElement>;
            "rux-icon-format-indent-increase": LocalJSX.RuxIconFormatIndentIncrease & JSXBase.HTMLAttributes<HTMLRuxIconFormatIndentIncreaseElement>;
            "rux-icon-format-italic": LocalJSX.RuxIconFormatItalic & JSXBase.HTMLAttributes<HTMLRuxIconFormatItalicElement>;
            "rux-icon-format-line-spacing": LocalJSX.RuxIconFormatLineSpacing & JSXBase.HTMLAttributes<HTMLRuxIconFormatLineSpacingElement>;
            "rux-icon-format-list-bulleted": LocalJSX.RuxIconFormatListBulleted & JSXBase.HTMLAttributes<HTMLRuxIconFormatListBulletedElement>;
            "rux-icon-format-list-numbered": LocalJSX.RuxIconFormatListNumbered & JSXBase.HTMLAttributes<HTMLRuxIconFormatListNumberedElement>;
            "rux-icon-format-list-numbered-rtl": LocalJSX.RuxIconFormatListNumberedRtl & JSXBase.HTMLAttributes<HTMLRuxIconFormatListNumberedRtlElement>;
            "rux-icon-format-paint": LocalJSX.RuxIconFormatPaint & JSXBase.HTMLAttributes<HTMLRuxIconFormatPaintElement>;
            "rux-icon-format-quote": LocalJSX.RuxIconFormatQuote & JSXBase.HTMLAttributes<HTMLRuxIconFormatQuoteElement>;
            "rux-icon-format-shapes": LocalJSX.RuxIconFormatShapes & JSXBase.HTMLAttributes<HTMLRuxIconFormatShapesElement>;
            "rux-icon-format-size": LocalJSX.RuxIconFormatSize & JSXBase.HTMLAttributes<HTMLRuxIconFormatSizeElement>;
            "rux-icon-format-strikethrough": LocalJSX.RuxIconFormatStrikethrough & JSXBase.HTMLAttributes<HTMLRuxIconFormatStrikethroughElement>;
            "rux-icon-format-textdirection-l-to-r": LocalJSX.RuxIconFormatTextdirectionLToR & JSXBase.HTMLAttributes<HTMLRuxIconFormatTextdirectionLToRElement>;
            "rux-icon-format-textdirection-r-to-l": LocalJSX.RuxIconFormatTextdirectionRToL & JSXBase.HTMLAttributes<HTMLRuxIconFormatTextdirectionRToLElement>;
            "rux-icon-format-underlined": LocalJSX.RuxIconFormatUnderlined & JSXBase.HTMLAttributes<HTMLRuxIconFormatUnderlinedElement>;
            "rux-icon-forum": LocalJSX.RuxIconForum & JSXBase.HTMLAttributes<HTMLRuxIconForumElement>;
            "rux-icon-forward": LocalJSX.RuxIconForward & JSXBase.HTMLAttributes<HTMLRuxIconForwardElement>;
            "rux-icon-forward-10": LocalJSX.RuxIconForward10 & JSXBase.HTMLAttributes<HTMLRuxIconForward10Element>;
            "rux-icon-forward-30": LocalJSX.RuxIconForward30 & JSXBase.HTMLAttributes<HTMLRuxIconForward30Element>;
            "rux-icon-forward-5": LocalJSX.RuxIconForward5 & JSXBase.HTMLAttributes<HTMLRuxIconForward5Element>;
            "rux-icon-free-breakfast": LocalJSX.RuxIconFreeBreakfast & JSXBase.HTMLAttributes<HTMLRuxIconFreeBreakfastElement>;
            "rux-icon-fullscreen": LocalJSX.RuxIconFullscreen & JSXBase.HTMLAttributes<HTMLRuxIconFullscreenElement>;
            "rux-icon-fullscreen-exit": LocalJSX.RuxIconFullscreenExit & JSXBase.HTMLAttributes<HTMLRuxIconFullscreenExitElement>;
            "rux-icon-functions": LocalJSX.RuxIconFunctions & JSXBase.HTMLAttributes<HTMLRuxIconFunctionsElement>;
            "rux-icon-g-translate": LocalJSX.RuxIconGTranslate & JSXBase.HTMLAttributes<HTMLRuxIconGTranslateElement>;
            "rux-icon-gamepad": LocalJSX.RuxIconGamepad & JSXBase.HTMLAttributes<HTMLRuxIconGamepadElement>;
            "rux-icon-games": LocalJSX.RuxIconGames & JSXBase.HTMLAttributes<HTMLRuxIconGamesElement>;
            "rux-icon-gavel": LocalJSX.RuxIconGavel & JSXBase.HTMLAttributes<HTMLRuxIconGavelElement>;
            "rux-icon-gesture": LocalJSX.RuxIconGesture & JSXBase.HTMLAttributes<HTMLRuxIconGestureElement>;
            "rux-icon-get-app": LocalJSX.RuxIconGetApp & JSXBase.HTMLAttributes<HTMLRuxIconGetAppElement>;
            "rux-icon-gif": LocalJSX.RuxIconGif & JSXBase.HTMLAttributes<HTMLRuxIconGifElement>;
            "rux-icon-golf-course": LocalJSX.RuxIconGolfCourse & JSXBase.HTMLAttributes<HTMLRuxIconGolfCourseElement>;
            "rux-icon-gps-fixed": LocalJSX.RuxIconGpsFixed & JSXBase.HTMLAttributes<HTMLRuxIconGpsFixedElement>;
            "rux-icon-gps-not-fixed": LocalJSX.RuxIconGpsNotFixed & JSXBase.HTMLAttributes<HTMLRuxIconGpsNotFixedElement>;
            "rux-icon-gps-off": LocalJSX.RuxIconGpsOff & JSXBase.HTMLAttributes<HTMLRuxIconGpsOffElement>;
            "rux-icon-grade": LocalJSX.RuxIconGrade & JSXBase.HTMLAttributes<HTMLRuxIconGradeElement>;
            "rux-icon-gradient": LocalJSX.RuxIconGradient & JSXBase.HTMLAttributes<HTMLRuxIconGradientElement>;
            "rux-icon-grain": LocalJSX.RuxIconGrain & JSXBase.HTMLAttributes<HTMLRuxIconGrainElement>;
            "rux-icon-graphic-eq": LocalJSX.RuxIconGraphicEq & JSXBase.HTMLAttributes<HTMLRuxIconGraphicEqElement>;
            "rux-icon-grid-off": LocalJSX.RuxIconGridOff & JSXBase.HTMLAttributes<HTMLRuxIconGridOffElement>;
            "rux-icon-grid-on": LocalJSX.RuxIconGridOn & JSXBase.HTMLAttributes<HTMLRuxIconGridOnElement>;
            "rux-icon-group": LocalJSX.RuxIconGroup & JSXBase.HTMLAttributes<HTMLRuxIconGroupElement>;
            "rux-icon-group-add": LocalJSX.RuxIconGroupAdd & JSXBase.HTMLAttributes<HTMLRuxIconGroupAddElement>;
            "rux-icon-group-work": LocalJSX.RuxIconGroupWork & JSXBase.HTMLAttributes<HTMLRuxIconGroupWorkElement>;
            "rux-icon-hd": LocalJSX.RuxIconHd & JSXBase.HTMLAttributes<HTMLRuxIconHdElement>;
            "rux-icon-hdr-off": LocalJSX.RuxIconHdrOff & JSXBase.HTMLAttributes<HTMLRuxIconHdrOffElement>;
            "rux-icon-hdr-on": LocalJSX.RuxIconHdrOn & JSXBase.HTMLAttributes<HTMLRuxIconHdrOnElement>;
            "rux-icon-hdr-strong": LocalJSX.RuxIconHdrStrong & JSXBase.HTMLAttributes<HTMLRuxIconHdrStrongElement>;
            "rux-icon-hdr-weak": LocalJSX.RuxIconHdrWeak & JSXBase.HTMLAttributes<HTMLRuxIconHdrWeakElement>;
            "rux-icon-headset": LocalJSX.RuxIconHeadset & JSXBase.HTMLAttributes<HTMLRuxIconHeadsetElement>;
            "rux-icon-headset-mic": LocalJSX.RuxIconHeadsetMic & JSXBase.HTMLAttributes<HTMLRuxIconHeadsetMicElement>;
            "rux-icon-healing": LocalJSX.RuxIconHealing & JSXBase.HTMLAttributes<HTMLRuxIconHealingElement>;
            "rux-icon-hearing": LocalJSX.RuxIconHearing & JSXBase.HTMLAttributes<HTMLRuxIconHearingElement>;
            "rux-icon-help": LocalJSX.RuxIconHelp & JSXBase.HTMLAttributes<HTMLRuxIconHelpElement>;
            "rux-icon-help-outline": LocalJSX.RuxIconHelpOutline & JSXBase.HTMLAttributes<HTMLRuxIconHelpOutlineElement>;
            "rux-icon-high-quality": LocalJSX.RuxIconHighQuality & JSXBase.HTMLAttributes<HTMLRuxIconHighQualityElement>;
            "rux-icon-highlight": LocalJSX.RuxIconHighlight & JSXBase.HTMLAttributes<HTMLRuxIconHighlightElement>;
            "rux-icon-highlight-off": LocalJSX.RuxIconHighlightOff & JSXBase.HTMLAttributes<HTMLRuxIconHighlightOffElement>;
            "rux-icon-history": LocalJSX.RuxIconHistory & JSXBase.HTMLAttributes<HTMLRuxIconHistoryElement>;
            "rux-icon-home": LocalJSX.RuxIconHome & JSXBase.HTMLAttributes<HTMLRuxIconHomeElement>;
            "rux-icon-horizontal-split": LocalJSX.RuxIconHorizontalSplit & JSXBase.HTMLAttributes<HTMLRuxIconHorizontalSplitElement>;
            "rux-icon-hot-tub": LocalJSX.RuxIconHotTub & JSXBase.HTMLAttributes<HTMLRuxIconHotTubElement>;
            "rux-icon-hotel": LocalJSX.RuxIconHotel & JSXBase.HTMLAttributes<HTMLRuxIconHotelElement>;
            "rux-icon-hourglass-empty": LocalJSX.RuxIconHourglassEmpty & JSXBase.HTMLAttributes<HTMLRuxIconHourglassEmptyElement>;
            "rux-icon-hourglass-full": LocalJSX.RuxIconHourglassFull & JSXBase.HTMLAttributes<HTMLRuxIconHourglassFullElement>;
            "rux-icon-how-to-reg": LocalJSX.RuxIconHowToReg & JSXBase.HTMLAttributes<HTMLRuxIconHowToRegElement>;
            "rux-icon-how-to-vote": LocalJSX.RuxIconHowToVote & JSXBase.HTMLAttributes<HTMLRuxIconHowToVoteElement>;
            "rux-icon-http": LocalJSX.RuxIconHttp & JSXBase.HTMLAttributes<HTMLRuxIconHttpElement>;
            "rux-icon-https": LocalJSX.RuxIconHttps & JSXBase.HTMLAttributes<HTMLRuxIconHttpsElement>;
            "rux-icon-image": LocalJSX.RuxIconImage & JSXBase.HTMLAttributes<HTMLRuxIconImageElement>;
            "rux-icon-image-aspect-ratio": LocalJSX.RuxIconImageAspectRatio & JSXBase.HTMLAttributes<HTMLRuxIconImageAspectRatioElement>;
            "rux-icon-image-search": LocalJSX.RuxIconImageSearch & JSXBase.HTMLAttributes<HTMLRuxIconImageSearchElement>;
            "rux-icon-import-contacts": LocalJSX.RuxIconImportContacts & JSXBase.HTMLAttributes<HTMLRuxIconImportContactsElement>;
            "rux-icon-import-export": LocalJSX.RuxIconImportExport & JSXBase.HTMLAttributes<HTMLRuxIconImportExportElement>;
            "rux-icon-important-devices": LocalJSX.RuxIconImportantDevices & JSXBase.HTMLAttributes<HTMLRuxIconImportantDevicesElement>;
            "rux-icon-inbox": LocalJSX.RuxIconInbox & JSXBase.HTMLAttributes<HTMLRuxIconInboxElement>;
            "rux-icon-indeterminate-check-box": LocalJSX.RuxIconIndeterminateCheckBox & JSXBase.HTMLAttributes<HTMLRuxIconIndeterminateCheckBoxElement>;
            "rux-icon-info": LocalJSX.RuxIconInfo & JSXBase.HTMLAttributes<HTMLRuxIconInfoElement>;
            "rux-icon-input": LocalJSX.RuxIconInput & JSXBase.HTMLAttributes<HTMLRuxIconInputElement>;
            "rux-icon-insert-chart": LocalJSX.RuxIconInsertChart & JSXBase.HTMLAttributes<HTMLRuxIconInsertChartElement>;
            "rux-icon-insert-chart-outlined": LocalJSX.RuxIconInsertChartOutlined & JSXBase.HTMLAttributes<HTMLRuxIconInsertChartOutlinedElement>;
            "rux-icon-insert-comment": LocalJSX.RuxIconInsertComment & JSXBase.HTMLAttributes<HTMLRuxIconInsertCommentElement>;
            "rux-icon-insert-drive-file": LocalJSX.RuxIconInsertDriveFile & JSXBase.HTMLAttributes<HTMLRuxIconInsertDriveFileElement>;
            "rux-icon-insert-emoticon": LocalJSX.RuxIconInsertEmoticon & JSXBase.HTMLAttributes<HTMLRuxIconInsertEmoticonElement>;
            "rux-icon-insert-invitation": LocalJSX.RuxIconInsertInvitation & JSXBase.HTMLAttributes<HTMLRuxIconInsertInvitationElement>;
            "rux-icon-insert-link": LocalJSX.RuxIconInsertLink & JSXBase.HTMLAttributes<HTMLRuxIconInsertLinkElement>;
            "rux-icon-insert-photo": LocalJSX.RuxIconInsertPhoto & JSXBase.HTMLAttributes<HTMLRuxIconInsertPhotoElement>;
            "rux-icon-invert-colors": LocalJSX.RuxIconInvertColors & JSXBase.HTMLAttributes<HTMLRuxIconInvertColorsElement>;
            "rux-icon-invert-colors-off": LocalJSX.RuxIconInvertColorsOff & JSXBase.HTMLAttributes<HTMLRuxIconInvertColorsOffElement>;
            "rux-icon-iso": LocalJSX.RuxIconIso & JSXBase.HTMLAttributes<HTMLRuxIconIsoElement>;
            "rux-icon-keyboard": LocalJSX.RuxIconKeyboard & JSXBase.HTMLAttributes<HTMLRuxIconKeyboardElement>;
            "rux-icon-keyboard-arrow-down": LocalJSX.RuxIconKeyboardArrowDown & JSXBase.HTMLAttributes<HTMLRuxIconKeyboardArrowDownElement>;
            "rux-icon-keyboard-arrow-left": LocalJSX.RuxIconKeyboardArrowLeft & JSXBase.HTMLAttributes<HTMLRuxIconKeyboardArrowLeftElement>;
            "rux-icon-keyboard-arrow-right": LocalJSX.RuxIconKeyboardArrowRight & JSXBase.HTMLAttributes<HTMLRuxIconKeyboardArrowRightElement>;
            "rux-icon-keyboard-arrow-up": LocalJSX.RuxIconKeyboardArrowUp & JSXBase.HTMLAttributes<HTMLRuxIconKeyboardArrowUpElement>;
            "rux-icon-keyboard-backspace": LocalJSX.RuxIconKeyboardBackspace & JSXBase.HTMLAttributes<HTMLRuxIconKeyboardBackspaceElement>;
            "rux-icon-keyboard-capslock": LocalJSX.RuxIconKeyboardCapslock & JSXBase.HTMLAttributes<HTMLRuxIconKeyboardCapslockElement>;
            "rux-icon-keyboard-hide": LocalJSX.RuxIconKeyboardHide & JSXBase.HTMLAttributes<HTMLRuxIconKeyboardHideElement>;
            "rux-icon-keyboard-return": LocalJSX.RuxIconKeyboardReturn & JSXBase.HTMLAttributes<HTMLRuxIconKeyboardReturnElement>;
            "rux-icon-keyboard-tab": LocalJSX.RuxIconKeyboardTab & JSXBase.HTMLAttributes<HTMLRuxIconKeyboardTabElement>;
            "rux-icon-keyboard-voice": LocalJSX.RuxIconKeyboardVoice & JSXBase.HTMLAttributes<HTMLRuxIconKeyboardVoiceElement>;
            "rux-icon-kitchen": LocalJSX.RuxIconKitchen & JSXBase.HTMLAttributes<HTMLRuxIconKitchenElement>;
            "rux-icon-label": LocalJSX.RuxIconLabel & JSXBase.HTMLAttributes<HTMLRuxIconLabelElement>;
            "rux-icon-label-important": LocalJSX.RuxIconLabelImportant & JSXBase.HTMLAttributes<HTMLRuxIconLabelImportantElement>;
            "rux-icon-label-off": LocalJSX.RuxIconLabelOff & JSXBase.HTMLAttributes<HTMLRuxIconLabelOffElement>;
            "rux-icon-landscape": LocalJSX.RuxIconLandscape & JSXBase.HTMLAttributes<HTMLRuxIconLandscapeElement>;
            "rux-icon-language": LocalJSX.RuxIconLanguage & JSXBase.HTMLAttributes<HTMLRuxIconLanguageElement>;
            "rux-icon-laptop": LocalJSX.RuxIconLaptop & JSXBase.HTMLAttributes<HTMLRuxIconLaptopElement>;
            "rux-icon-laptop-chromebook": LocalJSX.RuxIconLaptopChromebook & JSXBase.HTMLAttributes<HTMLRuxIconLaptopChromebookElement>;
            "rux-icon-laptop-mac": LocalJSX.RuxIconLaptopMac & JSXBase.HTMLAttributes<HTMLRuxIconLaptopMacElement>;
            "rux-icon-laptop-windows": LocalJSX.RuxIconLaptopWindows & JSXBase.HTMLAttributes<HTMLRuxIconLaptopWindowsElement>;
            "rux-icon-last-page": LocalJSX.RuxIconLastPage & JSXBase.HTMLAttributes<HTMLRuxIconLastPageElement>;
            "rux-icon-launch": LocalJSX.RuxIconLaunch & JSXBase.HTMLAttributes<HTMLRuxIconLaunchElement>;
            "rux-icon-layers": LocalJSX.RuxIconLayers & JSXBase.HTMLAttributes<HTMLRuxIconLayersElement>;
            "rux-icon-layers-clear": LocalJSX.RuxIconLayersClear & JSXBase.HTMLAttributes<HTMLRuxIconLayersClearElement>;
            "rux-icon-leak-add": LocalJSX.RuxIconLeakAdd & JSXBase.HTMLAttributes<HTMLRuxIconLeakAddElement>;
            "rux-icon-leak-remove": LocalJSX.RuxIconLeakRemove & JSXBase.HTMLAttributes<HTMLRuxIconLeakRemoveElement>;
            "rux-icon-lens": LocalJSX.RuxIconLens & JSXBase.HTMLAttributes<HTMLRuxIconLensElement>;
            "rux-icon-library-add": LocalJSX.RuxIconLibraryAdd & JSXBase.HTMLAttributes<HTMLRuxIconLibraryAddElement>;
            "rux-icon-library-books": LocalJSX.RuxIconLibraryBooks & JSXBase.HTMLAttributes<HTMLRuxIconLibraryBooksElement>;
            "rux-icon-library-music": LocalJSX.RuxIconLibraryMusic & JSXBase.HTMLAttributes<HTMLRuxIconLibraryMusicElement>;
            "rux-icon-line-style": LocalJSX.RuxIconLineStyle & JSXBase.HTMLAttributes<HTMLRuxIconLineStyleElement>;
            "rux-icon-line-weight": LocalJSX.RuxIconLineWeight & JSXBase.HTMLAttributes<HTMLRuxIconLineWeightElement>;
            "rux-icon-linear-scale": LocalJSX.RuxIconLinearScale & JSXBase.HTMLAttributes<HTMLRuxIconLinearScaleElement>;
            "rux-icon-link": LocalJSX.RuxIconLink & JSXBase.HTMLAttributes<HTMLRuxIconLinkElement>;
            "rux-icon-link-off": LocalJSX.RuxIconLinkOff & JSXBase.HTMLAttributes<HTMLRuxIconLinkOffElement>;
            "rux-icon-linked-camera": LocalJSX.RuxIconLinkedCamera & JSXBase.HTMLAttributes<HTMLRuxIconLinkedCameraElement>;
            "rux-icon-list": LocalJSX.RuxIconList & JSXBase.HTMLAttributes<HTMLRuxIconListElement>;
            "rux-icon-list-alt": LocalJSX.RuxIconListAlt & JSXBase.HTMLAttributes<HTMLRuxIconListAltElement>;
            "rux-icon-live-help": LocalJSX.RuxIconLiveHelp & JSXBase.HTMLAttributes<HTMLRuxIconLiveHelpElement>;
            "rux-icon-live-tv": LocalJSX.RuxIconLiveTv & JSXBase.HTMLAttributes<HTMLRuxIconLiveTvElement>;
            "rux-icon-local-activity": LocalJSX.RuxIconLocalActivity & JSXBase.HTMLAttributes<HTMLRuxIconLocalActivityElement>;
            "rux-icon-local-airport": LocalJSX.RuxIconLocalAirport & JSXBase.HTMLAttributes<HTMLRuxIconLocalAirportElement>;
            "rux-icon-local-atm": LocalJSX.RuxIconLocalAtm & JSXBase.HTMLAttributes<HTMLRuxIconLocalAtmElement>;
            "rux-icon-local-bar": LocalJSX.RuxIconLocalBar & JSXBase.HTMLAttributes<HTMLRuxIconLocalBarElement>;
            "rux-icon-local-cafe": LocalJSX.RuxIconLocalCafe & JSXBase.HTMLAttributes<HTMLRuxIconLocalCafeElement>;
            "rux-icon-local-convenience-store": LocalJSX.RuxIconLocalConvenienceStore & JSXBase.HTMLAttributes<HTMLRuxIconLocalConvenienceStoreElement>;
            "rux-icon-local-dining": LocalJSX.RuxIconLocalDining & JSXBase.HTMLAttributes<HTMLRuxIconLocalDiningElement>;
            "rux-icon-local-drink": LocalJSX.RuxIconLocalDrink & JSXBase.HTMLAttributes<HTMLRuxIconLocalDrinkElement>;
            "rux-icon-local-gas-station": LocalJSX.RuxIconLocalGasStation & JSXBase.HTMLAttributes<HTMLRuxIconLocalGasStationElement>;
            "rux-icon-local-grocery-store": LocalJSX.RuxIconLocalGroceryStore & JSXBase.HTMLAttributes<HTMLRuxIconLocalGroceryStoreElement>;
            "rux-icon-local-hospital": LocalJSX.RuxIconLocalHospital & JSXBase.HTMLAttributes<HTMLRuxIconLocalHospitalElement>;
            "rux-icon-local-hotel": LocalJSX.RuxIconLocalHotel & JSXBase.HTMLAttributes<HTMLRuxIconLocalHotelElement>;
            "rux-icon-local-laundry-service": LocalJSX.RuxIconLocalLaundryService & JSXBase.HTMLAttributes<HTMLRuxIconLocalLaundryServiceElement>;
            "rux-icon-local-library": LocalJSX.RuxIconLocalLibrary & JSXBase.HTMLAttributes<HTMLRuxIconLocalLibraryElement>;
            "rux-icon-local-mall": LocalJSX.RuxIconLocalMall & JSXBase.HTMLAttributes<HTMLRuxIconLocalMallElement>;
            "rux-icon-local-movies": LocalJSX.RuxIconLocalMovies & JSXBase.HTMLAttributes<HTMLRuxIconLocalMoviesElement>;
            "rux-icon-local-offer": LocalJSX.RuxIconLocalOffer & JSXBase.HTMLAttributes<HTMLRuxIconLocalOfferElement>;
            "rux-icon-local-parking": LocalJSX.RuxIconLocalParking & JSXBase.HTMLAttributes<HTMLRuxIconLocalParkingElement>;
            "rux-icon-local-pharmacy": LocalJSX.RuxIconLocalPharmacy & JSXBase.HTMLAttributes<HTMLRuxIconLocalPharmacyElement>;
            "rux-icon-local-phone": LocalJSX.RuxIconLocalPhone & JSXBase.HTMLAttributes<HTMLRuxIconLocalPhoneElement>;
            "rux-icon-local-play": LocalJSX.RuxIconLocalPlay & JSXBase.HTMLAttributes<HTMLRuxIconLocalPlayElement>;
            "rux-icon-local-post-office": LocalJSX.RuxIconLocalPostOffice & JSXBase.HTMLAttributes<HTMLRuxIconLocalPostOfficeElement>;
            "rux-icon-local-printshop": LocalJSX.RuxIconLocalPrintshop & JSXBase.HTMLAttributes<HTMLRuxIconLocalPrintshopElement>;
            "rux-icon-local-see": LocalJSX.RuxIconLocalSee & JSXBase.HTMLAttributes<HTMLRuxIconLocalSeeElement>;
            "rux-icon-local-shipping": LocalJSX.RuxIconLocalShipping & JSXBase.HTMLAttributes<HTMLRuxIconLocalShippingElement>;
            "rux-icon-local-taxi": LocalJSX.RuxIconLocalTaxi & JSXBase.HTMLAttributes<HTMLRuxIconLocalTaxiElement>;
            "rux-icon-location-city": LocalJSX.RuxIconLocationCity & JSXBase.HTMLAttributes<HTMLRuxIconLocationCityElement>;
            "rux-icon-location-disabled": LocalJSX.RuxIconLocationDisabled & JSXBase.HTMLAttributes<HTMLRuxIconLocationDisabledElement>;
            "rux-icon-location-off": LocalJSX.RuxIconLocationOff & JSXBase.HTMLAttributes<HTMLRuxIconLocationOffElement>;
            "rux-icon-location-on": LocalJSX.RuxIconLocationOn & JSXBase.HTMLAttributes<HTMLRuxIconLocationOnElement>;
            "rux-icon-location-searching": LocalJSX.RuxIconLocationSearching & JSXBase.HTMLAttributes<HTMLRuxIconLocationSearchingElement>;
            "rux-icon-lock": LocalJSX.RuxIconLock & JSXBase.HTMLAttributes<HTMLRuxIconLockElement>;
            "rux-icon-lock-open": LocalJSX.RuxIconLockOpen & JSXBase.HTMLAttributes<HTMLRuxIconLockOpenElement>;
            "rux-icon-looks": LocalJSX.RuxIconLooks & JSXBase.HTMLAttributes<HTMLRuxIconLooksElement>;
            "rux-icon-looks-1": LocalJSX.RuxIconLooks1 & JSXBase.HTMLAttributes<HTMLRuxIconLooks1Element>;
            "rux-icon-looks-2": LocalJSX.RuxIconLooks2 & JSXBase.HTMLAttributes<HTMLRuxIconLooks2Element>;
            "rux-icon-looks-3": LocalJSX.RuxIconLooks3 & JSXBase.HTMLAttributes<HTMLRuxIconLooks3Element>;
            "rux-icon-looks-4": LocalJSX.RuxIconLooks4 & JSXBase.HTMLAttributes<HTMLRuxIconLooks4Element>;
            "rux-icon-looks-5": LocalJSX.RuxIconLooks5 & JSXBase.HTMLAttributes<HTMLRuxIconLooks5Element>;
            "rux-icon-looks-6": LocalJSX.RuxIconLooks6 & JSXBase.HTMLAttributes<HTMLRuxIconLooks6Element>;
            "rux-icon-loop": LocalJSX.RuxIconLoop & JSXBase.HTMLAttributes<HTMLRuxIconLoopElement>;
            "rux-icon-loupe": LocalJSX.RuxIconLoupe & JSXBase.HTMLAttributes<HTMLRuxIconLoupeElement>;
            "rux-icon-low-priority": LocalJSX.RuxIconLowPriority & JSXBase.HTMLAttributes<HTMLRuxIconLowPriorityElement>;
            "rux-icon-loyalty": LocalJSX.RuxIconLoyalty & JSXBase.HTMLAttributes<HTMLRuxIconLoyaltyElement>;
            "rux-icon-mail": LocalJSX.RuxIconMail & JSXBase.HTMLAttributes<HTMLRuxIconMailElement>;
            "rux-icon-mail-outline": LocalJSX.RuxIconMailOutline & JSXBase.HTMLAttributes<HTMLRuxIconMailOutlineElement>;
            "rux-icon-map": LocalJSX.RuxIconMap & JSXBase.HTMLAttributes<HTMLRuxIconMapElement>;
            "rux-icon-markunread": LocalJSX.RuxIconMarkunread & JSXBase.HTMLAttributes<HTMLRuxIconMarkunreadElement>;
            "rux-icon-markunread-mailbox": LocalJSX.RuxIconMarkunreadMailbox & JSXBase.HTMLAttributes<HTMLRuxIconMarkunreadMailboxElement>;
            "rux-icon-maximize": LocalJSX.RuxIconMaximize & JSXBase.HTMLAttributes<HTMLRuxIconMaximizeElement>;
            "rux-icon-meeting-room": LocalJSX.RuxIconMeetingRoom & JSXBase.HTMLAttributes<HTMLRuxIconMeetingRoomElement>;
            "rux-icon-memory": LocalJSX.RuxIconMemory & JSXBase.HTMLAttributes<HTMLRuxIconMemoryElement>;
            "rux-icon-menu": LocalJSX.RuxIconMenu & JSXBase.HTMLAttributes<HTMLRuxIconMenuElement>;
            "rux-icon-merge-type": LocalJSX.RuxIconMergeType & JSXBase.HTMLAttributes<HTMLRuxIconMergeTypeElement>;
            "rux-icon-message": LocalJSX.RuxIconMessage & JSXBase.HTMLAttributes<HTMLRuxIconMessageElement>;
            "rux-icon-mic": LocalJSX.RuxIconMic & JSXBase.HTMLAttributes<HTMLRuxIconMicElement>;
            "rux-icon-mic-none": LocalJSX.RuxIconMicNone & JSXBase.HTMLAttributes<HTMLRuxIconMicNoneElement>;
            "rux-icon-mic-off": LocalJSX.RuxIconMicOff & JSXBase.HTMLAttributes<HTMLRuxIconMicOffElement>;
            "rux-icon-minimize": LocalJSX.RuxIconMinimize & JSXBase.HTMLAttributes<HTMLRuxIconMinimizeElement>;
            "rux-icon-missed-video-call": LocalJSX.RuxIconMissedVideoCall & JSXBase.HTMLAttributes<HTMLRuxIconMissedVideoCallElement>;
            "rux-icon-mission": LocalJSX.RuxIconMission & JSXBase.HTMLAttributes<HTMLRuxIconMissionElement>;
            "rux-icon-mms": LocalJSX.RuxIconMms & JSXBase.HTMLAttributes<HTMLRuxIconMmsElement>;
            "rux-icon-mobile-friendly": LocalJSX.RuxIconMobileFriendly & JSXBase.HTMLAttributes<HTMLRuxIconMobileFriendlyElement>;
            "rux-icon-mobile-off": LocalJSX.RuxIconMobileOff & JSXBase.HTMLAttributes<HTMLRuxIconMobileOffElement>;
            "rux-icon-mobile-screen-share": LocalJSX.RuxIconMobileScreenShare & JSXBase.HTMLAttributes<HTMLRuxIconMobileScreenShareElement>;
            "rux-icon-mode-comment": LocalJSX.RuxIconModeComment & JSXBase.HTMLAttributes<HTMLRuxIconModeCommentElement>;
            "rux-icon-monetization-on": LocalJSX.RuxIconMonetizationOn & JSXBase.HTMLAttributes<HTMLRuxIconMonetizationOnElement>;
            "rux-icon-money": LocalJSX.RuxIconMoney & JSXBase.HTMLAttributes<HTMLRuxIconMoneyElement>;
            "rux-icon-money-off": LocalJSX.RuxIconMoneyOff & JSXBase.HTMLAttributes<HTMLRuxIconMoneyOffElement>;
            "rux-icon-monochrome-photos": LocalJSX.RuxIconMonochromePhotos & JSXBase.HTMLAttributes<HTMLRuxIconMonochromePhotosElement>;
            "rux-icon-mood": LocalJSX.RuxIconMood & JSXBase.HTMLAttributes<HTMLRuxIconMoodElement>;
            "rux-icon-mood-bad": LocalJSX.RuxIconMoodBad & JSXBase.HTMLAttributes<HTMLRuxIconMoodBadElement>;
            "rux-icon-more": LocalJSX.RuxIconMore & JSXBase.HTMLAttributes<HTMLRuxIconMoreElement>;
            "rux-icon-more-horiz": LocalJSX.RuxIconMoreHoriz & JSXBase.HTMLAttributes<HTMLRuxIconMoreHorizElement>;
            "rux-icon-more-vert": LocalJSX.RuxIconMoreVert & JSXBase.HTMLAttributes<HTMLRuxIconMoreVertElement>;
            "rux-icon-motorcycle": LocalJSX.RuxIconMotorcycle & JSXBase.HTMLAttributes<HTMLRuxIconMotorcycleElement>;
            "rux-icon-mouse": LocalJSX.RuxIconMouse & JSXBase.HTMLAttributes<HTMLRuxIconMouseElement>;
            "rux-icon-move-to-inbox": LocalJSX.RuxIconMoveToInbox & JSXBase.HTMLAttributes<HTMLRuxIconMoveToInboxElement>;
            "rux-icon-movie": LocalJSX.RuxIconMovie & JSXBase.HTMLAttributes<HTMLRuxIconMovieElement>;
            "rux-icon-movie-creation": LocalJSX.RuxIconMovieCreation & JSXBase.HTMLAttributes<HTMLRuxIconMovieCreationElement>;
            "rux-icon-movie-filter": LocalJSX.RuxIconMovieFilter & JSXBase.HTMLAttributes<HTMLRuxIconMovieFilterElement>;
            "rux-icon-multiline-chart": LocalJSX.RuxIconMultilineChart & JSXBase.HTMLAttributes<HTMLRuxIconMultilineChartElement>;
            "rux-icon-music-note": LocalJSX.RuxIconMusicNote & JSXBase.HTMLAttributes<HTMLRuxIconMusicNoteElement>;
            "rux-icon-music-off": LocalJSX.RuxIconMusicOff & JSXBase.HTMLAttributes<HTMLRuxIconMusicOffElement>;
            "rux-icon-music-video": LocalJSX.RuxIconMusicVideo & JSXBase.HTMLAttributes<HTMLRuxIconMusicVideoElement>;
            "rux-icon-my-location": LocalJSX.RuxIconMyLocation & JSXBase.HTMLAttributes<HTMLRuxIconMyLocationElement>;
            "rux-icon-nature": LocalJSX.RuxIconNature & JSXBase.HTMLAttributes<HTMLRuxIconNatureElement>;
            "rux-icon-nature-people": LocalJSX.RuxIconNaturePeople & JSXBase.HTMLAttributes<HTMLRuxIconNaturePeopleElement>;
            "rux-icon-navigate-before": LocalJSX.RuxIconNavigateBefore & JSXBase.HTMLAttributes<HTMLRuxIconNavigateBeforeElement>;
            "rux-icon-navigate-next": LocalJSX.RuxIconNavigateNext & JSXBase.HTMLAttributes<HTMLRuxIconNavigateNextElement>;
            "rux-icon-navigation": LocalJSX.RuxIconNavigation & JSXBase.HTMLAttributes<HTMLRuxIconNavigationElement>;
            "rux-icon-near-me": LocalJSX.RuxIconNearMe & JSXBase.HTMLAttributes<HTMLRuxIconNearMeElement>;
            "rux-icon-netcom": LocalJSX.RuxIconNetcom & JSXBase.HTMLAttributes<HTMLRuxIconNetcomElement>;
            "rux-icon-network-cell": LocalJSX.RuxIconNetworkCell & JSXBase.HTMLAttributes<HTMLRuxIconNetworkCellElement>;
            "rux-icon-network-check": LocalJSX.RuxIconNetworkCheck & JSXBase.HTMLAttributes<HTMLRuxIconNetworkCheckElement>;
            "rux-icon-network-locked": LocalJSX.RuxIconNetworkLocked & JSXBase.HTMLAttributes<HTMLRuxIconNetworkLockedElement>;
            "rux-icon-network-wifi": LocalJSX.RuxIconNetworkWifi & JSXBase.HTMLAttributes<HTMLRuxIconNetworkWifiElement>;
            "rux-icon-new-releases": LocalJSX.RuxIconNewReleases & JSXBase.HTMLAttributes<HTMLRuxIconNewReleasesElement>;
            "rux-icon-next-week": LocalJSX.RuxIconNextWeek & JSXBase.HTMLAttributes<HTMLRuxIconNextWeekElement>;
            "rux-icon-nfc": LocalJSX.RuxIconNfc & JSXBase.HTMLAttributes<HTMLRuxIconNfcElement>;
            "rux-icon-no-encryption": LocalJSX.RuxIconNoEncryption & JSXBase.HTMLAttributes<HTMLRuxIconNoEncryptionElement>;
            "rux-icon-no-meeting-room": LocalJSX.RuxIconNoMeetingRoom & JSXBase.HTMLAttributes<HTMLRuxIconNoMeetingRoomElement>;
            "rux-icon-no-sim": LocalJSX.RuxIconNoSim & JSXBase.HTMLAttributes<HTMLRuxIconNoSimElement>;
            "rux-icon-not-interested": LocalJSX.RuxIconNotInterested & JSXBase.HTMLAttributes<HTMLRuxIconNotInterestedElement>;
            "rux-icon-not-listed-location": LocalJSX.RuxIconNotListedLocation & JSXBase.HTMLAttributes<HTMLRuxIconNotListedLocationElement>;
            "rux-icon-note": LocalJSX.RuxIconNote & JSXBase.HTMLAttributes<HTMLRuxIconNoteElement>;
            "rux-icon-note-add": LocalJSX.RuxIconNoteAdd & JSXBase.HTMLAttributes<HTMLRuxIconNoteAddElement>;
            "rux-icon-notes": LocalJSX.RuxIconNotes & JSXBase.HTMLAttributes<HTMLRuxIconNotesElement>;
            "rux-icon-notification-important": LocalJSX.RuxIconNotificationImportant & JSXBase.HTMLAttributes<HTMLRuxIconNotificationImportantElement>;
            "rux-icon-notifications": LocalJSX.RuxIconNotifications & JSXBase.HTMLAttributes<HTMLRuxIconNotificationsElement>;
            "rux-icon-notifications-active": LocalJSX.RuxIconNotificationsActive & JSXBase.HTMLAttributes<HTMLRuxIconNotificationsActiveElement>;
            "rux-icon-notifications-none": LocalJSX.RuxIconNotificationsNone & JSXBase.HTMLAttributes<HTMLRuxIconNotificationsNoneElement>;
            "rux-icon-notifications-off": LocalJSX.RuxIconNotificationsOff & JSXBase.HTMLAttributes<HTMLRuxIconNotificationsOffElement>;
            "rux-icon-notifications-paused": LocalJSX.RuxIconNotificationsPaused & JSXBase.HTMLAttributes<HTMLRuxIconNotificationsPausedElement>;
            "rux-icon-offline-bolt": LocalJSX.RuxIconOfflineBolt & JSXBase.HTMLAttributes<HTMLRuxIconOfflineBoltElement>;
            "rux-icon-offline-pin": LocalJSX.RuxIconOfflinePin & JSXBase.HTMLAttributes<HTMLRuxIconOfflinePinElement>;
            "rux-icon-ondemand-video": LocalJSX.RuxIconOndemandVideo & JSXBase.HTMLAttributes<HTMLRuxIconOndemandVideoElement>;
            "rux-icon-opacity": LocalJSX.RuxIconOpacity & JSXBase.HTMLAttributes<HTMLRuxIconOpacityElement>;
            "rux-icon-open-in-browser": LocalJSX.RuxIconOpenInBrowser & JSXBase.HTMLAttributes<HTMLRuxIconOpenInBrowserElement>;
            "rux-icon-open-in-new": LocalJSX.RuxIconOpenInNew & JSXBase.HTMLAttributes<HTMLRuxIconOpenInNewElement>;
            "rux-icon-open-with": LocalJSX.RuxIconOpenWith & JSXBase.HTMLAttributes<HTMLRuxIconOpenWithElement>;
            "rux-icon-outlined-flag": LocalJSX.RuxIconOutlinedFlag & JSXBase.HTMLAttributes<HTMLRuxIconOutlinedFlagElement>;
            "rux-icon-pages": LocalJSX.RuxIconPages & JSXBase.HTMLAttributes<HTMLRuxIconPagesElement>;
            "rux-icon-pageview": LocalJSX.RuxIconPageview & JSXBase.HTMLAttributes<HTMLRuxIconPageviewElement>;
            "rux-icon-palette": LocalJSX.RuxIconPalette & JSXBase.HTMLAttributes<HTMLRuxIconPaletteElement>;
            "rux-icon-pan-tool": LocalJSX.RuxIconPanTool & JSXBase.HTMLAttributes<HTMLRuxIconPanToolElement>;
            "rux-icon-panorama": LocalJSX.RuxIconPanorama & JSXBase.HTMLAttributes<HTMLRuxIconPanoramaElement>;
            "rux-icon-panorama-fish-eye": LocalJSX.RuxIconPanoramaFishEye & JSXBase.HTMLAttributes<HTMLRuxIconPanoramaFishEyeElement>;
            "rux-icon-panorama-horizontal": LocalJSX.RuxIconPanoramaHorizontal & JSXBase.HTMLAttributes<HTMLRuxIconPanoramaHorizontalElement>;
            "rux-icon-panorama-vertical": LocalJSX.RuxIconPanoramaVertical & JSXBase.HTMLAttributes<HTMLRuxIconPanoramaVerticalElement>;
            "rux-icon-panorama-wide-angle": LocalJSX.RuxIconPanoramaWideAngle & JSXBase.HTMLAttributes<HTMLRuxIconPanoramaWideAngleElement>;
            "rux-icon-party-mode": LocalJSX.RuxIconPartyMode & JSXBase.HTMLAttributes<HTMLRuxIconPartyModeElement>;
            "rux-icon-pause": LocalJSX.RuxIconPause & JSXBase.HTMLAttributes<HTMLRuxIconPauseElement>;
            "rux-icon-pause-circle-filled": LocalJSX.RuxIconPauseCircleFilled & JSXBase.HTMLAttributes<HTMLRuxIconPauseCircleFilledElement>;
            "rux-icon-pause-circle-outline": LocalJSX.RuxIconPauseCircleOutline & JSXBase.HTMLAttributes<HTMLRuxIconPauseCircleOutlineElement>;
            "rux-icon-pause-presentation": LocalJSX.RuxIconPausePresentation & JSXBase.HTMLAttributes<HTMLRuxIconPausePresentationElement>;
            "rux-icon-payload": LocalJSX.RuxIconPayload & JSXBase.HTMLAttributes<HTMLRuxIconPayloadElement>;
            "rux-icon-payment": LocalJSX.RuxIconPayment & JSXBase.HTMLAttributes<HTMLRuxIconPaymentElement>;
            "rux-icon-people-outline": LocalJSX.RuxIconPeopleOutline & JSXBase.HTMLAttributes<HTMLRuxIconPeopleOutlineElement>;
            "rux-icon-perm-camera-mic": LocalJSX.RuxIconPermCameraMic & JSXBase.HTMLAttributes<HTMLRuxIconPermCameraMicElement>;
            "rux-icon-perm-contact-calendar": LocalJSX.RuxIconPermContactCalendar & JSXBase.HTMLAttributes<HTMLRuxIconPermContactCalendarElement>;
            "rux-icon-perm-data-setting": LocalJSX.RuxIconPermDataSetting & JSXBase.HTMLAttributes<HTMLRuxIconPermDataSettingElement>;
            "rux-icon-perm-device-information": LocalJSX.RuxIconPermDeviceInformation & JSXBase.HTMLAttributes<HTMLRuxIconPermDeviceInformationElement>;
            "rux-icon-perm-identity": LocalJSX.RuxIconPermIdentity & JSXBase.HTMLAttributes<HTMLRuxIconPermIdentityElement>;
            "rux-icon-perm-media": LocalJSX.RuxIconPermMedia & JSXBase.HTMLAttributes<HTMLRuxIconPermMediaElement>;
            "rux-icon-perm-phone-msg": LocalJSX.RuxIconPermPhoneMsg & JSXBase.HTMLAttributes<HTMLRuxIconPermPhoneMsgElement>;
            "rux-icon-perm-scan-wifi": LocalJSX.RuxIconPermScanWifi & JSXBase.HTMLAttributes<HTMLRuxIconPermScanWifiElement>;
            "rux-icon-person": LocalJSX.RuxIconPerson & JSXBase.HTMLAttributes<HTMLRuxIconPersonElement>;
            "rux-icon-person-add": LocalJSX.RuxIconPersonAdd & JSXBase.HTMLAttributes<HTMLRuxIconPersonAddElement>;
            "rux-icon-person-add-disabled": LocalJSX.RuxIconPersonAddDisabled & JSXBase.HTMLAttributes<HTMLRuxIconPersonAddDisabledElement>;
            "rux-icon-person-outline": LocalJSX.RuxIconPersonOutline & JSXBase.HTMLAttributes<HTMLRuxIconPersonOutlineElement>;
            "rux-icon-person-pin": LocalJSX.RuxIconPersonPin & JSXBase.HTMLAttributes<HTMLRuxIconPersonPinElement>;
            "rux-icon-person-pin-circle": LocalJSX.RuxIconPersonPinCircle & JSXBase.HTMLAttributes<HTMLRuxIconPersonPinCircleElement>;
            "rux-icon-personal-video": LocalJSX.RuxIconPersonalVideo & JSXBase.HTMLAttributes<HTMLRuxIconPersonalVideoElement>;
            "rux-icon-pets": LocalJSX.RuxIconPets & JSXBase.HTMLAttributes<HTMLRuxIconPetsElement>;
            "rux-icon-phone": LocalJSX.RuxIconPhone & JSXBase.HTMLAttributes<HTMLRuxIconPhoneElement>;
            "rux-icon-phone-android": LocalJSX.RuxIconPhoneAndroid & JSXBase.HTMLAttributes<HTMLRuxIconPhoneAndroidElement>;
            "rux-icon-phone-bluetooth-speaker": LocalJSX.RuxIconPhoneBluetoothSpeaker & JSXBase.HTMLAttributes<HTMLRuxIconPhoneBluetoothSpeakerElement>;
            "rux-icon-phone-callback": LocalJSX.RuxIconPhoneCallback & JSXBase.HTMLAttributes<HTMLRuxIconPhoneCallbackElement>;
            "rux-icon-phone-forwarded": LocalJSX.RuxIconPhoneForwarded & JSXBase.HTMLAttributes<HTMLRuxIconPhoneForwardedElement>;
            "rux-icon-phone-in-talk": LocalJSX.RuxIconPhoneInTalk & JSXBase.HTMLAttributes<HTMLRuxIconPhoneInTalkElement>;
            "rux-icon-phone-iphone": LocalJSX.RuxIconPhoneIphone & JSXBase.HTMLAttributes<HTMLRuxIconPhoneIphoneElement>;
            "rux-icon-phone-locked": LocalJSX.RuxIconPhoneLocked & JSXBase.HTMLAttributes<HTMLRuxIconPhoneLockedElement>;
            "rux-icon-phone-missed": LocalJSX.RuxIconPhoneMissed & JSXBase.HTMLAttributes<HTMLRuxIconPhoneMissedElement>;
            "rux-icon-phone-paused": LocalJSX.RuxIconPhonePaused & JSXBase.HTMLAttributes<HTMLRuxIconPhonePausedElement>;
            "rux-icon-phonelink": LocalJSX.RuxIconPhonelink & JSXBase.HTMLAttributes<HTMLRuxIconPhonelinkElement>;
            "rux-icon-phonelink-erase": LocalJSX.RuxIconPhonelinkErase & JSXBase.HTMLAttributes<HTMLRuxIconPhonelinkEraseElement>;
            "rux-icon-phonelink-lock": LocalJSX.RuxIconPhonelinkLock & JSXBase.HTMLAttributes<HTMLRuxIconPhonelinkLockElement>;
            "rux-icon-phonelink-off": LocalJSX.RuxIconPhonelinkOff & JSXBase.HTMLAttributes<HTMLRuxIconPhonelinkOffElement>;
            "rux-icon-phonelink-ring": LocalJSX.RuxIconPhonelinkRing & JSXBase.HTMLAttributes<HTMLRuxIconPhonelinkRingElement>;
            "rux-icon-phonelink-setup": LocalJSX.RuxIconPhonelinkSetup & JSXBase.HTMLAttributes<HTMLRuxIconPhonelinkSetupElement>;
            "rux-icon-photo": LocalJSX.RuxIconPhoto & JSXBase.HTMLAttributes<HTMLRuxIconPhotoElement>;
            "rux-icon-photo-album": LocalJSX.RuxIconPhotoAlbum & JSXBase.HTMLAttributes<HTMLRuxIconPhotoAlbumElement>;
            "rux-icon-photo-camera": LocalJSX.RuxIconPhotoCamera & JSXBase.HTMLAttributes<HTMLRuxIconPhotoCameraElement>;
            "rux-icon-photo-filter": LocalJSX.RuxIconPhotoFilter & JSXBase.HTMLAttributes<HTMLRuxIconPhotoFilterElement>;
            "rux-icon-photo-library": LocalJSX.RuxIconPhotoLibrary & JSXBase.HTMLAttributes<HTMLRuxIconPhotoLibraryElement>;
            "rux-icon-photo-size-select-actual": LocalJSX.RuxIconPhotoSizeSelectActual & JSXBase.HTMLAttributes<HTMLRuxIconPhotoSizeSelectActualElement>;
            "rux-icon-photo-size-select-large": LocalJSX.RuxIconPhotoSizeSelectLarge & JSXBase.HTMLAttributes<HTMLRuxIconPhotoSizeSelectLargeElement>;
            "rux-icon-photo-size-select-small": LocalJSX.RuxIconPhotoSizeSelectSmall & JSXBase.HTMLAttributes<HTMLRuxIconPhotoSizeSelectSmallElement>;
            "rux-icon-picture-as-pdf": LocalJSX.RuxIconPictureAsPdf & JSXBase.HTMLAttributes<HTMLRuxIconPictureAsPdfElement>;
            "rux-icon-picture-in-picture": LocalJSX.RuxIconPictureInPicture & JSXBase.HTMLAttributes<HTMLRuxIconPictureInPictureElement>;
            "rux-icon-picture-in-picture-alt": LocalJSX.RuxIconPictureInPictureAlt & JSXBase.HTMLAttributes<HTMLRuxIconPictureInPictureAltElement>;
            "rux-icon-pie-chart": LocalJSX.RuxIconPieChart & JSXBase.HTMLAttributes<HTMLRuxIconPieChartElement>;
            "rux-icon-pin-drop": LocalJSX.RuxIconPinDrop & JSXBase.HTMLAttributes<HTMLRuxIconPinDropElement>;
            "rux-icon-place": LocalJSX.RuxIconPlace & JSXBase.HTMLAttributes<HTMLRuxIconPlaceElement>;
            "rux-icon-play-arrow": LocalJSX.RuxIconPlayArrow & JSXBase.HTMLAttributes<HTMLRuxIconPlayArrowElement>;
            "rux-icon-play-circle-filled": LocalJSX.RuxIconPlayCircleFilled & JSXBase.HTMLAttributes<HTMLRuxIconPlayCircleFilledElement>;
            "rux-icon-play-circle-filled-white": LocalJSX.RuxIconPlayCircleFilledWhite & JSXBase.HTMLAttributes<HTMLRuxIconPlayCircleFilledWhiteElement>;
            "rux-icon-play-circle-outline": LocalJSX.RuxIconPlayCircleOutline & JSXBase.HTMLAttributes<HTMLRuxIconPlayCircleOutlineElement>;
            "rux-icon-play-for-work": LocalJSX.RuxIconPlayForWork & JSXBase.HTMLAttributes<HTMLRuxIconPlayForWorkElement>;
            "rux-icon-playlist-add": LocalJSX.RuxIconPlaylistAdd & JSXBase.HTMLAttributes<HTMLRuxIconPlaylistAddElement>;
            "rux-icon-playlist-add-check": LocalJSX.RuxIconPlaylistAddCheck & JSXBase.HTMLAttributes<HTMLRuxIconPlaylistAddCheckElement>;
            "rux-icon-playlist-play": LocalJSX.RuxIconPlaylistPlay & JSXBase.HTMLAttributes<HTMLRuxIconPlaylistPlayElement>;
            "rux-icon-plus-one": LocalJSX.RuxIconPlusOne & JSXBase.HTMLAttributes<HTMLRuxIconPlusOneElement>;
            "rux-icon-poll": LocalJSX.RuxIconPoll & JSXBase.HTMLAttributes<HTMLRuxIconPollElement>;
            "rux-icon-pool": LocalJSX.RuxIconPool & JSXBase.HTMLAttributes<HTMLRuxIconPoolElement>;
            "rux-icon-portable-wifi-off": LocalJSX.RuxIconPortableWifiOff & JSXBase.HTMLAttributes<HTMLRuxIconPortableWifiOffElement>;
            "rux-icon-portrait": LocalJSX.RuxIconPortrait & JSXBase.HTMLAttributes<HTMLRuxIconPortraitElement>;
            "rux-icon-power": LocalJSX.RuxIconPower & JSXBase.HTMLAttributes<HTMLRuxIconPowerElement>;
            "rux-icon-power-input": LocalJSX.RuxIconPowerInput & JSXBase.HTMLAttributes<HTMLRuxIconPowerInputElement>;
            "rux-icon-power-off": LocalJSX.RuxIconPowerOff & JSXBase.HTMLAttributes<HTMLRuxIconPowerOffElement>;
            "rux-icon-power-settings-new": LocalJSX.RuxIconPowerSettingsNew & JSXBase.HTMLAttributes<HTMLRuxIconPowerSettingsNewElement>;
            "rux-icon-pregnant-woman": LocalJSX.RuxIconPregnantWoman & JSXBase.HTMLAttributes<HTMLRuxIconPregnantWomanElement>;
            "rux-icon-present-to-all": LocalJSX.RuxIconPresentToAll & JSXBase.HTMLAttributes<HTMLRuxIconPresentToAllElement>;
            "rux-icon-print": LocalJSX.RuxIconPrint & JSXBase.HTMLAttributes<HTMLRuxIconPrintElement>;
            "rux-icon-print-disabled": LocalJSX.RuxIconPrintDisabled & JSXBase.HTMLAttributes<HTMLRuxIconPrintDisabledElement>;
            "rux-icon-priority-high": LocalJSX.RuxIconPriorityHigh & JSXBase.HTMLAttributes<HTMLRuxIconPriorityHighElement>;
            "rux-icon-processor": LocalJSX.RuxIconProcessor & JSXBase.HTMLAttributes<HTMLRuxIconProcessorElement>;
            "rux-icon-processor-alt": LocalJSX.RuxIconProcessorAlt & JSXBase.HTMLAttributes<HTMLRuxIconProcessorAltElement>;
            "rux-icon-propulsion-power": LocalJSX.RuxIconPropulsionPower & JSXBase.HTMLAttributes<HTMLRuxIconPropulsionPowerElement>;
            "rux-icon-public": LocalJSX.RuxIconPublic & JSXBase.HTMLAttributes<HTMLRuxIconPublicElement>;
            "rux-icon-publish": LocalJSX.RuxIconPublish & JSXBase.HTMLAttributes<HTMLRuxIconPublishElement>;
            "rux-icon-query-builder": LocalJSX.RuxIconQueryBuilder & JSXBase.HTMLAttributes<HTMLRuxIconQueryBuilderElement>;
            "rux-icon-question-answer": LocalJSX.RuxIconQuestionAnswer & JSXBase.HTMLAttributes<HTMLRuxIconQuestionAnswerElement>;
            "rux-icon-queue": LocalJSX.RuxIconQueue & JSXBase.HTMLAttributes<HTMLRuxIconQueueElement>;
            "rux-icon-queue-music": LocalJSX.RuxIconQueueMusic & JSXBase.HTMLAttributes<HTMLRuxIconQueueMusicElement>;
            "rux-icon-queue-play-next": LocalJSX.RuxIconQueuePlayNext & JSXBase.HTMLAttributes<HTMLRuxIconQueuePlayNextElement>;
            "rux-icon-radio": LocalJSX.RuxIconRadio & JSXBase.HTMLAttributes<HTMLRuxIconRadioElement>;
            "rux-icon-radio-button-checked": LocalJSX.RuxIconRadioButtonChecked & JSXBase.HTMLAttributes<HTMLRuxIconRadioButtonCheckedElement>;
            "rux-icon-radio-button-unchecked": LocalJSX.RuxIconRadioButtonUnchecked & JSXBase.HTMLAttributes<HTMLRuxIconRadioButtonUncheckedElement>;
            "rux-icon-rate-review": LocalJSX.RuxIconRateReview & JSXBase.HTMLAttributes<HTMLRuxIconRateReviewElement>;
            "rux-icon-receipt": LocalJSX.RuxIconReceipt & JSXBase.HTMLAttributes<HTMLRuxIconReceiptElement>;
            "rux-icon-recent-actors": LocalJSX.RuxIconRecentActors & JSXBase.HTMLAttributes<HTMLRuxIconRecentActorsElement>;
            "rux-icon-record-voice-over": LocalJSX.RuxIconRecordVoiceOver & JSXBase.HTMLAttributes<HTMLRuxIconRecordVoiceOverElement>;
            "rux-icon-redeem": LocalJSX.RuxIconRedeem & JSXBase.HTMLAttributes<HTMLRuxIconRedeemElement>;
            "rux-icon-redo": LocalJSX.RuxIconRedo & JSXBase.HTMLAttributes<HTMLRuxIconRedoElement>;
            "rux-icon-refresh": LocalJSX.RuxIconRefresh & JSXBase.HTMLAttributes<HTMLRuxIconRefreshElement>;
            "rux-icon-remove": LocalJSX.RuxIconRemove & JSXBase.HTMLAttributes<HTMLRuxIconRemoveElement>;
            "rux-icon-remove-circle": LocalJSX.RuxIconRemoveCircle & JSXBase.HTMLAttributes<HTMLRuxIconRemoveCircleElement>;
            "rux-icon-remove-circle-outline": LocalJSX.RuxIconRemoveCircleOutline & JSXBase.HTMLAttributes<HTMLRuxIconRemoveCircleOutlineElement>;
            "rux-icon-remove-from-queue": LocalJSX.RuxIconRemoveFromQueue & JSXBase.HTMLAttributes<HTMLRuxIconRemoveFromQueueElement>;
            "rux-icon-remove-red-eye": LocalJSX.RuxIconRemoveRedEye & JSXBase.HTMLAttributes<HTMLRuxIconRemoveRedEyeElement>;
            "rux-icon-remove-shopping-cart": LocalJSX.RuxIconRemoveShoppingCart & JSXBase.HTMLAttributes<HTMLRuxIconRemoveShoppingCartElement>;
            "rux-icon-reorder": LocalJSX.RuxIconReorder & JSXBase.HTMLAttributes<HTMLRuxIconReorderElement>;
            "rux-icon-repeat": LocalJSX.RuxIconRepeat & JSXBase.HTMLAttributes<HTMLRuxIconRepeatElement>;
            "rux-icon-repeat-one": LocalJSX.RuxIconRepeatOne & JSXBase.HTMLAttributes<HTMLRuxIconRepeatOneElement>;
            "rux-icon-replay": LocalJSX.RuxIconReplay & JSXBase.HTMLAttributes<HTMLRuxIconReplayElement>;
            "rux-icon-replay-10": LocalJSX.RuxIconReplay10 & JSXBase.HTMLAttributes<HTMLRuxIconReplay10Element>;
            "rux-icon-replay-30": LocalJSX.RuxIconReplay30 & JSXBase.HTMLAttributes<HTMLRuxIconReplay30Element>;
            "rux-icon-replay-5": LocalJSX.RuxIconReplay5 & JSXBase.HTMLAttributes<HTMLRuxIconReplay5Element>;
            "rux-icon-reply": LocalJSX.RuxIconReply & JSXBase.HTMLAttributes<HTMLRuxIconReplyElement>;
            "rux-icon-reply-all": LocalJSX.RuxIconReplyAll & JSXBase.HTMLAttributes<HTMLRuxIconReplyAllElement>;
            "rux-icon-report": LocalJSX.RuxIconReport & JSXBase.HTMLAttributes<HTMLRuxIconReportElement>;
            "rux-icon-report-off": LocalJSX.RuxIconReportOff & JSXBase.HTMLAttributes<HTMLRuxIconReportOffElement>;
            "rux-icon-report-problem": LocalJSX.RuxIconReportProblem & JSXBase.HTMLAttributes<HTMLRuxIconReportProblemElement>;
            "rux-icon-restaurant": LocalJSX.RuxIconRestaurant & JSXBase.HTMLAttributes<HTMLRuxIconRestaurantElement>;
            "rux-icon-restaurant-menu": LocalJSX.RuxIconRestaurantMenu & JSXBase.HTMLAttributes<HTMLRuxIconRestaurantMenuElement>;
            "rux-icon-restore": LocalJSX.RuxIconRestore & JSXBase.HTMLAttributes<HTMLRuxIconRestoreElement>;
            "rux-icon-restore-from-trash": LocalJSX.RuxIconRestoreFromTrash & JSXBase.HTMLAttributes<HTMLRuxIconRestoreFromTrashElement>;
            "rux-icon-restore-page": LocalJSX.RuxIconRestorePage & JSXBase.HTMLAttributes<HTMLRuxIconRestorePageElement>;
            "rux-icon-ring-volume": LocalJSX.RuxIconRingVolume & JSXBase.HTMLAttributes<HTMLRuxIconRingVolumeElement>;
            "rux-icon-room": LocalJSX.RuxIconRoom & JSXBase.HTMLAttributes<HTMLRuxIconRoomElement>;
            "rux-icon-room-service": LocalJSX.RuxIconRoomService & JSXBase.HTMLAttributes<HTMLRuxIconRoomServiceElement>;
            "rux-icon-rotate-90-degrees-cc": LocalJSX.RuxIconRotate90DegreesCc & JSXBase.HTMLAttributes<HTMLRuxIconRotate90DegreesCcElement>;
            "rux-icon-rotate-left": LocalJSX.RuxIconRotateLeft & JSXBase.HTMLAttributes<HTMLRuxIconRotateLeftElement>;
            "rux-icon-rotate-right": LocalJSX.RuxIconRotateRight & JSXBase.HTMLAttributes<HTMLRuxIconRotateRightElement>;
            "rux-icon-rounded-corner": LocalJSX.RuxIconRoundedCorner & JSXBase.HTMLAttributes<HTMLRuxIconRoundedCornerElement>;
            "rux-icon-router": LocalJSX.RuxIconRouter & JSXBase.HTMLAttributes<HTMLRuxIconRouterElement>;
            "rux-icon-rowing": LocalJSX.RuxIconRowing & JSXBase.HTMLAttributes<HTMLRuxIconRowingElement>;
            "rux-icon-rss-feed": LocalJSX.RuxIconRssFeed & JSXBase.HTMLAttributes<HTMLRuxIconRssFeedElement>;
            "rux-icon-rv-hookup": LocalJSX.RuxIconRvHookup & JSXBase.HTMLAttributes<HTMLRuxIconRvHookupElement>;
            "rux-icon-satellite": LocalJSX.RuxIconSatellite & JSXBase.HTMLAttributes<HTMLRuxIconSatelliteElement>;
            "rux-icon-satellite-off": LocalJSX.RuxIconSatelliteOff & JSXBase.HTMLAttributes<HTMLRuxIconSatelliteOffElement>;
            "rux-icon-satellite-receive": LocalJSX.RuxIconSatelliteReceive & JSXBase.HTMLAttributes<HTMLRuxIconSatelliteReceiveElement>;
            "rux-icon-satellite-transmit": LocalJSX.RuxIconSatelliteTransmit & JSXBase.HTMLAttributes<HTMLRuxIconSatelliteTransmitElement>;
            "rux-icon-save": LocalJSX.RuxIconSave & JSXBase.HTMLAttributes<HTMLRuxIconSaveElement>;
            "rux-icon-save-alt": LocalJSX.RuxIconSaveAlt & JSXBase.HTMLAttributes<HTMLRuxIconSaveAltElement>;
            "rux-icon-scanner": LocalJSX.RuxIconScanner & JSXBase.HTMLAttributes<HTMLRuxIconScannerElement>;
            "rux-icon-scatter-plot": LocalJSX.RuxIconScatterPlot & JSXBase.HTMLAttributes<HTMLRuxIconScatterPlotElement>;
            "rux-icon-schedule": LocalJSX.RuxIconSchedule & JSXBase.HTMLAttributes<HTMLRuxIconScheduleElement>;
            "rux-icon-school": LocalJSX.RuxIconSchool & JSXBase.HTMLAttributes<HTMLRuxIconSchoolElement>;
            "rux-icon-score": LocalJSX.RuxIconScore & JSXBase.HTMLAttributes<HTMLRuxIconScoreElement>;
            "rux-icon-screen-lock-landscape": LocalJSX.RuxIconScreenLockLandscape & JSXBase.HTMLAttributes<HTMLRuxIconScreenLockLandscapeElement>;
            "rux-icon-screen-lock-portrait": LocalJSX.RuxIconScreenLockPortrait & JSXBase.HTMLAttributes<HTMLRuxIconScreenLockPortraitElement>;
            "rux-icon-screen-lock-rotation": LocalJSX.RuxIconScreenLockRotation & JSXBase.HTMLAttributes<HTMLRuxIconScreenLockRotationElement>;
            "rux-icon-screen-rotation": LocalJSX.RuxIconScreenRotation & JSXBase.HTMLAttributes<HTMLRuxIconScreenRotationElement>;
            "rux-icon-screen-share": LocalJSX.RuxIconScreenShare & JSXBase.HTMLAttributes<HTMLRuxIconScreenShareElement>;
            "rux-icon-sd-card": LocalJSX.RuxIconSdCard & JSXBase.HTMLAttributes<HTMLRuxIconSdCardElement>;
            "rux-icon-sd-storage": LocalJSX.RuxIconSdStorage & JSXBase.HTMLAttributes<HTMLRuxIconSdStorageElement>;
            "rux-icon-search": LocalJSX.RuxIconSearch & JSXBase.HTMLAttributes<HTMLRuxIconSearchElement>;
            "rux-icon-seat": LocalJSX.RuxIconSeat & JSXBase.HTMLAttributes<HTMLRuxIconSeatElement>;
            "rux-icon-security": LocalJSX.RuxIconSecurity & JSXBase.HTMLAttributes<HTMLRuxIconSecurityElement>;
            "rux-icon-select-all": LocalJSX.RuxIconSelectAll & JSXBase.HTMLAttributes<HTMLRuxIconSelectAllElement>;
            "rux-icon-send": LocalJSX.RuxIconSend & JSXBase.HTMLAttributes<HTMLRuxIconSendElement>;
            "rux-icon-sentiment-dissatisfied": LocalJSX.RuxIconSentimentDissatisfied & JSXBase.HTMLAttributes<HTMLRuxIconSentimentDissatisfiedElement>;
            "rux-icon-sentiment-satisfied": LocalJSX.RuxIconSentimentSatisfied & JSXBase.HTMLAttributes<HTMLRuxIconSentimentSatisfiedElement>;
            "rux-icon-sentiment-satisfied-alt": LocalJSX.RuxIconSentimentSatisfiedAlt & JSXBase.HTMLAttributes<HTMLRuxIconSentimentSatisfiedAltElement>;
            "rux-icon-sentiment-very-dissatisfied": LocalJSX.RuxIconSentimentVeryDissatisfied & JSXBase.HTMLAttributes<HTMLRuxIconSentimentVeryDissatisfiedElement>;
            "rux-icon-sentiment-very-satisfied": LocalJSX.RuxIconSentimentVerySatisfied & JSXBase.HTMLAttributes<HTMLRuxIconSentimentVerySatisfiedElement>;
            "rux-icon-settings": LocalJSX.RuxIconSettings & JSXBase.HTMLAttributes<HTMLRuxIconSettingsElement>;
            "rux-icon-settings-applications": LocalJSX.RuxIconSettingsApplications & JSXBase.HTMLAttributes<HTMLRuxIconSettingsApplicationsElement>;
            "rux-icon-settings-backup-restore": LocalJSX.RuxIconSettingsBackupRestore & JSXBase.HTMLAttributes<HTMLRuxIconSettingsBackupRestoreElement>;
            "rux-icon-settings-bluetooth": LocalJSX.RuxIconSettingsBluetooth & JSXBase.HTMLAttributes<HTMLRuxIconSettingsBluetoothElement>;
            "rux-icon-settings-brightness": LocalJSX.RuxIconSettingsBrightness & JSXBase.HTMLAttributes<HTMLRuxIconSettingsBrightnessElement>;
            "rux-icon-settings-cell": LocalJSX.RuxIconSettingsCell & JSXBase.HTMLAttributes<HTMLRuxIconSettingsCellElement>;
            "rux-icon-settings-ethernet": LocalJSX.RuxIconSettingsEthernet & JSXBase.HTMLAttributes<HTMLRuxIconSettingsEthernetElement>;
            "rux-icon-settings-input-antenna": LocalJSX.RuxIconSettingsInputAntenna & JSXBase.HTMLAttributes<HTMLRuxIconSettingsInputAntennaElement>;
            "rux-icon-settings-input-component": LocalJSX.RuxIconSettingsInputComponent & JSXBase.HTMLAttributes<HTMLRuxIconSettingsInputComponentElement>;
            "rux-icon-settings-input-composite": LocalJSX.RuxIconSettingsInputComposite & JSXBase.HTMLAttributes<HTMLRuxIconSettingsInputCompositeElement>;
            "rux-icon-settings-input-hdmi": LocalJSX.RuxIconSettingsInputHdmi & JSXBase.HTMLAttributes<HTMLRuxIconSettingsInputHdmiElement>;
            "rux-icon-settings-input-svideo": LocalJSX.RuxIconSettingsInputSvideo & JSXBase.HTMLAttributes<HTMLRuxIconSettingsInputSvideoElement>;
            "rux-icon-settings-overscan": LocalJSX.RuxIconSettingsOverscan & JSXBase.HTMLAttributes<HTMLRuxIconSettingsOverscanElement>;
            "rux-icon-settings-phone": LocalJSX.RuxIconSettingsPhone & JSXBase.HTMLAttributes<HTMLRuxIconSettingsPhoneElement>;
            "rux-icon-settings-power": LocalJSX.RuxIconSettingsPower & JSXBase.HTMLAttributes<HTMLRuxIconSettingsPowerElement>;
            "rux-icon-settings-remote": LocalJSX.RuxIconSettingsRemote & JSXBase.HTMLAttributes<HTMLRuxIconSettingsRemoteElement>;
            "rux-icon-settings-system-daydream": LocalJSX.RuxIconSettingsSystemDaydream & JSXBase.HTMLAttributes<HTMLRuxIconSettingsSystemDaydreamElement>;
            "rux-icon-settings-voice": LocalJSX.RuxIconSettingsVoice & JSXBase.HTMLAttributes<HTMLRuxIconSettingsVoiceElement>;
            "rux-icon-share": LocalJSX.RuxIconShare & JSXBase.HTMLAttributes<HTMLRuxIconShareElement>;
            "rux-icon-shop": LocalJSX.RuxIconShop & JSXBase.HTMLAttributes<HTMLRuxIconShopElement>;
            "rux-icon-shop-two": LocalJSX.RuxIconShopTwo & JSXBase.HTMLAttributes<HTMLRuxIconShopTwoElement>;
            "rux-icon-shopping-basket": LocalJSX.RuxIconShoppingBasket & JSXBase.HTMLAttributes<HTMLRuxIconShoppingBasketElement>;
            "rux-icon-shopping-cart": LocalJSX.RuxIconShoppingCart & JSXBase.HTMLAttributes<HTMLRuxIconShoppingCartElement>;
            "rux-icon-short-text": LocalJSX.RuxIconShortText & JSXBase.HTMLAttributes<HTMLRuxIconShortTextElement>;
            "rux-icon-show-chart": LocalJSX.RuxIconShowChart & JSXBase.HTMLAttributes<HTMLRuxIconShowChartElement>;
            "rux-icon-shuffle": LocalJSX.RuxIconShuffle & JSXBase.HTMLAttributes<HTMLRuxIconShuffleElement>;
            "rux-icon-shutter-speed": LocalJSX.RuxIconShutterSpeed & JSXBase.HTMLAttributes<HTMLRuxIconShutterSpeedElement>;
            "rux-icon-signal-cellular-0-bar": LocalJSX.RuxIconSignalCellular0Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellular0BarElement>;
            "rux-icon-signal-cellular-1-bar": LocalJSX.RuxIconSignalCellular1Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellular1BarElement>;
            "rux-icon-signal-cellular-2-bar": LocalJSX.RuxIconSignalCellular2Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellular2BarElement>;
            "rux-icon-signal-cellular-3-bar": LocalJSX.RuxIconSignalCellular3Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellular3BarElement>;
            "rux-icon-signal-cellular-4-bar": LocalJSX.RuxIconSignalCellular4Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellular4BarElement>;
            "rux-icon-signal-cellular-alt": LocalJSX.RuxIconSignalCellularAlt & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellularAltElement>;
            "rux-icon-signal-cellular-connected-no-internet-0-bar": LocalJSX.RuxIconSignalCellularConnectedNoInternet0Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellularConnectedNoInternet0BarElement>;
            "rux-icon-signal-cellular-connected-no-internet-1-bar": LocalJSX.RuxIconSignalCellularConnectedNoInternet1Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellularConnectedNoInternet1BarElement>;
            "rux-icon-signal-cellular-connected-no-internet-2-bar": LocalJSX.RuxIconSignalCellularConnectedNoInternet2Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellularConnectedNoInternet2BarElement>;
            "rux-icon-signal-cellular-connected-no-internet-3-bar": LocalJSX.RuxIconSignalCellularConnectedNoInternet3Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellularConnectedNoInternet3BarElement>;
            "rux-icon-signal-cellular-connected-no-internet-4-bar": LocalJSX.RuxIconSignalCellularConnectedNoInternet4Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellularConnectedNoInternet4BarElement>;
            "rux-icon-signal-cellular-no-sim": LocalJSX.RuxIconSignalCellularNoSim & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellularNoSimElement>;
            "rux-icon-signal-cellular-null": LocalJSX.RuxIconSignalCellularNull & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellularNullElement>;
            "rux-icon-signal-cellular-off": LocalJSX.RuxIconSignalCellularOff & JSXBase.HTMLAttributes<HTMLRuxIconSignalCellularOffElement>;
            "rux-icon-signal-wifi-0-bar": LocalJSX.RuxIconSignalWifi0Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalWifi0BarElement>;
            "rux-icon-signal-wifi-1-bar": LocalJSX.RuxIconSignalWifi1Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalWifi1BarElement>;
            "rux-icon-signal-wifi-1-bar-lock": LocalJSX.RuxIconSignalWifi1BarLock & JSXBase.HTMLAttributes<HTMLRuxIconSignalWifi1BarLockElement>;
            "rux-icon-signal-wifi-2-bar": LocalJSX.RuxIconSignalWifi2Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalWifi2BarElement>;
            "rux-icon-signal-wifi-2-bar-lock": LocalJSX.RuxIconSignalWifi2BarLock & JSXBase.HTMLAttributes<HTMLRuxIconSignalWifi2BarLockElement>;
            "rux-icon-signal-wifi-3-bar": LocalJSX.RuxIconSignalWifi3Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalWifi3BarElement>;
            "rux-icon-signal-wifi-3-bar-lock": LocalJSX.RuxIconSignalWifi3BarLock & JSXBase.HTMLAttributes<HTMLRuxIconSignalWifi3BarLockElement>;
            "rux-icon-signal-wifi-4-bar": LocalJSX.RuxIconSignalWifi4Bar & JSXBase.HTMLAttributes<HTMLRuxIconSignalWifi4BarElement>;
            "rux-icon-signal-wifi-4-bar-lock": LocalJSX.RuxIconSignalWifi4BarLock & JSXBase.HTMLAttributes<HTMLRuxIconSignalWifi4BarLockElement>;
            "rux-icon-signal-wifi-off": LocalJSX.RuxIconSignalWifiOff & JSXBase.HTMLAttributes<HTMLRuxIconSignalWifiOffElement>;
            "rux-icon-sim-card": LocalJSX.RuxIconSimCard & JSXBase.HTMLAttributes<HTMLRuxIconSimCardElement>;
            "rux-icon-skip-next": LocalJSX.RuxIconSkipNext & JSXBase.HTMLAttributes<HTMLRuxIconSkipNextElement>;
            "rux-icon-skip-previous": LocalJSX.RuxIconSkipPrevious & JSXBase.HTMLAttributes<HTMLRuxIconSkipPreviousElement>;
            "rux-icon-slideshow": LocalJSX.RuxIconSlideshow & JSXBase.HTMLAttributes<HTMLRuxIconSlideshowElement>;
            "rux-icon-slow-motion-video": LocalJSX.RuxIconSlowMotionVideo & JSXBase.HTMLAttributes<HTMLRuxIconSlowMotionVideoElement>;
            "rux-icon-smartphone": LocalJSX.RuxIconSmartphone & JSXBase.HTMLAttributes<HTMLRuxIconSmartphoneElement>;
            "rux-icon-smoke-free": LocalJSX.RuxIconSmokeFree & JSXBase.HTMLAttributes<HTMLRuxIconSmokeFreeElement>;
            "rux-icon-smoking-rooms": LocalJSX.RuxIconSmokingRooms & JSXBase.HTMLAttributes<HTMLRuxIconSmokingRoomsElement>;
            "rux-icon-sms": LocalJSX.RuxIconSms & JSXBase.HTMLAttributes<HTMLRuxIconSmsElement>;
            "rux-icon-sms-failed": LocalJSX.RuxIconSmsFailed & JSXBase.HTMLAttributes<HTMLRuxIconSmsFailedElement>;
            "rux-icon-snooze": LocalJSX.RuxIconSnooze & JSXBase.HTMLAttributes<HTMLRuxIconSnoozeElement>;
            "rux-icon-solar": LocalJSX.RuxIconSolar & JSXBase.HTMLAttributes<HTMLRuxIconSolarElement>;
            "rux-icon-sort": LocalJSX.RuxIconSort & JSXBase.HTMLAttributes<HTMLRuxIconSortElement>;
            "rux-icon-sort-by-alpha": LocalJSX.RuxIconSortByAlpha & JSXBase.HTMLAttributes<HTMLRuxIconSortByAlphaElement>;
            "rux-icon-spa": LocalJSX.RuxIconSpa & JSXBase.HTMLAttributes<HTMLRuxIconSpaElement>;
            "rux-icon-space-bar": LocalJSX.RuxIconSpaceBar & JSXBase.HTMLAttributes<HTMLRuxIconSpaceBarElement>;
            "rux-icon-speaker": LocalJSX.RuxIconSpeaker & JSXBase.HTMLAttributes<HTMLRuxIconSpeakerElement>;
            "rux-icon-speaker-group": LocalJSX.RuxIconSpeakerGroup & JSXBase.HTMLAttributes<HTMLRuxIconSpeakerGroupElement>;
            "rux-icon-speaker-notes": LocalJSX.RuxIconSpeakerNotes & JSXBase.HTMLAttributes<HTMLRuxIconSpeakerNotesElement>;
            "rux-icon-speaker-notes-off": LocalJSX.RuxIconSpeakerNotesOff & JSXBase.HTMLAttributes<HTMLRuxIconSpeakerNotesOffElement>;
            "rux-icon-speaker-phone": LocalJSX.RuxIconSpeakerPhone & JSXBase.HTMLAttributes<HTMLRuxIconSpeakerPhoneElement>;
            "rux-icon-spellcheck": LocalJSX.RuxIconSpellcheck & JSXBase.HTMLAttributes<HTMLRuxIconSpellcheckElement>;
            "rux-icon-star": LocalJSX.RuxIconStar & JSXBase.HTMLAttributes<HTMLRuxIconStarElement>;
            "rux-icon-star-border": LocalJSX.RuxIconStarBorder & JSXBase.HTMLAttributes<HTMLRuxIconStarBorderElement>;
            "rux-icon-star-half": LocalJSX.RuxIconStarHalf & JSXBase.HTMLAttributes<HTMLRuxIconStarHalfElement>;
            "rux-icon-star-rate": LocalJSX.RuxIconStarRate & JSXBase.HTMLAttributes<HTMLRuxIconStarRateElement>;
            "rux-icon-stars": LocalJSX.RuxIconStars & JSXBase.HTMLAttributes<HTMLRuxIconStarsElement>;
            "rux-icon-stay-current-landscape": LocalJSX.RuxIconStayCurrentLandscape & JSXBase.HTMLAttributes<HTMLRuxIconStayCurrentLandscapeElement>;
            "rux-icon-stay-current-portrait": LocalJSX.RuxIconStayCurrentPortrait & JSXBase.HTMLAttributes<HTMLRuxIconStayCurrentPortraitElement>;
            "rux-icon-stay-primary-landscape": LocalJSX.RuxIconStayPrimaryLandscape & JSXBase.HTMLAttributes<HTMLRuxIconStayPrimaryLandscapeElement>;
            "rux-icon-stay-primary-portrait": LocalJSX.RuxIconStayPrimaryPortrait & JSXBase.HTMLAttributes<HTMLRuxIconStayPrimaryPortraitElement>;
            "rux-icon-stop": LocalJSX.RuxIconStop & JSXBase.HTMLAttributes<HTMLRuxIconStopElement>;
            "rux-icon-stop-screen-share": LocalJSX.RuxIconStopScreenShare & JSXBase.HTMLAttributes<HTMLRuxIconStopScreenShareElement>;
            "rux-icon-storage": LocalJSX.RuxIconStorage & JSXBase.HTMLAttributes<HTMLRuxIconStorageElement>;
            "rux-icon-store": LocalJSX.RuxIconStore & JSXBase.HTMLAttributes<HTMLRuxIconStoreElement>;
            "rux-icon-store-mall-directory": LocalJSX.RuxIconStoreMallDirectory & JSXBase.HTMLAttributes<HTMLRuxIconStoreMallDirectoryElement>;
            "rux-icon-straighten": LocalJSX.RuxIconStraighten & JSXBase.HTMLAttributes<HTMLRuxIconStraightenElement>;
            "rux-icon-streetview": LocalJSX.RuxIconStreetview & JSXBase.HTMLAttributes<HTMLRuxIconStreetviewElement>;
            "rux-icon-strikethrough-s": LocalJSX.RuxIconStrikethroughS & JSXBase.HTMLAttributes<HTMLRuxIconStrikethroughSElement>;
            "rux-icon-style": LocalJSX.RuxIconStyle & JSXBase.HTMLAttributes<HTMLRuxIconStyleElement>;
            "rux-icon-subdirectory-arrow-left": LocalJSX.RuxIconSubdirectoryArrowLeft & JSXBase.HTMLAttributes<HTMLRuxIconSubdirectoryArrowLeftElement>;
            "rux-icon-subdirectory-arrow-right": LocalJSX.RuxIconSubdirectoryArrowRight & JSXBase.HTMLAttributes<HTMLRuxIconSubdirectoryArrowRightElement>;
            "rux-icon-subject": LocalJSX.RuxIconSubject & JSXBase.HTMLAttributes<HTMLRuxIconSubjectElement>;
            "rux-icon-subscriptions": LocalJSX.RuxIconSubscriptions & JSXBase.HTMLAttributes<HTMLRuxIconSubscriptionsElement>;
            "rux-icon-subtitles": LocalJSX.RuxIconSubtitles & JSXBase.HTMLAttributes<HTMLRuxIconSubtitlesElement>;
            "rux-icon-subway": LocalJSX.RuxIconSubway & JSXBase.HTMLAttributes<HTMLRuxIconSubwayElement>;
            "rux-icon-supervised-user-circle": LocalJSX.RuxIconSupervisedUserCircle & JSXBase.HTMLAttributes<HTMLRuxIconSupervisedUserCircleElement>;
            "rux-icon-supervisor-account": LocalJSX.RuxIconSupervisorAccount & JSXBase.HTMLAttributes<HTMLRuxIconSupervisorAccountElement>;
            "rux-icon-surround-sound": LocalJSX.RuxIconSurroundSound & JSXBase.HTMLAttributes<HTMLRuxIconSurroundSoundElement>;
            "rux-icon-swap-calls": LocalJSX.RuxIconSwapCalls & JSXBase.HTMLAttributes<HTMLRuxIconSwapCallsElement>;
            "rux-icon-swap-horiz": LocalJSX.RuxIconSwapHoriz & JSXBase.HTMLAttributes<HTMLRuxIconSwapHorizElement>;
            "rux-icon-swap-horizontal-circle": LocalJSX.RuxIconSwapHorizontalCircle & JSXBase.HTMLAttributes<HTMLRuxIconSwapHorizontalCircleElement>;
            "rux-icon-swap-vert": LocalJSX.RuxIconSwapVert & JSXBase.HTMLAttributes<HTMLRuxIconSwapVertElement>;
            "rux-icon-swap-vertical-circle": LocalJSX.RuxIconSwapVerticalCircle & JSXBase.HTMLAttributes<HTMLRuxIconSwapVerticalCircleElement>;
            "rux-icon-switch-camera": LocalJSX.RuxIconSwitchCamera & JSXBase.HTMLAttributes<HTMLRuxIconSwitchCameraElement>;
            "rux-icon-switch-video": LocalJSX.RuxIconSwitchVideo & JSXBase.HTMLAttributes<HTMLRuxIconSwitchVideoElement>;
            "rux-icon-sync": LocalJSX.RuxIconSync & JSXBase.HTMLAttributes<HTMLRuxIconSyncElement>;
            "rux-icon-sync-disabled": LocalJSX.RuxIconSyncDisabled & JSXBase.HTMLAttributes<HTMLRuxIconSyncDisabledElement>;
            "rux-icon-sync-problem": LocalJSX.RuxIconSyncProblem & JSXBase.HTMLAttributes<HTMLRuxIconSyncProblemElement>;
            "rux-icon-system-update": LocalJSX.RuxIconSystemUpdate & JSXBase.HTMLAttributes<HTMLRuxIconSystemUpdateElement>;
            "rux-icon-tab": LocalJSX.RuxIconTab & JSXBase.HTMLAttributes<HTMLRuxIconTabElement>;
            "rux-icon-tab-unselected": LocalJSX.RuxIconTabUnselected & JSXBase.HTMLAttributes<HTMLRuxIconTabUnselectedElement>;
            "rux-icon-table-chart": LocalJSX.RuxIconTableChart & JSXBase.HTMLAttributes<HTMLRuxIconTableChartElement>;
            "rux-icon-tablet": LocalJSX.RuxIconTablet & JSXBase.HTMLAttributes<HTMLRuxIconTabletElement>;
            "rux-icon-tablet-android": LocalJSX.RuxIconTabletAndroid & JSXBase.HTMLAttributes<HTMLRuxIconTabletAndroidElement>;
            "rux-icon-tablet-mac": LocalJSX.RuxIconTabletMac & JSXBase.HTMLAttributes<HTMLRuxIconTabletMacElement>;
            "rux-icon-tag-faces": LocalJSX.RuxIconTagFaces & JSXBase.HTMLAttributes<HTMLRuxIconTagFacesElement>;
            "rux-icon-tap-and-play": LocalJSX.RuxIconTapAndPlay & JSXBase.HTMLAttributes<HTMLRuxIconTapAndPlayElement>;
            "rux-icon-terrain": LocalJSX.RuxIconTerrain & JSXBase.HTMLAttributes<HTMLRuxIconTerrainElement>;
            "rux-icon-text-fields": LocalJSX.RuxIconTextFields & JSXBase.HTMLAttributes<HTMLRuxIconTextFieldsElement>;
            "rux-icon-text-format": LocalJSX.RuxIconTextFormat & JSXBase.HTMLAttributes<HTMLRuxIconTextFormatElement>;
            "rux-icon-text-rotate-up": LocalJSX.RuxIconTextRotateUp & JSXBase.HTMLAttributes<HTMLRuxIconTextRotateUpElement>;
            "rux-icon-text-rotate-vertical": LocalJSX.RuxIconTextRotateVertical & JSXBase.HTMLAttributes<HTMLRuxIconTextRotateVerticalElement>;
            "rux-icon-text-rotation-none": LocalJSX.RuxIconTextRotationNone & JSXBase.HTMLAttributes<HTMLRuxIconTextRotationNoneElement>;
            "rux-icon-textsms": LocalJSX.RuxIconTextsms & JSXBase.HTMLAttributes<HTMLRuxIconTextsmsElement>;
            "rux-icon-texture": LocalJSX.RuxIconTexture & JSXBase.HTMLAttributes<HTMLRuxIconTextureElement>;
            "rux-icon-theaters": LocalJSX.RuxIconTheaters & JSXBase.HTMLAttributes<HTMLRuxIconTheatersElement>;
            "rux-icon-thermal": LocalJSX.RuxIconThermal & JSXBase.HTMLAttributes<HTMLRuxIconThermalElement>;
            "rux-icon-thumb-down": LocalJSX.RuxIconThumbDown & JSXBase.HTMLAttributes<HTMLRuxIconThumbDownElement>;
            "rux-icon-thumb-down-alt": LocalJSX.RuxIconThumbDownAlt & JSXBase.HTMLAttributes<HTMLRuxIconThumbDownAltElement>;
            "rux-icon-thumb-up": LocalJSX.RuxIconThumbUp & JSXBase.HTMLAttributes<HTMLRuxIconThumbUpElement>;
            "rux-icon-thumb-up-alt": LocalJSX.RuxIconThumbUpAlt & JSXBase.HTMLAttributes<HTMLRuxIconThumbUpAltElement>;
            "rux-icon-thumbs-up-down": LocalJSX.RuxIconThumbsUpDown & JSXBase.HTMLAttributes<HTMLRuxIconThumbsUpDownElement>;
            "rux-icon-time-to-leave": LocalJSX.RuxIconTimeToLeave & JSXBase.HTMLAttributes<HTMLRuxIconTimeToLeaveElement>;
            "rux-icon-timelapse": LocalJSX.RuxIconTimelapse & JSXBase.HTMLAttributes<HTMLRuxIconTimelapseElement>;
            "rux-icon-timeline": LocalJSX.RuxIconTimeline & JSXBase.HTMLAttributes<HTMLRuxIconTimelineElement>;
            "rux-icon-timer": LocalJSX.RuxIconTimer & JSXBase.HTMLAttributes<HTMLRuxIconTimerElement>;
            "rux-icon-timer-10": LocalJSX.RuxIconTimer10 & JSXBase.HTMLAttributes<HTMLRuxIconTimer10Element>;
            "rux-icon-timer-3": LocalJSX.RuxIconTimer3 & JSXBase.HTMLAttributes<HTMLRuxIconTimer3Element>;
            "rux-icon-timer-off": LocalJSX.RuxIconTimerOff & JSXBase.HTMLAttributes<HTMLRuxIconTimerOffElement>;
            "rux-icon-title": LocalJSX.RuxIconTitle & JSXBase.HTMLAttributes<HTMLRuxIconTitleElement>;
            "rux-icon-toc": LocalJSX.RuxIconToc & JSXBase.HTMLAttributes<HTMLRuxIconTocElement>;
            "rux-icon-today": LocalJSX.RuxIconToday & JSXBase.HTMLAttributes<HTMLRuxIconTodayElement>;
            "rux-icon-toggle-off": LocalJSX.RuxIconToggleOff & JSXBase.HTMLAttributes<HTMLRuxIconToggleOffElement>;
            "rux-icon-toggle-on": LocalJSX.RuxIconToggleOn & JSXBase.HTMLAttributes<HTMLRuxIconToggleOnElement>;
            "rux-icon-toll": LocalJSX.RuxIconToll & JSXBase.HTMLAttributes<HTMLRuxIconTollElement>;
            "rux-icon-tonality": LocalJSX.RuxIconTonality & JSXBase.HTMLAttributes<HTMLRuxIconTonalityElement>;
            "rux-icon-touch-app": LocalJSX.RuxIconTouchApp & JSXBase.HTMLAttributes<HTMLRuxIconTouchAppElement>;
            "rux-icon-toys": LocalJSX.RuxIconToys & JSXBase.HTMLAttributes<HTMLRuxIconToysElement>;
            "rux-icon-track-changes": LocalJSX.RuxIconTrackChanges & JSXBase.HTMLAttributes<HTMLRuxIconTrackChangesElement>;
            "rux-icon-traffic": LocalJSX.RuxIconTraffic & JSXBase.HTMLAttributes<HTMLRuxIconTrafficElement>;
            "rux-icon-train": LocalJSX.RuxIconTrain & JSXBase.HTMLAttributes<HTMLRuxIconTrainElement>;
            "rux-icon-tram": LocalJSX.RuxIconTram & JSXBase.HTMLAttributes<HTMLRuxIconTramElement>;
            "rux-icon-transfer-within-a-station": LocalJSX.RuxIconTransferWithinAStation & JSXBase.HTMLAttributes<HTMLRuxIconTransferWithinAStationElement>;
            "rux-icon-transform": LocalJSX.RuxIconTransform & JSXBase.HTMLAttributes<HTMLRuxIconTransformElement>;
            "rux-icon-transit-enterexit": LocalJSX.RuxIconTransitEnterexit & JSXBase.HTMLAttributes<HTMLRuxIconTransitEnterexitElement>;
            "rux-icon-translate": LocalJSX.RuxIconTranslate & JSXBase.HTMLAttributes<HTMLRuxIconTranslateElement>;
            "rux-icon-trending-down": LocalJSX.RuxIconTrendingDown & JSXBase.HTMLAttributes<HTMLRuxIconTrendingDownElement>;
            "rux-icon-trending-flat": LocalJSX.RuxIconTrendingFlat & JSXBase.HTMLAttributes<HTMLRuxIconTrendingFlatElement>;
            "rux-icon-trending-up": LocalJSX.RuxIconTrendingUp & JSXBase.HTMLAttributes<HTMLRuxIconTrendingUpElement>;
            "rux-icon-trip-origin": LocalJSX.RuxIconTripOrigin & JSXBase.HTMLAttributes<HTMLRuxIconTripOriginElement>;
            "rux-icon-tune": LocalJSX.RuxIconTune & JSXBase.HTMLAttributes<HTMLRuxIconTuneElement>;
            "rux-icon-turned-in": LocalJSX.RuxIconTurnedIn & JSXBase.HTMLAttributes<HTMLRuxIconTurnedInElement>;
            "rux-icon-turned-in-not": LocalJSX.RuxIconTurnedInNot & JSXBase.HTMLAttributes<HTMLRuxIconTurnedInNotElement>;
            "rux-icon-tv": LocalJSX.RuxIconTv & JSXBase.HTMLAttributes<HTMLRuxIconTvElement>;
            "rux-icon-tv-off": LocalJSX.RuxIconTvOff & JSXBase.HTMLAttributes<HTMLRuxIconTvOffElement>;
            "rux-icon-unarchive": LocalJSX.RuxIconUnarchive & JSXBase.HTMLAttributes<HTMLRuxIconUnarchiveElement>;
            "rux-icon-undo": LocalJSX.RuxIconUndo & JSXBase.HTMLAttributes<HTMLRuxIconUndoElement>;
            "rux-icon-unfold-less": LocalJSX.RuxIconUnfoldLess & JSXBase.HTMLAttributes<HTMLRuxIconUnfoldLessElement>;
            "rux-icon-unfold-more": LocalJSX.RuxIconUnfoldMore & JSXBase.HTMLAttributes<HTMLRuxIconUnfoldMoreElement>;
            "rux-icon-unsubscribe": LocalJSX.RuxIconUnsubscribe & JSXBase.HTMLAttributes<HTMLRuxIconUnsubscribeElement>;
            "rux-icon-update": LocalJSX.RuxIconUpdate & JSXBase.HTMLAttributes<HTMLRuxIconUpdateElement>;
            "rux-icon-usb": LocalJSX.RuxIconUsb & JSXBase.HTMLAttributes<HTMLRuxIconUsbElement>;
            "rux-icon-verified-user": LocalJSX.RuxIconVerifiedUser & JSXBase.HTMLAttributes<HTMLRuxIconVerifiedUserElement>;
            "rux-icon-vertical-align-bottom": LocalJSX.RuxIconVerticalAlignBottom & JSXBase.HTMLAttributes<HTMLRuxIconVerticalAlignBottomElement>;
            "rux-icon-vertical-align-center": LocalJSX.RuxIconVerticalAlignCenter & JSXBase.HTMLAttributes<HTMLRuxIconVerticalAlignCenterElement>;
            "rux-icon-vertical-align-top": LocalJSX.RuxIconVerticalAlignTop & JSXBase.HTMLAttributes<HTMLRuxIconVerticalAlignTopElement>;
            "rux-icon-vertical-split": LocalJSX.RuxIconVerticalSplit & JSXBase.HTMLAttributes<HTMLRuxIconVerticalSplitElement>;
            "rux-icon-vibration": LocalJSX.RuxIconVibration & JSXBase.HTMLAttributes<HTMLRuxIconVibrationElement>;
            "rux-icon-video-call": LocalJSX.RuxIconVideoCall & JSXBase.HTMLAttributes<HTMLRuxIconVideoCallElement>;
            "rux-icon-video-label": LocalJSX.RuxIconVideoLabel & JSXBase.HTMLAttributes<HTMLRuxIconVideoLabelElement>;
            "rux-icon-video-library": LocalJSX.RuxIconVideoLibrary & JSXBase.HTMLAttributes<HTMLRuxIconVideoLibraryElement>;
            "rux-icon-videocam": LocalJSX.RuxIconVideocam & JSXBase.HTMLAttributes<HTMLRuxIconVideocamElement>;
            "rux-icon-videocam-off": LocalJSX.RuxIconVideocamOff & JSXBase.HTMLAttributes<HTMLRuxIconVideocamOffElement>;
            "rux-icon-videogame-asset": LocalJSX.RuxIconVideogameAsset & JSXBase.HTMLAttributes<HTMLRuxIconVideogameAssetElement>;
            "rux-icon-view-agenda": LocalJSX.RuxIconViewAgenda & JSXBase.HTMLAttributes<HTMLRuxIconViewAgendaElement>;
            "rux-icon-view-array": LocalJSX.RuxIconViewArray & JSXBase.HTMLAttributes<HTMLRuxIconViewArrayElement>;
            "rux-icon-view-carousel": LocalJSX.RuxIconViewCarousel & JSXBase.HTMLAttributes<HTMLRuxIconViewCarouselElement>;
            "rux-icon-view-column": LocalJSX.RuxIconViewColumn & JSXBase.HTMLAttributes<HTMLRuxIconViewColumnElement>;
            "rux-icon-view-comfy": LocalJSX.RuxIconViewComfy & JSXBase.HTMLAttributes<HTMLRuxIconViewComfyElement>;
            "rux-icon-view-compact": LocalJSX.RuxIconViewCompact & JSXBase.HTMLAttributes<HTMLRuxIconViewCompactElement>;
            "rux-icon-view-day": LocalJSX.RuxIconViewDay & JSXBase.HTMLAttributes<HTMLRuxIconViewDayElement>;
            "rux-icon-view-headline": LocalJSX.RuxIconViewHeadline & JSXBase.HTMLAttributes<HTMLRuxIconViewHeadlineElement>;
            "rux-icon-view-list": LocalJSX.RuxIconViewList & JSXBase.HTMLAttributes<HTMLRuxIconViewListElement>;
            "rux-icon-view-module": LocalJSX.RuxIconViewModule & JSXBase.HTMLAttributes<HTMLRuxIconViewModuleElement>;
            "rux-icon-view-quilt": LocalJSX.RuxIconViewQuilt & JSXBase.HTMLAttributes<HTMLRuxIconViewQuiltElement>;
            "rux-icon-view-stream": LocalJSX.RuxIconViewStream & JSXBase.HTMLAttributes<HTMLRuxIconViewStreamElement>;
            "rux-icon-view-week": LocalJSX.RuxIconViewWeek & JSXBase.HTMLAttributes<HTMLRuxIconViewWeekElement>;
            "rux-icon-vignette": LocalJSX.RuxIconVignette & JSXBase.HTMLAttributes<HTMLRuxIconVignetteElement>;
            "rux-icon-visibility": LocalJSX.RuxIconVisibility & JSXBase.HTMLAttributes<HTMLRuxIconVisibilityElement>;
            "rux-icon-visibility-off": LocalJSX.RuxIconVisibilityOff & JSXBase.HTMLAttributes<HTMLRuxIconVisibilityOffElement>;
            "rux-icon-voice-chat": LocalJSX.RuxIconVoiceChat & JSXBase.HTMLAttributes<HTMLRuxIconVoiceChatElement>;
            "rux-icon-voice-over-off": LocalJSX.RuxIconVoiceOverOff & JSXBase.HTMLAttributes<HTMLRuxIconVoiceOverOffElement>;
            "rux-icon-voicemail": LocalJSX.RuxIconVoicemail & JSXBase.HTMLAttributes<HTMLRuxIconVoicemailElement>;
            "rux-icon-volume-down": LocalJSX.RuxIconVolumeDown & JSXBase.HTMLAttributes<HTMLRuxIconVolumeDownElement>;
            "rux-icon-volume-mute": LocalJSX.RuxIconVolumeMute & JSXBase.HTMLAttributes<HTMLRuxIconVolumeMuteElement>;
            "rux-icon-volume-off": LocalJSX.RuxIconVolumeOff & JSXBase.HTMLAttributes<HTMLRuxIconVolumeOffElement>;
            "rux-icon-volume-up": LocalJSX.RuxIconVolumeUp & JSXBase.HTMLAttributes<HTMLRuxIconVolumeUpElement>;
            "rux-icon-vpn-key": LocalJSX.RuxIconVpnKey & JSXBase.HTMLAttributes<HTMLRuxIconVpnKeyElement>;
            "rux-icon-vpn-lock": LocalJSX.RuxIconVpnLock & JSXBase.HTMLAttributes<HTMLRuxIconVpnLockElement>;
            "rux-icon-wallpaper": LocalJSX.RuxIconWallpaper & JSXBase.HTMLAttributes<HTMLRuxIconWallpaperElement>;
            "rux-icon-warning": LocalJSX.RuxIconWarning & JSXBase.HTMLAttributes<HTMLRuxIconWarningElement>;
            "rux-icon-watch": LocalJSX.RuxIconWatch & JSXBase.HTMLAttributes<HTMLRuxIconWatchElement>;
            "rux-icon-watch-later": LocalJSX.RuxIconWatchLater & JSXBase.HTMLAttributes<HTMLRuxIconWatchLaterElement>;
            "rux-icon-waves": LocalJSX.RuxIconWaves & JSXBase.HTMLAttributes<HTMLRuxIconWavesElement>;
            "rux-icon-wb-auto": LocalJSX.RuxIconWbAuto & JSXBase.HTMLAttributes<HTMLRuxIconWbAutoElement>;
            "rux-icon-wb-cloudy": LocalJSX.RuxIconWbCloudy & JSXBase.HTMLAttributes<HTMLRuxIconWbCloudyElement>;
            "rux-icon-wb-incandescent": LocalJSX.RuxIconWbIncandescent & JSXBase.HTMLAttributes<HTMLRuxIconWbIncandescentElement>;
            "rux-icon-wb-iridescent": LocalJSX.RuxIconWbIridescent & JSXBase.HTMLAttributes<HTMLRuxIconWbIridescentElement>;
            "rux-icon-wb-sunny": LocalJSX.RuxIconWbSunny & JSXBase.HTMLAttributes<HTMLRuxIconWbSunnyElement>;
            "rux-icon-wc": LocalJSX.RuxIconWc & JSXBase.HTMLAttributes<HTMLRuxIconWcElement>;
            "rux-icon-web": LocalJSX.RuxIconWeb & JSXBase.HTMLAttributes<HTMLRuxIconWebElement>;
            "rux-icon-web-asset": LocalJSX.RuxIconWebAsset & JSXBase.HTMLAttributes<HTMLRuxIconWebAssetElement>;
            "rux-icon-weekend": LocalJSX.RuxIconWeekend & JSXBase.HTMLAttributes<HTMLRuxIconWeekendElement>;
            "rux-icon-whatshot": LocalJSX.RuxIconWhatshot & JSXBase.HTMLAttributes<HTMLRuxIconWhatshotElement>;
            "rux-icon-where-to-vote": LocalJSX.RuxIconWhereToVote & JSXBase.HTMLAttributes<HTMLRuxIconWhereToVoteElement>;
            "rux-icon-widgets": LocalJSX.RuxIconWidgets & JSXBase.HTMLAttributes<HTMLRuxIconWidgetsElement>;
            "rux-icon-wifi": LocalJSX.RuxIconWifi & JSXBase.HTMLAttributes<HTMLRuxIconWifiElement>;
            "rux-icon-wifi-lock": LocalJSX.RuxIconWifiLock & JSXBase.HTMLAttributes<HTMLRuxIconWifiLockElement>;
            "rux-icon-wifi-off": LocalJSX.RuxIconWifiOff & JSXBase.HTMLAttributes<HTMLRuxIconWifiOffElement>;
            "rux-icon-wifi-tethering": LocalJSX.RuxIconWifiTethering & JSXBase.HTMLAttributes<HTMLRuxIconWifiTetheringElement>;
            "rux-icon-work": LocalJSX.RuxIconWork & JSXBase.HTMLAttributes<HTMLRuxIconWorkElement>;
            "rux-icon-work-off": LocalJSX.RuxIconWorkOff & JSXBase.HTMLAttributes<HTMLRuxIconWorkOffElement>;
            "rux-icon-work-outline": LocalJSX.RuxIconWorkOutline & JSXBase.HTMLAttributes<HTMLRuxIconWorkOutlineElement>;
            "rux-icon-wrap-text": LocalJSX.RuxIconWrapText & JSXBase.HTMLAttributes<HTMLRuxIconWrapTextElement>;
            "rux-icon-youtube-searched-for": LocalJSX.RuxIconYoutubeSearchedFor & JSXBase.HTMLAttributes<HTMLRuxIconYoutubeSearchedForElement>;
            "rux-icon-zoom-in": LocalJSX.RuxIconZoomIn & JSXBase.HTMLAttributes<HTMLRuxIconZoomInElement>;
            "rux-icon-zoom-in-map": LocalJSX.RuxIconZoomInMap & JSXBase.HTMLAttributes<HTMLRuxIconZoomInMapElement>;
            "rux-icon-zoom-out": LocalJSX.RuxIconZoomOut & JSXBase.HTMLAttributes<HTMLRuxIconZoomOutElement>;
            "rux-icon-zoom-out-map": LocalJSX.RuxIconZoomOutMap & JSXBase.HTMLAttributes<HTMLRuxIconZoomOutMapElement>;
            "rux-log": LocalJSX.RuxLog & JSXBase.HTMLAttributes<HTMLRuxLogElement>;
            "rux-menu-item": LocalJSX.RuxMenuItem & JSXBase.HTMLAttributes<HTMLRuxMenuItemElement>;
            "rux-menu-item-divider": LocalJSX.RuxMenuItemDivider & JSXBase.HTMLAttributes<HTMLRuxMenuItemDividerElement>;
            "rux-modal": LocalJSX.RuxModal & JSXBase.HTMLAttributes<HTMLRuxModalElement>;
            "rux-monitoring-icon": LocalJSX.RuxMonitoringIcon & JSXBase.HTMLAttributes<HTMLRuxMonitoringIconElement>;
            "rux-monitoring-progress-icon": LocalJSX.RuxMonitoringProgressIcon & JSXBase.HTMLAttributes<HTMLRuxMonitoringProgressIconElement>;
            "rux-notification": LocalJSX.RuxNotification & JSXBase.HTMLAttributes<HTMLRuxNotificationElement>;
            "rux-pop-up-menu": LocalJSX.RuxPopUpMenu & JSXBase.HTMLAttributes<HTMLRuxPopUpMenuElement>;
            "rux-progress": LocalJSX.RuxProgress & JSXBase.HTMLAttributes<HTMLRuxProgressElement>;
            "rux-segmented-button": LocalJSX.RuxSegmentedButton & JSXBase.HTMLAttributes<HTMLRuxSegmentedButtonElement>;
            "rux-status": LocalJSX.RuxStatus & JSXBase.HTMLAttributes<HTMLRuxStatusElement>;
            "rux-switch": LocalJSX.RuxSwitch & JSXBase.HTMLAttributes<HTMLRuxSwitchElement>;
            "rux-tab": LocalJSX.RuxTab & JSXBase.HTMLAttributes<HTMLRuxTabElement>;
            "rux-tab-panel": LocalJSX.RuxTabPanel & JSXBase.HTMLAttributes<HTMLRuxTabPanelElement>;
            "rux-tab-panels": LocalJSX.RuxTabPanels & JSXBase.HTMLAttributes<HTMLRuxTabPanelsElement>;
            "rux-table": LocalJSX.RuxTable & JSXBase.HTMLAttributes<HTMLRuxTableElement>;
            "rux-table-body": LocalJSX.RuxTableBody & JSXBase.HTMLAttributes<HTMLRuxTableBodyElement>;
            "rux-table-cell": LocalJSX.RuxTableCell & JSXBase.HTMLAttributes<HTMLRuxTableCellElement>;
            "rux-table-header": LocalJSX.RuxTableHeader & JSXBase.HTMLAttributes<HTMLRuxTableHeaderElement>;
            "rux-table-header-cell": LocalJSX.RuxTableHeaderCell & JSXBase.HTMLAttributes<HTMLRuxTableHeaderCellElement>;
            "rux-table-header-row": LocalJSX.RuxTableHeaderRow & JSXBase.HTMLAttributes<HTMLRuxTableHeaderRowElement>;
            "rux-table-row": LocalJSX.RuxTableRow & JSXBase.HTMLAttributes<HTMLRuxTableRowElement>;
            "rux-tabs": LocalJSX.RuxTabs & JSXBase.HTMLAttributes<HTMLRuxTabsElement>;
            "rux-tree": LocalJSX.RuxTree & JSXBase.HTMLAttributes<HTMLRuxTreeElement>;
            "rux-tree-node": LocalJSX.RuxTreeNode & JSXBase.HTMLAttributes<HTMLRuxTreeNodeElement>;
        }
    }
}
