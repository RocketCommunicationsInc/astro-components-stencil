const fs = require('fs')

const main = () => {
    fs.readdir('./src/icons', (err, files) => {
        if (err) throw err

        files.forEach((file) => {
            const iconName = file.replace('.svg', '')

            const template = getTemplateSvg(file, iconName)
            fs.writeFile(
                `./src/components/rux-icon/icons/rux-icon-${iconName}.tsx`,
                template,
                (err) => {
                    if (err) throw err
                }
            )
        })
    })
}

const getTemplateSvg = (iconPath, iconName) => {
    return `import { Component, Prop, h } from '@stencil/core';
    import svgIcon from '../../../icons/${iconPath}';

    /**
     * WARNING: This is an autogenerated component.
     * Do not make any changes to this file or they will be overwritten on build.
     * The template for this file is located in the generate-icons.js util file.
     * /

    /** @internal **/
    @Component({
      tag: 'rux-icon-${iconName}',
      shadow: false,
    })
    export class RuxIcon${toPascalCase(iconName)} {
      /**
       * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
       */

      @Prop() size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto'

      get iconSize() {

        const sizes: { [key: string]: any } = {
          'extra-small': '1rem',
          'small': '2rem',
          'normal': '3rem',
          'large': '4rem'
        }

        if (sizes[this.size]) {
          return sizes[this.size]
        } else {
          return this.size
        }

      }
      render() {
        const style = {
          height: this.iconSize,
          width: this.iconSize
        }

        return <div style={style} innerHTML={svgIcon}></div>;
      }
    }
  `
}

const toPascalCase = (string) => string.replace(/(^\w|-\w)/g, clearAndUpper)

const clearAndUpper = (string) => string.replace(/-/, '').toUpperCase()

main()
